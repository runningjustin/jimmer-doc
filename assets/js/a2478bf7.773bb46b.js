"use strict";(self.webpackChunkdocusaurus_code=self.webpackChunkdocusaurus_code||[]).push([[8876],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>c});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},d=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),u=p(n),c=r,k=u["".concat(s,".").concat(c)]||u[c]||m[c]||i;return n?a.createElement(k,l(l({ref:t},d),{},{components:n})):a.createElement(k,l({ref:t},d))}));function c(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,l=new Array(i);l[0]=u;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:r,l[1]=o;for(var p=2;p<i;p++)l[p]=n[p];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},85162:(e,t,n)=>{n.d(t,{Z:()=>l});var a=n(67294),r=n(34334);const i="tabItem_Ymn6";function l(e){let{children:t,hidden:n,className:l}=e;return a.createElement("div",{role:"tabpanel",className:(0,r.Z)(i,l),hidden:n},t)}},65488:(e,t,n)=>{n.d(t,{Z:()=>c});var a=n(83117),r=n(67294),i=n(34334),l=n(72389),o=n(67392),s=n(7094),p=n(12466);const d="tabList__CuJ",m="tabItem_LNqP";function u(e){var t;const{lazy:n,block:l,defaultValue:u,values:c,groupId:k,className:b}=e,g=r.Children.map(e.children,(e=>{if((0,r.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),y=c??g.map((e=>{let{props:{value:t,label:n,attributes:a}}=e;return{value:t,label:n,attributes:a}})),h=(0,o.l)(y,((e,t)=>e.value===t.value));if(h.length>0)throw new Error(`Docusaurus error: Duplicate values "${h.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const N=null===u?u:u??(null==(t=g.find((e=>e.props.default)))?void 0:t.props.value)??g[0].props.value;if(null!==N&&!y.some((e=>e.value===N)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${N}" but none of its children has the corresponding value. Available values are: ${y.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:v,setTabGroupChoices:f}=(0,s.U)(),[O,T]=(0,r.useState)(N),x=[],{blockElementScrollPositionUntilNextRender:S}=(0,p.o5)();if(null!=k){const e=v[k];null!=e&&e!==O&&y.some((t=>t.value===e))&&T(e)}const C=e=>{const t=e.currentTarget,n=x.indexOf(t),a=y[n].value;a!==O&&(S(t),T(a),null!=k&&f(k,String(a)))},I=e=>{var t;let n=null;switch(e.key){case"ArrowRight":{const t=x.indexOf(e.currentTarget)+1;n=x[t]??x[0];break}case"ArrowLeft":{const t=x.indexOf(e.currentTarget)-1;n=x[t]??x[x.length-1];break}}null==(t=n)||t.focus()};return r.createElement("div",{className:(0,i.Z)("tabs-container",d)},r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.Z)("tabs",{"tabs--block":l},b)},y.map((e=>{let{value:t,label:n,attributes:l}=e;return r.createElement("li",(0,a.Z)({role:"tab",tabIndex:O===t?0:-1,"aria-selected":O===t,key:t,ref:e=>x.push(e),onKeyDown:I,onFocus:C,onClick:C},l,{className:(0,i.Z)("tabs__item",m,null==l?void 0:l.className,{"tabs__item--active":O===t})}),n??t)}))),n?(0,r.cloneElement)(g.filter((e=>e.props.value===O))[0],{className:"margin-top--md"}):r.createElement("div",{className:"margin-top--md"},g.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==O})))))}function c(e){const t=(0,l.Z)();return r.createElement(u,(0,a.Z)({key:String(t)},e))}},37185:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>s,default:()=>c,frontMatter:()=>o,metadata:()=>p,toc:()=>m});var a=n(83117),r=(n(67294),n(3905)),i=n(65488),l=n(85162);const o={sidebar_position:6,title:"Dynamic Ordering"},s=void 0,p={unversionedId:"query/dynamic-order",id:"query/dynamic-order",title:"Dynamic Ordering",description:"Static Ordering",source:"@site/docs/query/dynamic-order.mdx",sourceDirName:"query",slug:"/query/dynamic-order",permalink:"/jimmer-doc/docs/query/dynamic-order",draft:!1,editUrl:"https://github.com/babyfish-ct/jimmer-doc/tree/main/docs/query/dynamic-order.mdx",tags:[],version:"current",sidebarPosition:6,frontMatter:{sidebar_position:6,title:"Dynamic Ordering"},sidebar:"tutorialSidebar",previous:{title:"\ud83d\udd25 Implicit Subquery",permalink:"/jimmer-doc/docs/query/implicit-subquery"},next:{title:"Aggregate & Group",permalink:"/jimmer-doc/docs/query/group"}},d={},m=[{value:"Static Ordering",id:"static-ordering",level:2},{value:"Dynamic Ordering",id:"dynamic-ordering",level:2},{value:"orderByIf",id:"orderbyif",level:3},{value:"Client-specified Ordering",id:"client-specified-ordering",level:3},{value:"Handling Spring Data Sort",id:"handling-spring-data-sort",level:3}],u={toc:m};function c(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"static-ordering"},"Static Ordering"),(0,r.kt)("p",null,"First, let's look at how to use static ordering to understand the ordering concepts in Jimmer:"),(0,r.kt)(i.Z,{groupId:"language",mdxType:"Tabs"},(0,r.kt)(l.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"public List<Book> findBooks() {\n\n    BookTable table = Tables.BOOK_TABLE;\n\n    return sqlClient\n        .createQuery(table)\n        // highlight-next-line\n        .orderBy(table.name())\n        // highlight-next-line  \n        .orderBy(table.edition().desc())\n        // highlight-next-line\n        .orderBy(table.score().desc().nullsLast())\n        .select(table)\n        .execute();\n}\n"))),(0,r.kt)(l.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},"fun findBooks(): List<Book> =\n    sqlClient\n        .createQuery(Book::class) {\n            // highlight-next-line\n            orderBy(table.name)\n            // highlight-next-line\n            orderBy(table.edition.desc()) \n            // highlight-next-line\n            orderBy(table.score.desc().nullsLast())\n            select(table)\n        }\n        .execute()\n")))),(0,r.kt)("admonition",{type:"caution"},(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("inlineCode",{parentName:"p"},"nullsFirst/nullsLast")," requires database support, such as Oracle.  "),(0,r.kt)("p",{parentName:"admonition"},"For more databases that do not support this, use ",(0,r.kt)("inlineCode",{parentName:"p"},"case")," expressions in ",(0,r.kt)("a",{parentName:"p",href:"./expression"},"common expressions"),".")),(0,r.kt)("h2",{id:"dynamic-ordering"},"Dynamic Ordering"),(0,r.kt)("p",null,"There are two ways to use dynamic ordering:  "),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"orderByIf"),(0,r.kt)("li",{parentName:"ul"},"Ordering specified by client")),(0,r.kt)("h3",{id:"orderbyif"},"orderByIf"),(0,r.kt)("p",null,"The usage of ",(0,r.kt)("inlineCode",{parentName:"p"},"orderByIf")," is similar to ",(0,r.kt)("inlineCode",{parentName:"p"},"whereIf"),".  "),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("ul",{parentName:"admonition"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Unlike ",(0,r.kt)("inlineCode",{parentName:"p"},"where"),", the order of ",(0,r.kt)("inlineCode",{parentName:"p"},"orderBy")," is very sensitive, so ",(0,r.kt)("inlineCode",{parentName:"p"},"orderByIf")," is not as useful as ",(0,r.kt)("inlineCode",{parentName:"p"},"whereIf"),".  "),(0,r.kt)("p",{parentName:"li"},"Still, Jimmer supports ",(0,r.kt)("inlineCode",{parentName:"p"},"orderByIf")," since it's the simplest and most basic usage.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"orderByIf")," is actually the Java DSL API for dynamic ordering. Java DSL uses fluent style, ",(0,r.kt)("inlineCode",{parentName:"p"},"orderByIf")," is provided to avoid breaking the fluent chaining.  "),(0,r.kt)("p",{parentName:"li"},"Kotlin DSL uses lambdas so arbitrary logic can be mixed in, hence Kotlin does not need ",(0,r.kt)("inlineCode",{parentName:"p"},"orderByIf"),".")))),(0,r.kt)("p",null,"Assume ",(0,r.kt)("inlineCode",{parentName:"p"},"OrderMode")," is an enum with values ",(0,r.kt)("inlineCode",{parentName:"p"},"NAME")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"PRICE"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"orderByIf")," can be used like:"),(0,r.kt)(i.Z,{groupId:"language",mdxType:"Tabs"},(0,r.kt)(l.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"public List<Book> findBooks(OrderMode orderMode) {\n\n    BookTable table = Tables.BOOK_TABLE;\n\n    return sqlClient\n        .createQuery(table)\n        // highlight-next-line\n        .orderByIf(mode == OrderMode.NAME, table.name()) \n        // highlight-next-line\n        .orderByIf(mode == OrderMode.PRICE, table.price())\n        .select(table)\n        .execute(); \n}\n"))),(0,r.kt)(l.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},"fun findBooks(orderMode: OrderMode): List<Book> =\n    sqlClient\n        .createQuery(Book::class) {\n            // highlight-next-line\n            when (orderMode) {\n                OrderMode.NAME -> orderBy(table.name)\n                OrderMode.PRICE -> orderBy(table.price)\n            }\n            select(table)\n        }\n        .execute()\n")))),(0,r.kt)("h3",{id:"client-specified-ordering"},"Client-specified Ordering"),(0,r.kt)("p",null,"Often, the UI allows users to dynamically sort by interacting with table components. That is, the client decides the ordering and the server passively accepts parameters to query according to the sorting requirements from client."),(0,r.kt)("p",null,"The client can specify dynamic ordering by passing string parameters, which can be converted to ",(0,r.kt)("inlineCode",{parentName:"p"},"List<Order>")," needed by Jimmer using the method ",(0,r.kt)("inlineCode",{parentName:"p"},"makeOrders"),"."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"makeOrders")," is defined as:"),(0,r.kt)(i.Z,{groupId:"language",mdxType:"Tabs"},(0,r.kt)(l.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"public class Order {\n\n    public static List<Order> makeOrders(Props table, String ... codes) {\n        ...implementation omitted... \n    }\n\n    ...other code omitted...\n}\n"))),(0,r.kt)(l.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},"fun KProps<*>.makeOrders(vararg codes: String): List<Order> =\n    ...implementation omitted...\n")))),(0,r.kt)("p",null,"Where the first parameter ",(0,r.kt)("inlineCode",{parentName:"p"},"table")," is the root table in the SQL DSL.  "),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"makeOrders")," is very flexible to use, for example:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Sort by multiple columns:"),(0,r.kt)(i.Z,{groupId:"language",mdxType:"Tabs"},(0,r.kt)(l.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-java"},'Order.makeOrders(table, "name", "edition desc")\n'))),(0,r.kt)(l.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},'table.makeOrders("name", "edition desc")\n'))))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Merge multiple parameters into one separated by ",(0,r.kt)("inlineCode",{parentName:"p"},",")," or ",(0,r.kt)("inlineCode",{parentName:"p"},";"),": "),(0,r.kt)(i.Z,{groupId:"language",mdxType:"Tabs"},(0,r.kt)(l.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-java"},'Order.makeOrders(table, "name, edition desc")\n'))),(0,r.kt)(l.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},'table.makeOrders("name, edition desc")\n')))),(0,r.kt)("admonition",{parentName:"li",type:"info"},(0,r.kt)("p",{parentName:"admonition"},"In real projects, most cases would use the single parameter form since it's the simplest."))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Even supports sorting by reference associations ",(0,r.kt)("em",{parentName:"p"},"(one-to-one, many-to-one)"),":"),(0,r.kt)(i.Z,{groupId:"language",mdxType:"Tabs"},(0,r.kt)(l.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-java"},'Order.makeOrders(table, "store.city.name; store.name; name")\n'))),(0,r.kt)(l.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},'table.makeOrders("store.city.name; store.name; name")\n')))))),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"All ",(0,r.kt)("a",{parentName:"p",href:"./dynamic-join"},"dynamic join")," features are valid for these implicit joins.  ")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Order.makeOrders")," can be used like:"),(0,r.kt)(i.Z,{groupId:"language",mdxType:"Tabs"},(0,r.kt)(l.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"public List<Book> findBooks(String sort) {\n\n    BookTable table = Tables.BOOK_TABLE;\n\n    return sqlClient\n        .createQuery(table)\n        // highlight-next-line\n        .orderBy(Order.makeOrders(table, sort)) \n        .select(table)\n        .execute();\n}\n"))),(0,r.kt)(l.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},"fun findBooks(sort: String): List<Book> =\n    sqlClient\n        .createQuery(Book::class) {\n            // highlight-next-line\n            orderBy(table.makeOrders(sort))\n            select(table)\n        }\n        .execute() \n")))),(0,r.kt)("p",null,"If called as ",(0,r.kt)("inlineCode",{parentName:"p"},'findBooks("store.name asc, name asc")'),", the generated SQL would be: "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"select\n    tb_1_.ID,\n    tb_1_.NAME,\n    tb_1_.EDITION,\n    tb_1_.PRICE,\n    tb_1_.STORE_ID\nfrom BOOK tb_1_\n/* highlight-next-line */  \ninner join BOOK_STORE tb_2_\n    on tb_1_.STORE_ID = tb_2_.ID\norder by\n    tb_2_.NAME asc,\n    tb_1_.NAME desc\n")),(0,r.kt)("p",null,"As can be seen, implicit joins are built for sorting criteria involving associations."),(0,r.kt)("h3",{id:"handling-spring-data-sort"},"Handling Spring Data Sort"),(0,r.kt)("p",null,"In the above examples, we directly convert the sorting string from client into Jimmer SQL AST orders."),(0,r.kt)("p",null,"However, when working with Spring Data, we may need to handle ",(0,r.kt)("a",{parentName:"p",href:"https://docs.spring.io/spring-data/commons/docs/current/api/org/springframework/data/domain/Sort.html"},"Sort")," from Spring Data."),(0,r.kt)("p",null,"We can write the query like this, with ",(0,r.kt)("inlineCode",{parentName:"p"},"Sort")," as parameter instead of string:"),(0,r.kt)(i.Z,{groupId:"language",mdxType:"Tabs"},(0,r.kt)(l.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"public List<Book> findBooks(Sort sort) {\n\n    BookTable table = Tables.BOOK_TABLE;\n\n    return sqlClient\n        .createQuery(table)\n        // highlight-next-line\n        .orderBy(table, SpringOrders.toOrders(sort))\n        .select(table)\n        .execute();\n}\n"))),(0,r.kt)(l.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},"fun findBooks(sort: Sort): List<Book> =\n    sqlClient\n        .createQuery(Book::class) {\n            // highlight-next-line\n            orderBy(sort)\n            select(table)\n        }\n        .execute()\n")))),(0,r.kt)("p",null,"This code works as:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Java:  "),(0,r.kt)("p",{parentName:"li"},"Jimmer Java API provides a utility class ",(0,r.kt)("inlineCode",{parentName:"p"},"org.babyfish.jimmer.spring.repository.SpringOrders"),". Its static method ",(0,r.kt)("inlineCode",{parentName:"p"},"toOrders")," converts the Spring Data ",(0,r.kt)("inlineCode",{parentName:"p"},"Sort")," object into the ",(0,r.kt)("inlineCode",{parentName:"p"},"Order")," array in Jimmer SQL DSL.  "),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"SpringOrders.toOrders")," takes two parameters:"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"table"),": The root table in SQL DSL")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"sort"),": The Spring Data ",(0,r.kt)("inlineCode",{parentName:"p"},"Sort")," object"))),(0,r.kt)("p",{parentName:"li"},"After ",(0,r.kt)("inlineCode",{parentName:"p"},"SpringOrders.toOrders")," converts the ",(0,r.kt)("inlineCode",{parentName:"p"},"Sort")," into ",(0,r.kt)("inlineCode",{parentName:"p"},"Order")," array, ",(0,r.kt)("inlineCode",{parentName:"p"},"orderBy")," can be used to sort.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Kotlin:"),(0,r.kt)("p",{parentName:"li"},"Jimmer Kotlin API extends the query object to directly support sorting by the Spring Data ",(0,r.kt)("inlineCode",{parentName:"p"},"Sort"),"."))),(0,r.kt)("p",null,"This shows how to convert a Spring Data ",(0,r.kt)("inlineCode",{parentName:"p"},"Sort")," into ordering in Jimmer.  "),(0,r.kt)("p",null,"To further simplify user code, Jimmer provides the utility class ",(0,r.kt)("inlineCode",{parentName:"p"},"org.babyfish.jimmer.spring.model.SortUtils"),". Its static method ",(0,r.kt)("inlineCode",{parentName:"p"},"toSort")," can convert the sorting string from client into a Spring Data ",(0,r.kt)("inlineCode",{parentName:"p"},"Sort")," object. For example:"),(0,r.kt)(i.Z,{groupId:"language",mdxType:"Tabs"},(0,r.kt)(l.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'Sort sort = SortUtils.toSort("name asc, edition desc");\n'))),(0,r.kt)(l.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},'var sort = SortUtils.toSort("name asc, edition desc")\n')))),(0,r.kt)("p",null,"That is:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"+------------------------+ \n| Client sorting string  |  \n+-----------+------------+\n            |\n    SortUtils.toSort\n            |\n           \\|/\n+------------------------+\n|    Spring Data Sort    |\n+-----------+------------+\n            |\nJava: SpringOrders.toOrders, then orderBy\nKotlin: Directly orderBy with Sort object\n            |\n           \\|/\n+------------------------+\n| Ordering in Jimmer AST |\n+------------------------+\n")))}c.isMDXComponent=!0}}]);