"use strict";(self.webpackChunkdocusaurus_code=self.webpackChunkdocusaurus_code||[]).push([[6999],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>m});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),d=p(n),m=r,g=d["".concat(s,".").concat(m)]||d[m]||c[m]||i;return n?a.createElement(g,o(o({ref:t},u),{},{components:n})):a.createElement(g,o({ref:t},u))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,o[1]=l;for(var p=2;p<i;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},85162:(e,t,n)=>{n.d(t,{Z:()=>o});var a=n(67294),r=n(34334);const i="tabItem_Ymn6";function o(e){let{children:t,hidden:n,className:o}=e;return a.createElement("div",{role:"tabpanel",className:(0,r.Z)(i,o),hidden:n},t)}},65488:(e,t,n)=>{n.d(t,{Z:()=>m});var a=n(83117),r=n(67294),i=n(34334),o=n(72389),l=n(67392),s=n(7094),p=n(12466);const u="tabList__CuJ",c="tabItem_LNqP";function d(e){var t;const{lazy:n,block:o,defaultValue:d,values:m,groupId:g,className:b}=e,v=r.Children.map(e.children,(e=>{if((0,r.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),f=m??v.map((e=>{let{props:{value:t,label:n,attributes:a}}=e;return{value:t,label:n,attributes:a}})),k=(0,l.l)(f,((e,t)=>e.value===t.value));if(k.length>0)throw new Error(`Docusaurus error: Duplicate values "${k.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const h=null===d?d:d??(null==(t=v.find((e=>e.props.default)))?void 0:t.props.value)??v[0].props.value;if(null!==h&&!f.some((e=>e.value===h)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${h}" but none of its children has the corresponding value. Available values are: ${f.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:y,setTabGroupChoices:N}=(0,s.U)(),[T,w]=(0,r.useState)(h),x=[],{blockElementScrollPositionUntilNextRender:_}=(0,p.o5)();if(null!=g){const e=y[g];null!=e&&e!==T&&f.some((t=>t.value===e))&&w(e)}const E=e=>{const t=e.currentTarget,n=x.indexOf(t),a=f[n].value;a!==T&&(_(t),w(a),null!=g&&N(g,String(a)))},O=e=>{var t;let n=null;switch(e.key){case"ArrowRight":{const t=x.indexOf(e.currentTarget)+1;n=x[t]??x[0];break}case"ArrowLeft":{const t=x.indexOf(e.currentTarget)-1;n=x[t]??x[x.length-1];break}}null==(t=n)||t.focus()};return r.createElement("div",{className:(0,i.Z)("tabs-container",u)},r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.Z)("tabs",{"tabs--block":o},b)},f.map((e=>{let{value:t,label:n,attributes:o}=e;return r.createElement("li",(0,a.Z)({role:"tab",tabIndex:T===t?0:-1,"aria-selected":T===t,key:t,ref:e=>x.push(e),onKeyDown:O,onFocus:E,onClick:E},o,{className:(0,i.Z)("tabs__item",c,null==o?void 0:o.className,{"tabs__item--active":T===t})}),n??t)}))),n?(0,r.cloneElement)(v.filter((e=>e.props.value===T))[0],{className:"margin-top--md"}):r.createElement("div",{className:"margin-top--md"},v.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==T})))))}function m(e){const t=(0,o.Z)();return r.createElement(d,(0,a.Z)({key:String(t)},e))}},39683:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>s,default:()=>m,frontMatter:()=>l,metadata:()=>p,toc:()=>c});var a=n(83117),r=(n(67294),n(3905)),i=n(65488),o=n(85162);const l={sidebar_position:3,title:"Reverse Sorting Optimization"},s=void 0,p={unversionedId:"query/paging/reverse-sorting",id:"query/paging/reverse-sorting",title:"Reverse Sorting Optimization",description:"Concept",source:"@site/docs/query/paging/reverse-sorting.mdx",sourceDirName:"query/paging",slug:"/query/paging/reverse-sorting",permalink:"/jimmer-doc/docs/query/paging/reverse-sorting",draft:!1,editUrl:"https://github.com/babyfish-ct/jimmer-doc/tree/main/docs/query/paging/reverse-sorting.mdx",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3,title:"Reverse Sorting Optimization"},sidebar:"tutorialSidebar",previous:{title:"Table Join Optimization",permalink:"/jimmer-doc/docs/query/paging/unncessary-join"},next:{title:"Deep Pagination Optimization",permalink:"/jimmer-doc/docs/query/paging/deep-optimization"}},u={},c=[{value:"Concept",id:"concept",level:2},{value:"Example",id:"example",level:2},{value:"Forward Sorting",id:"forward-sorting",level:3},{value:"Reverse Sorting",id:"reverse-sorting",level:3}],d={toc:c};function m(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"concept"},"Concept"),(0,r.kt)("p",null,"As page numbers increase, pagination query efficiency drops. To solve this, Jimmer supports reverse sorting optimization."),(0,r.kt)("p",null,"Reverse sorting optimization takes effect only when the following prerequisites are met together:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"This feature does not apply to queries that only care about in-page data regardless of total row count before pagination, i.e. ",(0,r.kt)("inlineCode",{parentName:"p"},"limit(limit, offset)"),". It must be queries that care about both in-page data and total count."),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"For Java: ",(0,r.kt)("inlineCode",{parentName:"p"},"JRepository.Pager.execute")," ",(0,r.kt)("em",{parentName:"p"},"(with Spring Boot)")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"PagingQueries.execute")," ",(0,r.kt)("em",{parentName:"p"},"(without Spring Boot)"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"For Kotlin: ",(0,r.kt)("inlineCode",{parentName:"p"},"KConfigurableRootQuery<*, E>.fetchPage"))))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"The template query must have explicit orderBy clause. ")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"The queried page data is late relative to all data before pagination. I.e. "),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"offset")," + ",(0,r.kt)("inlineCode",{parentName:"p"},"pageSize")," / 2 > ",(0,r.kt)("inlineCode",{parentName:"p"},"totalCount")," / 2"))),(0,r.kt)("p",null,"When all above conditions are met, Jimmer flips the sorting of the template query. Because a forward sorting query with relatively large page number and a reverse sorting query with relatively small page number are equivalent. "),(0,r.kt)("h2",{id:"example"},"Example"),(0,r.kt)("p",null,"Let's look at an example."),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"Page<E>")," type in SpringBoot is too complex for demo by printing results here, so we don't use SpringBoot but a custom Page class:"),(0,r.kt)(i.Z,{groupId:"language",mdxType:"Tabs"},(0,r.kt)(o.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="Page.java"',title:'"Page.java"'},"@lombok.Data\npublic class Page<E> {\n    private final int totalRowCount;\n    private final int totalPage;\n    private final List<E> entities;\n}\n"))),(0,r.kt)(o.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin",metastring:'title="Page.kt"',title:'"Page.kt"'},"data class Page<E>(\n    val totalRowCount: Int,\n    val totalPage: Int, \n    val entities: List<E>\n)\n")))),(0,r.kt)("p",null,"The pagination query code:"),(0,r.kt)(i.Z,{groupId:"language",mdxType:"Tabs"},(0,r.kt)(o.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"public Page<Book> findBooks(\n    int pageIndex,\n    int pageSize    \n) {\n    BookTable table = Tables.BOOK_TABLE;\n    \n    return PagingQueries.excute(\n        sqlClient\n            .createQuery(table)\n            .orderBy(table.name().asc(), table.edition().desc())\n            .select(table),\n        pageIndex,\n        pageSize,\n        (entities, totalCount, queryImplementor) -> {\n            return new Page<>(\n                totalCount,\n                (totalCount + pageSize - 1) / pageSize,\n                entities\n            )\n        }\n    );\n}\n"))),(0,r.kt)(o.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},"fun findBooks(\n    pageIndex: Int,\n    pageSize: Int\n): Page<Book> = \n    sqlClient\n        .createQuery(Book::class) {\n            orderBy(table.name.asc(), table.edition.desc())\n            select(table)\n        }\n        .fetchPage(\n            pageIndex, pageSize  \n        ) { entities, totalCount, _ ->\n            Page(\n                totalCount,\n                (totalCount + pageSize - 1) / pageSize,\n                entities\n            )\n        }\n")))),(0,r.kt)("p",null,"Assume there are 12 ",(0,r.kt)("inlineCode",{parentName:"p"},"Book")," records total. ",(0,r.kt)("inlineCode",{parentName:"p"},"pageSize")," is 2, so there are 6 pages. ",(0,r.kt)("inlineCode",{parentName:"p"},"pageIndex")," has 5 possible values: 0, 1, 2, 3, 4, 5. "),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"0, 1, 2: Data to query is early, use forward sorting pagination.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"3, 4, 5: Data to query is late, use reverse sorting pagination."))),(0,r.kt)("p",null,"Next we demonstrate the difference between reverse and forward sorting pagination with ",(0,r.kt)("inlineCode",{parentName:"p"},"pageIndex=2")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"pageIndex=3")," as examples."),(0,r.kt)("h3",{id:"forward-sorting"},"Forward Sorting"),(0,r.kt)("p",null,"Executing ",(0,r.kt)("inlineCode",{parentName:"p"},"findBooks(2, 2)")," generates the forward sorting SQL:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"select \n    tb_1_.ID,\n    tb_1_.NAME,\n    tb_1_.EDITION,\n    tb_1_.PRICE,\n    tb_1_.STORE_ID\nfrom BOOK tb_1_  \norder by\n    /* highlight-next-line */  \n    tb_1_.NAME asc,\n    /* highlight-next-line */\n    tb_1_.EDITION desc\nlimit ? /* 2 */\noffset ? /* 4 */ \n")),(0,r.kt)("p",null,"The result is:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "totalCount":12,\n    "totalPage":6, \n    "entities":[\n        {\n            "id":11,\n            "name":"GraphQL in Action",\n            "edition":2,\n            "price":81,\n            "store":{\n                "id":2\n            }\n        },\n        {\n            "id":10, \n            "name":"GraphQL in Action",\n            "edition":1,\n            "price":80,\n            "store":{\n                "id":2\n            }\n        }\n    ]\n}\n')),(0,r.kt)("h3",{id:"reverse-sorting"},"Reverse Sorting"),(0,r.kt)("p",null,"Executing ",(0,r.kt)("inlineCode",{parentName:"p"},"findBooks(3, 2)")," generates the reverse sorting SQL: "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"select\n    tb_1_.ID,\n    tb_1_.NAME, \n    tb_1_.EDITION,\n    tb_1_.PRICE,\n    tb_1_.STORE_ID\nfrom BOOK tb_1_   \norder by\n    /* highlight-next-line */\n    tb_1_.NAME desc, // Reversed: asc to desc\n    /* highlight-next-line */ \n    tb_1_.EDITION asc // Reversed: desc to asc\nlimit ? /* 2 */\noffset ? /* 4 */\n")),(0,r.kt)("p",null,"The result is: "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "totalCount":12,\n    "totalPage":6,\n    "entities":[\n        {\n            "id":3,\n            "name":"Learning GraphQL",\n            "edition":3,\n            "price":51, \n            "store":{\n                "id":1\n            }\n        },\n        {\n            "id":2,\n            "name":"Learning GraphQL",\n            "edition":2,\n            "price":55,\n            "store":{\n                "id":1\n            } \n        }\n    ]\n}\n')))}m.isMDXComponent=!0}}]);