"use strict";(self.webpackChunkdocusaurus_code=self.webpackChunkdocusaurus_code||[]).push([[7407],{31536:(e,t,a)=>{a.d(t,{Z:()=>I});var n=a(80102),i=a(83117),r=a(67294),l=a(10209),o=a(59766),p=a(94780),m=a(34867);const s=(0,a(70182).ZP)();var d=a(65149),u=a(39707),k=a(66500),c=a(95408),h=a(98700),N=a(85893);const g=["component","direction","spacing","divider","children","className","useFlexGap"],y=(0,k.Z)(),f=s("div",{name:"MuiStack",slot:"Root",overridesResolver:(e,t)=>t.root});function b(e){return(0,d.Z)({props:e,name:"MuiStack",defaultTheme:y})}function v(e,t){const a=r.Children.toArray(e).filter(Boolean);return a.reduce(((e,n,i)=>(e.push(n),i<a.length-1&&e.push(r.cloneElement(t,{key:`separator-${i}`})),e)),[])}const T=({ownerState:e,theme:t})=>{let a=(0,i.Z)({display:"flex",flexDirection:"column"},(0,c.k9)({theme:t},(0,c.P$)({values:e.direction,breakpoints:t.breakpoints.values}),(e=>({flexDirection:e}))));if(e.spacing){const n=(0,h.hB)(t),i=Object.keys(t.breakpoints.values).reduce(((t,a)=>(("object"==typeof e.spacing&&null!=e.spacing[a]||"object"==typeof e.direction&&null!=e.direction[a])&&(t[a]=!0),t)),{}),r=(0,c.P$)({values:e.direction,base:i}),l=(0,c.P$)({values:e.spacing,base:i});"object"==typeof r&&Object.keys(r).forEach(((e,t,a)=>{if(!r[e]){const n=t>0?r[a[t-1]]:"column";r[e]=n}}));const p=(t,a)=>{return e.useFlexGap?{gap:(0,h.NA)(n,t)}:{"& > :not(style) ~ :not(style)":{margin:0,[`margin${i=a?r[a]:e.direction,{row:"Left","row-reverse":"Right",column:"Top","column-reverse":"Bottom"}[i]}`]:(0,h.NA)(n,t)}};var i};a=(0,o.Z)(a,(0,c.k9)({theme:t},l,p))}return a=(0,c.dt)(t.breakpoints,a),a};var w=a(90948),C=a(71657);const x=function(e={}){const{createStyledComponent:t=f,useThemeProps:a=b,componentName:o="MuiStack"}=e,s=t(T),d=r.forwardRef((function(e,t){const r=a(e),d=(0,u.Z)(r),{component:k="div",direction:c="column",spacing:h=0,divider:y,children:f,className:b,useFlexGap:T=!1}=d,w=(0,n.Z)(d,g),C={direction:c,spacing:h,useFlexGap:T},x=(0,p.Z)({root:["root"]},(e=>(0,m.Z)(o,e)),{});return(0,N.jsx)(s,(0,i.Z)({as:k,ownerState:C,ref:t,className:(0,l.Z)(x.root,b)},w,{children:y?v(f,y):f}))}));return d}({createStyledComponent:(0,w.ZP)("div",{name:"MuiStack",slot:"Root",overridesResolver:(e,t)=>t.root}),useThemeProps:e=>(0,C.Z)({props:e,name:"MuiStack"})}),I=x},20036:(e,t,a)=>{a.d(t,{k:()=>y});var n=a(52263),i=a(94054),r=a(33841),l=a(23599),o=a(90629),p=a(43246),m=a(31536),s=a(61903),d=a(50657),u=a(37645),k=a(6514),c=a(31425),h=a(58951),N=a(83321),g=a(67294);const y=(0,g.memo)((()=>{const[e,t]=(0,g.useState)((()=>({name:"Learning GraphQL",edition:1,price:45,storeId:1,authorIds:[1,2]}))),a=(0,g.useCallback)((e=>{t((t=>({...t,name:e.target.value})))}),[]),y=(0,g.useCallback)((e=>{t((t=>({...t,edition:e.target.valueAsNumber})))}),[]),f=(0,g.useCallback)((e=>{t((t=>({...t,price:e.target.valueAsNumber})))}),[]),b=(0,g.useCallback)((e=>{let a;const n=e.target.value;a="string"==typeof n?parseInt(n):n,-1===a&&(a=void 0),t((e=>({...e,storeId:a})))}),[]),v=(0,g.useCallback)((e=>{let a=[];console.log(e.target.value);const n=e.target.value;a="string"==typeof n?n.split(",").map((e=>parseInt(e))):n,t((e=>({...e,authorIds:a})))}),[]),{i18n:T}=(0,n.Z)(),w=(0,g.useMemo)((()=>"zh"==T.currentLocale||"zh_cn"==T.currentLocale||"zh_CN"==T.currentLocale),[T.currentLocale]),[C,x]=(0,g.useState)(!1),I=(0,g.useCallback)((()=>{x(!0)}),[]),B=(0,g.useCallback)((()=>{x(!1)}),[]);return g.createElement(o.Z,{elevation:3,style:{padding:"1.5rem",width:500}},g.createElement(m.Z,{spacing:2},g.createElement("h1",null,"Book Form"),g.createElement(s.Z,{label:"Name",value:e.name,onChange:a,error:""===e.name,helperText:""===e.name?"Name is required":""}),g.createElement(s.Z,{label:"Edition",type:"number",value:e.edition,onChange:y}),g.createElement(s.Z,{label:"Price",type:"number",value:e.price,onChange:f}),g.createElement(i.Z,{fullWidth:!0},g.createElement(r.Z,{id:"store-select-label"},"Store"),g.createElement(p.Z,{labelId:"store-select-label",label:"Authors",value:e.storeId,onChange:b},g.createElement(l.Z,{value:-1},"--NONE--"),g.createElement(l.Z,{value:1},"O'REILLY"),g.createElement(l.Z,{value:2},"MANNING"))),g.createElement(i.Z,{fullWidth:!0},g.createElement(r.Z,{id:"author-multi-select-label"},"Authors"),g.createElement(p.Z,{multiple:!0,labelId:"author-multi-select-label",label:"Authors",value:e.authorIds,onChange:v},g.createElement(l.Z,{value:1},"Eve Procello"),g.createElement(l.Z,{value:2},"Alex Banks"),g.createElement(l.Z,{value:3},"Dan Vanderkam"),g.createElement(l.Z,{value:4},"Boris Cherny"),g.createElement(l.Z,{value:5},"Samer Buna"))),g.createElement(i.Z,null,g.createElement(N.Z,{onClick:I,variant:"contained"},w?"\u63d0\u4ea4":"Submit"))),g.createElement(d.Z,{open:C,onClose:B},g.createElement(u.Z,null,w?"\u4fe1\u606f":"Info"),g.createElement(k.Z,null,g.createElement(h.Z,null,w?"\u4ec5\u4f5c\u793a\u8303\uff0c\u65e0\u4efb\u4f55\u6548\u679c":"For demonstration only, without any effect")),g.createElement(c.Z,null,g.createElement(N.Z,{onClick:B},"\u5173\u95ed"))))}))},32102:(e,t,a)=>{a.d(t,{s:()=>h});var n=a(83117),i=a(67294),r=a(42293),l=a(50657),o=a(6514),p=a(54776),m=a(10155),s=a(15861),d=a(93946),u=a(9137),k=a(61274),c=a(50594);const h=(0,i.memo)((e=>{let{open:t,fullScreen:a=!1,title:n,maxWidth:p="md",onClose:h,children:g}=e;const[y,f]=(0,i.useState)(a),b=(0,i.useCallback)((()=>{f((e=>!e))}),[]);return i.createElement(l.Z,{open:t,onClose:h,fullScreen:y,TransitionComponent:N,maxWidth:p},i.createElement(r.Z,{sx:{position:"relative"}},i.createElement(m.Z,null,i.createElement(s.Z,{sx:{ml:2,flex:1},variant:"h6",component:"div"},n),i.createElement(d.Z,{onClick:b,style:{color:"white"}},y?i.createElement(k.Z,null):i.createElement(u.Z,null)),i.createElement(d.Z,{"aria-label":"close",onClick:h,style:{color:"white"}},i.createElement(c.Z,null)))),i.createElement(o.Z,null,g))})),N=i.forwardRef((function(e,t){return i.createElement(p.Z,(0,n.Z)({direction:"up",ref:t},e))}))},39511:(e,t,a)=>{a.d(t,{b:()=>l});var n=a(67294),i=a(83321),r=a(32102);const l=(0,n.memo)((e=>{let{buttonText:t,fullScreen:a=!1,title:l=t,variant:o="outlined",maxWidth:p,children:m}=e;const[s,d]=(0,n.useState)(!1),u=(0,n.useCallback)((e=>{d(!0),e.stopPropagation?e.stopPropagation():e.cancelBubble=!0}),[]),k=(0,n.useCallback)((()=>{d(!1)}),[]);return n.createElement(n.Fragment,null,n.createElement(i.Z,{"data-is-view-more-button":"true",onClick:u,variant:o,size:"small"},t),n.createElement(r.s,{open:s,onClose:k,title:l,maxWidth:p,fullScreen:a},m))}))},34800:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>c,contentTitle:()=>u,default:()=>g,frontMatter:()=>d,metadata:()=>k,toc:()=>h});var n=a(83117),i=(a(67294),a(3905)),r=a(65488),l=a(85162),o=a(20036);const p={toc:[]};function m(e){let{components:t,...a}=e;return(0,i.kt)("wrapper",(0,n.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("admonition",{type:"caution"},(0,i.kt)("p",{parentName:"admonition"},"The content of this article is only for Output DTOs, Input DTOs can freely adopt the flat scheme.")),(0,i.kt)("p",null,"For output, the ",(0,i.kt)("inlineCode",{parentName:"p"},"flat")," mode is a controversial topic. The author disagrees with it, because"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"The association model is not complex, it is not worth the system providing the necessary conversion logic")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"This will cause the backend system and specific UI frontend to be tightly coupled, losing the universality it should have ",(0,i.kt)("em",{parentName:"p"},"(this is very important, will be discussed in detail later)")))),(0,i.kt)("p",null,"The deeper reason: Data structures with native associations are normalized data, while flattened objects processed by ",(0,i.kt)("inlineCode",{parentName:"p"},"flat")," are non-associated data."),(0,i.kt)("p",null,"However, you may be in a work situation like this: the frontend team you work with requires all query APIs to return flattened objects across the board, requires any attribute other than collection properties to be processed by ",(0,i.kt)("inlineCode",{parentName:"p"},"flat"),", and is very insistent."),(0,i.kt)("p",null,"Now let's explain why some frontend teams have this insistence. UI projects can be considered in two categories:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Projects that do not require state management"),(0,i.kt)("p",{parentName:"li"},"The biggest feature of such projects is that the functional areas on the interface ",(0,i.kt)("em",{parentName:"p"},"(excluding non-functional areas such as top bars and sidebars)")," adopt an overall switching mode ",(0,i.kt)("em",{parentName:"p"},"(which is more likely to happen on small-screen mobile devices)"),", so each UI interface is a data island."),(0,i.kt)("p",{parentName:"li"},"At this point, the main complexity of the project lies in UI rendering. Frontend developers do not need to care about data models at all."),(0,i.kt)("p",{parentName:"li"},"Since they don't care, the most natural idea is to expect the data structure to be exactly the same as the interface structure. For non-collection associations, the UI is usually displayed flatly, so there is a demand that all APIs return flattened objects.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Projects that require state management"),(0,i.kt)("p",{parentName:"li"},"The biggest feature of such projects is that there are decentralized, coexisting, and complex collaborative problems in the functional areas of the interface, so there are intricate connections between different UI components."),(0,i.kt)("p",{parentName:"li"},"At this point, the main complexity of the project lies in state management, and frontend developers must pay close attention to the structure of the data model."),(0,i.kt)("p",{parentName:"li"},"Frontend state management, to some extent, is the normalization or even relationalization of data. Large amounts of ",(0,i.kt)("inlineCode",{parentName:"p"},"flat")," data are destructive to such projects."))),(0,i.kt)("p",null,"If the frontend team has never experienced a UI project that requires state management, they will of course be unable to realize the importance of normalized data. At this time, they will form a habitual dependence on flat structures and refuse to accept other concepts that seem contrary to their own cognition but actually have no cost."),(0,i.kt)("p",null,"I mentioned earlier that excessive use of ",(0,i.kt)("inlineCode",{parentName:"p"},"flat")," mode will cause the backend system and specific UI frontend to be highly coupled. Let me think about a scenario:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"The mobile UI was launched first. This UI application is very simple, each page is a data island, and no state management is required. Therefore, a large number of backend APIs are designed in a ",(0,i.kt)("inlineCode",{parentName:"p"},"flat")," style.")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"As the system becomes more and more complex, a mobile user-facing application is not enough. An internal management system used by staff needs to be added. If the UI logic of this system is relatively complex, and is eventually determined to be a UI project that requires state management, the ",(0,i.kt)("inlineCode",{parentName:"p"},"flat")," style backend APIs will be very difficult to handle. Either the backend develops another set of APIs that return normalized data, or the frontend writes a lot of code to restore the data back to normalized."))),(0,i.kt)("p",null,"It is possible to persuade by discussion, pointing out the importance of normalized data for state management, and pointing out that normalized data is not a problem for many UI libraries, such as ",(0,i.kt)("a",{parentName:"p",href:"https://ant.design/components/table#column"},"Antd Table.Column")," The type of the ",(0,i.kt)("inlineCode",{parentName:"p"},"dataIndex")," attribute is ",(0,i.kt)("inlineCode",{parentName:"p"},"string | string[]"),", where ",(0,i.kt)("inlineCode",{parentName:"p"},"string[]")," is support for hierarchical data that will not cause any development problems."),(0,i.kt)("p",null,"If you don't have a say in this or can't convince the other party, then you can use the ",(0,i.kt)("inlineCode",{parentName:"p"},"flat")," function to handle it."))}m.isMDXComponent=!0;var s=a(39511);const d={sidebar_position:1,title:"DTO Language"},u=void 0,k={unversionedId:"object/view/dto-language",id:"object/view/dto-language",title:"DTO Language",description:"1. Concepts",source:"@site/docs/object/view/dto-language.mdx",sourceDirName:"object/view",slug:"/object/view/dto-language",permalink:"/jimmer-doc/docs/object/view/dto-language",draft:!1,editUrl:"https://github.com/babyfish-ct/jimmer-doc/tree/main/docs/object/view/dto-language.mdx",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,title:"DTO Language"},sidebar:"tutorialSidebar",previous:{title:"DTO conversion",permalink:"/jimmer-doc/docs/object/view/"},next:{title:"MapStruct",permalink:"/jimmer-doc/docs/object/view/mapstruct"}},c={},h=[{value:"1. Concepts",id:"1-concepts",level:2},{value:"1.1. Pain Point",id:"11-pain-point",level:3},{value:"1.2. Solution",id:"12-solution",level:3},{value:"1.3. Application Scenarios",id:"13-application-scenarios",level:3},{value:"2. Create File",id:"2-create-file",level:2},{value:"2.1. Two ways to create files",id:"21-two-ways-to-create-files",level:3},{value:"2.2 Export statement",id:"22-export-statement",level:3},{value:"2.3. Notes",id:"23-notes",level:3},{value:"3. view, input and specification",id:"3-view-input-and-specification",level:2},{value:"3.1 Common functionalities of view and input",id:"31-common-functionalities-of-view-and-input",level:3},{value:"3.2 input-specific functionalities",id:"32-input-specific-functionalities",level:3},{value:"3.3 specification-specific functionalities",id:"33-specification-specific-functionalities",level:3},{value:"4. Simple properties",id:"4-simple-properties",level:2},{value:"5. allScalars",id:"5-allscalars",level:2},{value:"6. Negative Attributes",id:"6-negative-attributes",level:2},{value:"7. Nullability",id:"7-nullability",level:2},{value:"7.1. <code>?</code>",id:"71-",level:3},{value:"7.2. <code>!</code>",id:"72-",level:3},{value:"8. Renaming",id:"8-renaming",level:2},{value:"8.1. Renaming a single property",id:"81-renaming-a-single-property",level:3},{value:"8.2. Renaming multiple properties",id:"82-renaming-multiple-properties",level:3},{value:"9. Enum Mapping",id:"9-enum-mapping",level:2},{value:"10. Association Attributes",id:"10-association-attributes",level:2},{value:"10.1. Ordinary Association",id:"101-ordinary-association",level:3},{value:"10.2 Recursive Association",id:"102-recursive-association",level:3},{value:"10.3. id Function",id:"103-id-function",level:3},{value:"10.4. flat Function",id:"104-flat-function",level:3},{value:"11. Custom Fields",id:"11-custom-fields",level:2},{value:"11.1 Introduction to Custom Fields",id:"111-introduction-to-custom-fields",level:3},{value:"11.2 Built-in Types",id:"112-built-in-types",level:3},{value:"11.3 Generic Parameter Modifiers",id:"113-generic-parameter-modifiers",level:3},{value:"11.4 Import Statements",id:"114-import-statements",level:3},{value:"12. Annotations",id:"12-annotations",level:2},{value:"12.1 Basic Usage",id:"121-basic-usage",level:3},{value:"12.2 Annotation Replacement",id:"122-annotation-replacement",level:3},{value:"12.3 value Parameter",id:"123-value-parameter",level:3},{value:"12.4 Mixing Java and Kotlin Syntax",id:"124-mixing-java-and-kotlin-syntax",level:3}],N={toc:h};function g(e){let{components:t,...a}=e;return(0,i.kt)("wrapper",(0,n.Z)({},N,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"1-concepts"},"1. Concepts"),(0,i.kt)("h3",{id:"11-pain-point"},"1.1. Pain Point"),(0,i.kt)("p",null,"Jimmer provides dynamic entities that can solve a large part of the DTO explosion problem very well. Therefore, generally speaking, it is not necessary to define output DTO types to express query results. "),(0,i.kt)("p",null,"However, not all DTO types can be eliminated. Input DTO objects are hard to remove."),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"For example, in GraphQL, although dynamic ",(0,i.kt)("inlineCode",{parentName:"p"},"GraphQLObject")," data is returned for the client from the output perspective, static ",(0,i.kt)("inlineCode",{parentName:"p"},"GraphQLInput")," data submitted by the client is accepted from the input perspective."),(0,i.kt)("p",{parentName:"blockquote"},"Why does the GraphQL protocol define ",(0,i.kt)("inlineCode",{parentName:"p"},"GraphQLInput")," as a static type? Because API explicitness and system security are very important requirements, please refer to ",(0,i.kt)("a",{parentName:"p",href:"../../mutation/save-command/input-dto/problem"},"Problems with dynamic objects as input parameters"),"."),(0,i.kt)("p",{parentName:"blockquote"},"The problems faced by the GraphQL protocol are also faced by Jimmer, which must provide a complete solution.")),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"The DTO language is designed for that part of the DTO types that cannot be eliminated, with the goal of making them extremely cheap.")),(0,i.kt)("h3",{id:"12-solution"},"1.2. Solution"),(0,i.kt)("p",null,"As a comprehensive solution, Jimmer is not limited to ORM itself, but considers the whole project. To solve this problem, it provides the DTO language."),(0,i.kt)("p",null,"The DTO language is a very powerful feature provided by Jimmer, and is a concept highly similar to ",(0,i.kt)("a",{parentName:"p",href:"../../query/object-fetcher"},"Object Fetcher"),", but at an earlier stage during compilation."),(0,i.kt)("p",null,"The DTO language is used to quickly define the shape of data structures. Based on these shapes, DTOs can be compile-time"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Generate specific static DTO types corresponding to specific data structures")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Generate mutual conversion logic between DTO static objects and Jimmer dynamic objects")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Generate ",(0,i.kt)("a",{parentName:"p",href:"../../query/object-fetcher"},"Object Fetchers")," that match perfectly with the DTO shape definitions"))),(0,i.kt)("p",null,"Using the DTO language to quickly build DTO types is a solution tailored for Jimmer with extremely high development efficiency, much faster than using ",(0,i.kt)("a",{parentName:"p",href:"./mapstruct"},"mapstruct"),", and is the recommended approach."),(0,i.kt)("h3",{id:"13-application-scenarios"},"1.3. Application Scenarios"),(0,i.kt)("p",null,"The application scenarios of the DTO language:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("a",{parentName:"p",href:"../../query/object-fetcher/dto"},"Serve as return results in query APIs ",(0,i.kt)("em",{parentName:"a"},"(optional, not recommended, don't use unnecessarily)"))," ")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("a",{parentName:"p",href:"../../mutation/save-command/input-dto/dto-lang"},"Serve as input parameters in save APIs ",(0,i.kt)("em",{parentName:"a"},"(required)")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("a",{parentName:"p",href:"../../query/super_qbe"},"Serve as input parameters in super QBE queries ",(0,i.kt)("em",{parentName:"a"},"(optional, recommended)"))))),(0,i.kt)("h2",{id:"2-create-file"},"2. Create File"),(0,i.kt)("p",null,"The code of the DTO language is reflected in files with the extension ",(0,i.kt)("inlineCode",{parentName:"p"},"dto"),". Once compilation is complete, these files have no value. So these files cannot be packaged into ",(0,i.kt)("inlineCode",{parentName:"p"},"src/main/resources"),", but should be placed in the ",(0,i.kt)("inlineCode",{parentName:"p"},"src/main/dto")," directory."),(0,i.kt)("p",null,"Therefore, the first thing is to create a ",(0,i.kt)("inlineCode",{parentName:"p"},"dto")," subdirectory under ",(0,i.kt)("inlineCode",{parentName:"p"},"src/main"),".  "),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"Jimmer does not require the ",(0,i.kt)("inlineCode",{parentName:"p"},"src/main/dto")," directory to be in the project where the entity type is located. In fact, you can create this directory in any project that can legally access the entity."),(0,i.kt)("p",{parentName:"admonition"},"Jimmer only requires using ",(0,i.kt)("inlineCode",{parentName:"p"},"jimmer-apt")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"jimmer-ksp")," in projects containing dto files. They are responsible for compiling dto files and generating related code."),(0,i.kt)("blockquote",{parentName:"admonition"},(0,i.kt)("p",{parentName:"blockquote"},"For Java projects, in addition to ",(0,i.kt)("inlineCode",{parentName:"p"},"jimmer-apt"),", it may be necessary to add an extra configuration. Please refer to ",(0,i.kt)("a",{parentName:"p",href:"#22-notes"},"Notes"),"."))),(0,i.kt)("h3",{id:"21-two-ways-to-create-files"},"2.1. Two ways to create files"),(0,i.kt)("p",null,"Multiple dto files can be defined under the ",(0,i.kt)("inlineCode",{parentName:"p"},"src/main/dto")," directory, with each file corresponding to an original entity."),(0,i.kt)("p",null,"Assuming there is a Jimmer entity type whose full type name is ",(0,i.kt)("inlineCode",{parentName:"p"},"com.yourcompany.yourproject.Book"),", and this class is decorated with ",(0,i.kt)("inlineCode",{parentName:"p"},"@org.babyfish.jimmer.sql.Entity")," ",(0,i.kt)("em",{parentName:"p"},"(DTO language only supports Entity types)"),", there are two ways to create dto files."),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Not using ",(0,i.kt)("inlineCode",{parentName:"p"},"export")," statement"),(0,i.kt)("p",{parentName:"li"},"In this case, the dto file directory needs to correspond to the original entity package, and the name needs to correspond to the original entity name:"),(0,i.kt)("ol",{parentName:"li"},(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Under the ",(0,i.kt)("inlineCode",{parentName:"p"},"src/main/dto")," directory, create the directory ",(0,i.kt)("inlineCode",{parentName:"p"},"com/yourcompany/yourproject"),", that is, create a directory consistent with the package name")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"In the directory created in the previous step, create a new file ",(0,i.kt)("inlineCode",{parentName:"p"},"Book.dto"),". This file must have the same name as the class and have the extension ",(0,i.kt)("inlineCode",{parentName:"p"},"dto"))))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Using ",(0,i.kt)("inlineCode",{parentName:"p"},"export")," statement"),(0,i.kt)("p",{parentName:"li"},"The ",(0,i.kt)("inlineCode",{parentName:"p"},"export"),"statement is important, so we will explain it separately in a chapter."))),(0,i.kt)("h3",{id:"22-export-statement"},"2.2 Export statement"),(0,i.kt)("p",null,"In this case, the dto file directory and name are arbitrary, because we will use the ",(0,i.kt)("inlineCode",{parentName:"p"},"export")," statement inside the file to define which original entity the dto file corresponds to."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Since there is no requirement for the dto file directory, it is recommended to create the dto file directly under ",(0,i.kt)("inlineCode",{parentName:"p"},"src/main/dto"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Although there is no requirement for the dto file name either, for the maintainability of the project, it is still recommended that the file name adopts the name of the original entity, which is ",(0,i.kt)("inlineCode",{parentName:"p"},"Book.dto")," in this case")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"The first line of code in the dto file is the ",(0,i.kt)("inlineCode",{parentName:"p"},"export")," statement"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"export com.yourcompany.yourproject.Book\n\n...subsequent code...\n")))),(0,i.kt)("p",null,"After the DTO file is compiled, more Java/Kotlin types will be generated automatically. Their default package name is: ",(0,i.kt)("inlineCode",{parentName:"p"},"entity package name")," + ",(0,i.kt)("inlineCode",{parentName:"p"},".dto"),".  "),(0,i.kt)("p",null,"If you use the ",(0,i.kt)("inlineCode",{parentName:"p"},"export")," statement, you can further define the package where the generated code is located, for example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"export com.yourcompany.yourproject.Book\n    -> package com.yourcompany.yourproject.mydto \n")),(0,i.kt)("p",null,"Users can edit the ",(0,i.kt)("inlineCode",{parentName:"p"},"Book.dto")," file to define any number of DTO types with ",(0,i.kt)("inlineCode",{parentName:"p"},"Book")," as the aggregate root. Here we first define a DTO type:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh",metastring:'title="Book.dto"',title:'"Book.dto"'},"...export statement omitted if any...\n\nBookView {\n    ...omitted...\n}\n")),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("p",{parentName:"admonition"},"The first line of code in the dto file may be the ",(0,i.kt)("inlineCode",{parentName:"p"},"export")," statement. For simplicity, export statements are omitted in subsequent sections.")),(0,i.kt)("p",null,"After compilation, the Java/Kotlin type ",(0,i.kt)("inlineCode",{parentName:"p"},"BookView")," will be generated. Assuming the default value of the package where the generated code is located has not been changed, the generated code is as follows:"),(0,i.kt)(r.Z,{groupId:"language",mdxType:"Tabs"},(0,i.kt)(l.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="BookView.java"',title:'"BookView.java"'},"package com.yourcompany.yourproject.dto;\n\nimport com.yourcompany.yourproject.Book;\nimport org.babyfish.jimmer.View;\n\npublic class BookView implements View<Book> {\n    ...omitted...\n} \n"))),(0,i.kt)(l.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin",metastring:'title="BookView.kt"',title:'"BookView.kt"'},"package com.yourcompany.yourproject.dto\n\nimport com.yourcompany.yourproject.Book\nimport org.babyfish.jimmer.View\n\ndata class BookView(\n    ...omitted...\n) : View<Book> {\n    ...omitted...\n}\n")))),(0,i.kt)("h3",{id:"23-notes"},"2.3. Notes"),(0,i.kt)("admonition",{type:"warning"},(0,i.kt)("ul",{parentName:"admonition"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"For Java projects ",(0,i.kt)("em",{parentName:"p"},"(Kotlin developers please ignore)"),":"),(0,i.kt)("p",{parentName:"li"},"If the current project is not the project that defines the entity, you need to decorate any class in the current project with ",(0,i.kt)("inlineCode",{parentName:"p"},"@org.babyfish.jimmer.sql.EnableDtoGeneration"),"."),(0,i.kt)("p",{parentName:"li"},"Otherwise, the DTO file will not be compiled.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"dto files are compiled by Jimmer's Annotation Processor ",(0,i.kt)("em",{parentName:"p"},"(Java)")," or Ksp ",(0,i.kt)("em",{parentName:"p"},"(Kotlin)"),"."),(0,i.kt)("p",{parentName:"li"},"Therefore, if you are using an IDE like Intellij to develop projects, then"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"In addition to dto files, if other Java/Kotlin files are modified, clicking the run button in the IDE directly can cause recompilation of dto files")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"However, if no other Java/Kotlin files are modified except dto files, simply clicking the run button in the IDE does not cause dto files to be recompiled unless explicitly rebuilding!")))))),(0,i.kt)("h2",{id:"3-view-input-and-specification"},"3. view, input and specification"),(0,i.kt)("p",null,"It was mentioned earlier that the DTO language has three use cases:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("a",{parentName:"p",href:"../../query/object-fetcher/dto"},"Serve as return values in query APIs ",(0,i.kt)("em",{parentName:"a"},"(optional, not recommended, don't use unnecessarily)")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("a",{parentName:"p",href:"../../mutation/save-command/input-dto/dto-lang"},"Serve as input parameters in save APIs ",(0,i.kt)("em",{parentName:"a"},"(required)"))," ")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("a",{parentName:"p",href:"../../query/super_qbe"},"Serve as input parameters in super QBE queries ",(0,i.kt)("em",{parentName:"a"},"(optional, recommended)"))))),(0,i.kt)("p",null,"So, the DTO language can define three types of DTOs:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"view: Neither uses the ",(0,i.kt)("inlineCode",{parentName:"p"},"input")," keyword nor the ",(0,i.kt)("inlineCode",{parentName:"p"},"specification")," keyword, which can be understood as Output DTO.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"input: Declared with the ",(0,i.kt)("inlineCode",{parentName:"p"},"input")," keyword, which can be understood as Input DTO.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"specification: Declared with the ",(0,i.kt)("inlineCode",{parentName:"p"},"specification")," keyword. It is not closely related to DTO itself, but can be used as a query parameter to support ",(0,i.kt)("a",{parentName:"p",href:"../../query/super_qbe"},"super QBE queries"),"."))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh",metastring:'title="Book.dto"',title:'"Book.dto"'},"BookView {\n    ...omitted...\n}\n\nAnotherBookView {\n   ...omitted...\n}\n\ninput BookInput {\n    ...omitted... \n}\n\ninput AnotherBookInput {\n    ...omitted...\n}\n\nspecification BookSpecification {\n    ...omitted...\n} \n\nspecification AnotherBookSpecification {\n    ...omitted...\n}\n")),(0,i.kt)("p",null,"This means:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"BookView")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"AnotherBookView")," are used as query outputs. The generated Java/Kotlin types implement the ",(0,i.kt)("inlineCode",{parentName:"p"},"org.babyfish.jimmer.View<E>")," interface"),(0,i.kt)("admonition",{parentName:"li",type:"note"},(0,i.kt)("p",{parentName:"admonition"},"It is recommended that output DTOs end with ",(0,i.kt)("inlineCode",{parentName:"p"},"View")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"BookInput")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"AnotherBookInput")," are used as save command inputs. The generated Java/Kotlin types implement the ",(0,i.kt)("inlineCode",{parentName:"p"},"org.babyfish.jimmer.Input<E>")," interface"),(0,i.kt)("admonition",{parentName:"li",type:"note"},(0,i.kt)("p",{parentName:"admonition"},"It is recommended that input DTOs end with ",(0,i.kt)("inlineCode",{parentName:"p"},"Input")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"BookSpecification")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"AnotherBookSpecification")," are used as query parameters to support ",(0,i.kt)("a",{parentName:"p",href:"../../query/super_qbe"},"super QBE queries"),". The generated Java/Kotlin types implement the ",(0,i.kt)("inlineCode",{parentName:"p"},"org.babyfish.jimmer.Specification<E>")," interface"),(0,i.kt)("admonition",{parentName:"li",type:"note"},(0,i.kt)("p",{parentName:"admonition"},"It is recommended that query parameter DTOs end with ",(0,i.kt)("inlineCode",{parentName:"p"},"Specification"))))),(0,i.kt)("h3",{id:"31-common-functionalities-of-view-and-input"},"3.1 Common functionalities of view and input"),(0,i.kt)("p",null,"For view and input, their generated Java/Kotlin types can convert between entities, with the following capabilities:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Constructor taking original entity type as parameter: Convert Jimmer dynamic entity object to static DTO object")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"toEntity()"),": Convert static DTO object to Jimmer dynamic entity object"))),(0,i.kt)("p",null,"Take ",(0,i.kt)("inlineCode",{parentName:"p"},"BookView")," as an example:"),(0,i.kt)(r.Z,{groupId:"language",mdxType:"Tabs"},(0,i.kt)(l.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"Book entity = ...omitted...;\n\n// Entity -> DTO\nBookView dto = new BookView(entity);\n\n// DTO -> Entity\nBook anotherEntity = dto.toEntity();\n"))),(0,i.kt)(l.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},"val entity: Book = ...omitted...\n\n// Entity -> DTO\nval dto = BookView(entity)\n\n// DTO -> Entity\nval anotherEntity: Book = dto.toEntity()\n")))),(0,i.kt)("h3",{id:"32-input-specific-functionalities"},"3.2 input-specific functionalities"),(0,i.kt)("p",null,"Compared with Output DTO, Input DTO has the following differences:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"If the entity ID property is configured with auto-increment strategy, the id property in the input DTO is nullable."),(0,i.kt)("p",{parentName:"li"},"Here is the translation into English:"),(0,i.kt)("admonition",{parentName:"li",type:"info"},(0,i.kt)("p",{parentName:"admonition"},"The reason for this design is that saving the object does not necessarily require the id property when the entity's id property has an auto-increment strategy. "),(0,i.kt)("blockquote",{parentName:"admonition"},(0,i.kt)("p",{parentName:"blockquote"},"However, this does not mean Jimmer will simply assume like other ORMs such as JPA that lacking an id property means an insert operation\nwhile having an id property means an update operation. "),(0,i.kt)("p",{parentName:"blockquote"},"Jimmer has smarter strategies in this regard, please refer to ",(0,i.kt)("a",{parentName:"p",href:"../../mutation/save-command/save-mode"},"Save Commands/Save Modes"),". This article will not repeat the details. ")),(0,i.kt)("p",{parentName:"admonition"},"If the developer does not accept this default behavior, there are two ways to write the DTO code: "),(0,i.kt)("ul",{parentName:"admonition"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Make the DTO type have no id property at all "),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"input BookInput { \n    #allScalars(this) \n    #highlight-next-line \n    -id \n}\n"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Make the DTO type's id property non-nullable "),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"input BookInput { \n    #allScalars(this) \n    #highlight-next-line \n    id! \n} \n")))))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"The input DTO can only define savable properties, such as simple properties, ordinary ORM associations, and id-view properties. Unsavable properties such as transient properties, formula properties, computed properties, and remote associations cannot be defined, otherwise it will cause compilation errors."))),(0,i.kt)("h3",{id:"33-specification-specific-functionalities"},"3.3 specification-specific functionalities"),(0,i.kt)("p",null,"The role of ",(0,i.kt)("inlineCode",{parentName:"p"},"specification")," is similar to ",(0,i.kt)("inlineCode",{parentName:"p"},"input"),", used to decorate input types, but ",(0,i.kt)("inlineCode",{parentName:"p"},"specification")," does not provide the ability to convert between entity objects, but is used as a query parameter to support ",(0,i.kt)("a",{parentName:"p",href:"../../query/super_qbe"},"super QBE queries"),". "),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("p",{parentName:"admonition"},(0,i.kt)("a",{parentName:"p",href:"../../query/super_qbe"},"Super QBE Query")," is a very powerful feature of Jimmer that is not explained here. Please refer to the ",(0,i.kt)("a",{parentName:"p",href:"../../query/super_qbe"},"relevant section"),".")),(0,i.kt)("h2",{id:"4-simple-properties"},"4. Simple properties"),(0,i.kt)("p",null,"Attributes can be defined for DTO types to map properties in the original entity type, for example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh",metastring:'title="Book.dto"',title:'"Book.dto"'},"BookView {\n    id\n    name\n    edition\n} \n")),(0,i.kt)("p",null,"This means that the DTO only maps the three properties of the entity: ",(0,i.kt)("inlineCode",{parentName:"p"},"id"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"name")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"edition"),", as follows:"),(0,i.kt)(r.Z,{groupId:"language",mdxType:"Tabs"},(0,i.kt)(l.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="BookView.java"',title:'"BookView.java"'},"public class BookView implements View<Book> {\n\n    private long id;\n    private String name;\n    private String edition;\n\n    public BookView(Book book) {\n        ...omitted...\n    }\n\n    @Override\n    public Book toEntity() {\n        ...omitted...\n    }\n\n   ...other members omitted...\n}\n"))),(0,i.kt)(l.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin",metastring:'title="BookView.kt"',title:'"BookView.kt"'},'data class BookView(\n    val id: Long = 0, \n    val name: String = "",\n    val edition: Int = 0  \n) : View<Book> {\n\n    constructor(book: Book): this(...omitted...)\n\n    override fun toEntity(): Book {\n        ...omitted...\n    }\n\n   ...other members omitted...\n}\n')))),(0,i.kt)("h2",{id:"5-allscalars"},"5. allScalars"),(0,i.kt)("p",null,"The DTO language supports a special macro property, ",(0,i.kt)("inlineCode",{parentName:"p"},"#allScalars"),", which represents mapping all scalar properties in the entity."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh",metastring:'title="Book.dto"',title:'"Book.dto"'},"BookView {\n    #allScalars\n}\n")),(0,i.kt)("p",null,"According to the definition of the ",(0,i.kt)("inlineCode",{parentName:"p"},"Book")," type in the official example:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"The scalar properties of ",(0,i.kt)("inlineCode",{parentName:"p"},"Book")," itself are ",(0,i.kt)("inlineCode",{parentName:"p"},"id"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"name"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"edition"),", and ",(0,i.kt)("inlineCode",{parentName:"p"},"price")," ")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"Book")," inherits ",(0,i.kt)("inlineCode",{parentName:"p"},"TenantAware"),", and the ",(0,i.kt)("inlineCode",{parentName:"p"},"TenantAware")," interface defines the ",(0,i.kt)("inlineCode",{parentName:"p"},"tenant")," property")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"Book")," also inherits ",(0,i.kt)("inlineCode",{parentName:"p"},"CommonEntity")," ",(0,i.kt)("em",{parentName:"p"},"(multiple inheritance)"),", and ",(0,i.kt)("inlineCode",{parentName:"p"},"CommonEntity")," interface defines the ",(0,i.kt)("inlineCode",{parentName:"p"},"createdTime")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"modifiedTime")," properties"))),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"#allScalars")," means automatically mapping all scalar properties of the entity, including inherited ones. "),(0,i.kt)("p",null,"If this is not the behavior you want, then"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"You can use ",(0,i.kt)("inlineCode",{parentName:"p"},"allScalars(Book)")," to indicate mapping only the scalar properties defined by the Book type itself, excluding inherited properties.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"You can also use ",(0,i.kt)("inlineCode",{parentName:"p"},"allScalars(TenantAware)")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"allScalars(CommonEntity)")," to indicate properties of specific super types. "))),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"For the current type ",(0,i.kt)("inlineCode",{parentName:"p"},"Book"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"#allScalars(Book)")," can also be written as ",(0,i.kt)("inlineCode",{parentName:"p"},"#allScalars(this)"),".")),(0,i.kt)("p",null,"In fact, ",(0,i.kt)("inlineCode",{parentName:"p"},"#allScalars")," supports multiple parameters, for example:"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Macro Expression"),(0,i.kt)("th",{parentName:"tr",align:null},"Automatically Mapped Attributes"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"#allScalars"),(0,i.kt)("td",{parentName:"tr",align:null},"createdTime, modifiedTime, tenant, id, name, edition, price")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"#allScalars(this)"),(0,i.kt)("td",{parentName:"tr",align:null},"id, name, edition, price")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"#allScalars(TenantAware)"),(0,i.kt)("td",{parentName:"tr",align:null},"tenant")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"#allScalars(CommonEntity)"),(0,i.kt)("td",{parentName:"tr",align:null},"createdTime, modifiedTime")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"#allScalars(this, TenantAware)"),(0,i.kt)("td",{parentName:"tr",align:null},"tenant, id, name, edition, price")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"#allScalars(this, CommonEntity)"),(0,i.kt)("td",{parentName:"tr",align:null},"createdTime, modifiedTime, id, name, edition, price")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"#allScalars(TenantAware, CommonEntity)"),(0,i.kt)("td",{parentName:"tr",align:null},"createdTime, modifiedTime, tenant")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"#allScalars(this, TenantAware, CommonEntity)"),(0,i.kt)("td",{parentName:"tr",align:null},"createdTime, modifiedTime, tenant, id, name, edition, price")))),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("ul",{parentName:"admonition"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"If the ",(0,i.kt)("inlineCode",{parentName:"p"},"#allScalars")," macro is used, it must be defined as the first property, otherwise it will cause compile errors.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"If parameters are specified for the ",(0,i.kt)("inlineCode",{parentName:"p"},"#allScalars")," macro, each parameter must be the current entity or its base type, otherwise it will cause compile errors.")))),(0,i.kt)("h2",{id:"6-negative-attributes"},"6. Negative Attributes"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"#allScalars")," macro mentioned above will batch map multiple properties. Negative properties can remove some properties."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh",metastring:'title="Book.dto"',title:'"Book.dto"'},"BookView {\n    #allScalars\n    // highlight-next-line  \n    -tenant\n}\n")),(0,i.kt)("p",null,"Similar to above, if we understand according to the inheritance relationship of the ",(0,i.kt)("inlineCode",{parentName:"p"},"Book")," type in the official example, ",(0,i.kt)("inlineCode",{parentName:"p"},"#allScalars")," will add the properties ",(0,i.kt)("inlineCode",{parentName:"p"},"createdTime"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"modifiedTime"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"tenant"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"id"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"name"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"edition")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"price"),". "),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"-tenant")," removes the ",(0,i.kt)("inlineCode",{parentName:"p"},"tenant")," property from it, finally adding the properties ",(0,i.kt)("inlineCode",{parentName:"p"},"createdTime"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"modifiedTime"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"id"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"name"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"edition")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"price"),"."),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("p",{parentName:"admonition"},"What is specified by the negative property is not the property name of the entity, but the name of the corresponding property in the DTO. Here the two are the same and there is no difference. "),(0,i.kt)("p",{parentName:"admonition"},"The ",(0,i.kt)("a",{parentName:"p",href:"#8-renaming"},"Renaming")," section later will reveal the difference between the two.")),(0,i.kt)("p",null,"It is not difficult to find that for this example, there is another equivalent writing:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh",metastring:'title="Book.dto"',title:'"Book.dto"'},"BookView {\n    // Exclude `TenantAware`\n    #allScalars(Book, CommonEntity)\n} \n")),(0,i.kt)("h2",{id:"7-nullability"},"7. Nullability"),(0,i.kt)("p",null,"By default:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"All properties in ",(0,i.kt)("inlineCode",{parentName:"p"},"specification")," are null by default. ")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Otherwise, the nullability of DTO properties is the same as the nullability of original properties in entities."))),(0,i.kt)("p",null,"We can use ",(0,i.kt)("inlineCode",{parentName:"p"},"?")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"!")," to modify DTO properties to change the nullability of DTO properties."),(0,i.kt)("h3",{id:"71-"},"7.1. ",(0,i.kt)("inlineCode",{parentName:"h3"},"?")),(0,i.kt)("p",null,"We can use ",(0,i.kt)("inlineCode",{parentName:"p"},"?")," to modify DTO properties to make them nullable. "),(0,i.kt)("admonition",{type:"warning"},(0,i.kt)("p",{parentName:"admonition"},"If the original property in the entity is already nullable, it will cause compile errors.")),(0,i.kt)("p",null,"For example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh",metastring:'title="Book.dto"',title:'"Book.dto"'},"input UpdateBookInput { \n    #allScalars\n    // highlight-next-line\n    price?\n}\n")),(0,i.kt)("p",null,"You can even apply ",(0,i.kt)("inlineCode",{parentName:"p"},"?")," to ",(0,i.kt)("inlineCode",{parentName:"p"},"allScalars")," to make all automatically mapped non-associative properties nullable:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh",metastring:'title="Book.dto"',title:'"Book.dto"'},"input UpdateBookInput {\n    // highlight-next-line  \n    #allScalars? \n}\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Specification types do not allow ",(0,i.kt)("inlineCode",{parentName:"p"},"?")),(0,i.kt)("admonition",{parentName:"li",type:"warning"},(0,i.kt)("p",{parentName:"admonition"},"Since all properties in ",(0,i.kt)("inlineCode",{parentName:"p"},"speciciation")," are nullable by default, specifying the modifier ",(0,i.kt)("inlineCode",{parentName:"p"},"?")," for properties within ",(0,i.kt)("inlineCode",{parentName:"p"},"specification")," will cause compile errors."))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"When the original property in the entity does not allow null"),(0,i.kt)("p",{parentName:"li"},"For non-nullable original properties in an entity, if the corresponding property in the DTO object is null, the original property in the entity object will not be assigned after converting the DTO object to the entity object. ")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"When the original property in the entity allows null"),(0,i.kt)("p",{parentName:"li"},"For originally nullable properties in entities, if the corresponding property in the DTO object is null, then when converting the DTO object to the entity object:"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"If the ",(0,i.kt)("inlineCode",{parentName:"p"},"input")," type is not modified by the ",(0,i.kt)("inlineCode",{parentName:"p"},"dynamic")," keyword, the original property in the entity object will be assigned to null.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"If the ",(0,i.kt)("inlineCode",{parentName:"p"},"input")," type is modified by the ",(0,i.kt)("inlineCode",{parentName:"p"},"dynamic")," keyword, for example:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-sh",metastring:'title="BookStroe.dto"',title:'"BookStroe.dto"'},"#highlight-next-line\ndynamic input BookInput {\n    #allScalars(this)?\n}\n")),(0,i.kt)("p",{parentName:"li"},"  The original properties in the entity object will not be assigned."))))),(0,i.kt)("h3",{id:"72-"},"7.2. ",(0,i.kt)("inlineCode",{parentName:"h3"},"!")),(0,i.kt)("p",null,"We can use ",(0,i.kt)("inlineCode",{parentName:"p"},"!")," to modify DTO properties to make them non-null."),(0,i.kt)("admonition",{type:"warning"},(0,i.kt)("p",{parentName:"admonition"},"If the original property in the entity is already non-null, it will cause compile errors.")),(0,i.kt)("p",null,"Its use is limited and can only be used in the following three cases:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Modify the id property in ",(0,i.kt)("inlineCode",{parentName:"p"},"input")," type"),(0,i.kt)("p",{parentName:"li"},"If the id property is configured with auto-increment strategy, the corresponding input DTO type will make the id property nullable."),(0,i.kt)("p",{parentName:"li"},"However, this behavior does not always meet user expectations. You can use ",(0,i.kt)("inlineCode",{parentName:"p"},"!")," to modify the id property in the ",(0,i.kt)("inlineCode",{parentName:"p"},"input")," type to make it non-null, for example:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-sh",metastring:'title="Book.dto"',title:'"Book.dto"'},"input BookUpdateInfo {\n    #allScalars \n    #highlight-next-line\n    id!\n}\n")),(0,i.kt)("admonition",{parentName:"li",type:"warning"},(0,i.kt)("p",{parentName:"admonition"},"Using ",(0,i.kt)("inlineCode",{parentName:"p"},"?")," to modify other properties will cause compile errors."))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"If ",(0,i.kt)("inlineCode",{parentName:"p"},"input")," is modified by the ",(0,i.kt)("inlineCode",{parentName:"p"},"unsafe")," keyword, any nullable entity property can be converted to non-null, for example:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-sh",metastring:'title="Book.dto"',title:'"Book.dto"'},"unsafe input BookUpdateInfo {\n    #allScalars\n    #highlight-next-line\n    store! {\n        ...omitted...\n    }\n}\n")),(0,i.kt)("admonition",{parentName:"li",type:"info"},(0,i.kt)("p",{parentName:"admonition"},"For an entity object, if the corresponding value of this property is null, when using the Input DTO constructor to convert it to an Input DTO object, an exception will occur because the corresponding property in DTO does not allow null."),(0,i.kt)("p",{parentName:"admonition"},"This is the meaning of the ",(0,i.kt)("inlineCode",{parentName:"p"},"unsafe")," keyword."))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"For ",(0,i.kt)("inlineCode",{parentName:"p"},"specification"),", since all properties are null by default, any nullable entity property can be converted to non-null, for example:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-sh",metastring:'title="Book.dto"',title:'"Book.dto"'},"specification BookSpecification {\n    #allScalars\n    #highlight-next-line\n    edition!\n}\n")))),(0,i.kt)("h2",{id:"8-renaming"},"8. Renaming"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"as")," keyword can be used to set aliases for properties so that entity property names are different from DTO property names."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"as")," has two usages, it can precisely set an alias for a single property, and it can also vaguely set aliases for multiple properties."),(0,i.kt)("h3",{id:"81-renaming-a-single-property"},"8.1. Renaming a single property"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh",metastring:'title="Book.dto"',title:'"Book.dto"'},"BookView {\n    name as bookName\n}\n")),(0,i.kt)("h3",{id:"82-renaming-multiple-properties"},"8.2. Renaming multiple properties"),(0,i.kt)("p",null,"Assume there is an entity type called ",(0,i.kt)("inlineCode",{parentName:"p"},"Robot"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh",metastring:'title="Robot.dto"',title:'"Robot.dto"'},"OrderView {\n    as (^ -> oldSystem) { \u2776\n        prop1\n        prop2 \n    }\n    as ($ -> ForNewSystem) { \u2777\n        prop3\n        prop4\n    }\n}\n")),(0,i.kt)("p",null,"Where:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"\u2776 Adds the prefix ",(0,i.kt)("inlineCode",{parentName:"p"},"oldSystem")," to ",(0,i.kt)("inlineCode",{parentName:"p"},"prop1")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"prop2"),", where ",(0,i.kt)("inlineCode",{parentName:"p"},"^")," indicates the start position")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"\u2777 Adds the suffix ",(0,i.kt)("inlineCode",{parentName:"p"},"ForNewSystem")," to ",(0,i.kt)("inlineCode",{parentName:"p"},"prop3")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"prop4"),", where ",(0,i.kt)("inlineCode",{parentName:"p"},"$")," indicates the start position"))),(0,i.kt)("p",null,"The generated ",(0,i.kt)("inlineCode",{parentName:"p"},"RobotView")," class is as follows:"),(0,i.kt)(r.Z,{groupId:"language",mdxType:"Tabs"},(0,i.kt)(l.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="BookView.java"',title:'"BookView.java"'},"public class RobotView implements View<Robot> {\n\n    private String oldSystemProp1;\n    private String oldSystemProp2;\n\n    private String prop3ForNewSystem;\n    private String prop4ForNewSystem;\n\n   ...other members omitted...\n}\n"))),(0,i.kt)(l.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin",metastring:'title="BookView.kt"',title:'"BookView.kt"'},'data class RobotView(\n    \n    val oldSystemProp1 = "",\n    val oldSystemProp2 = "",\n\n    val prop3ForNewSystem = "",\n    val prop4ForNewSystem = ""  \n) : View<Robot> {\n\n   ...other members omitted...\n}\n')))),(0,i.kt)("p",null,"You can define most properties in the ",(0,i.kt)("inlineCode",{parentName:"p"},"as() {...}")," block, of course including ",(0,i.kt)("inlineCode",{parentName:"p"},"#allScalars"),", for example: "),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh",metastring:'title="Robot.dto"',title:'"Robot.dto"'},"RobotView {\n    # highlight-next-line\n    as(^ -> robot) {\n        # highlight-next-line \n        #allScalars\n    }\n}\n")),(0,i.kt)("p",null,"Below are all the usages of the ",(0,i.kt)("inlineCode",{parentName:"p"},"as() {...}")," block:"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Code Example"),(0,i.kt)("th",{parentName:"tr",align:null},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"as(^ -> prefix)"),(0,i.kt)("td",{parentName:"tr",align:null},"Add prefix")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"as(^prefix ->)"),(0,i.kt)("td",{parentName:"tr",align:null},"Remove prefix")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"as(^prefix -> newPrefix)"),(0,i.kt)("td",{parentName:"tr",align:null},"Replace prefix")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"as($ -> suffix)"),(0,i.kt)("td",{parentName:"tr",align:null},"Add suffix")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"as($suffix ->)"),(0,i.kt)("td",{parentName:"tr",align:null},"Remove suffix")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"as($suffix -> newSuffix)"),(0,i.kt)("td",{parentName:"tr",align:null},"Replace suffix")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"as(infix -> )"),(0,i.kt)("td",{parentName:"tr",align:null},"Remove any content")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"as(infix -> newInfix)"),(0,i.kt)("td",{parentName:"tr",align:null},"Replace any content")))),(0,i.kt)("admonition",{type:"caution"},(0,i.kt)("p",{parentName:"admonition"},(0,i.kt)("inlineCode",{parentName:"p"},"^")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"$")," cannot appear at the same time, because it means precise renaming of a single property, which duplicates existing functionality. ")),(0,i.kt)("h2",{id:"9-enum-mapping"},"9. Enum Mapping"),(0,i.kt)("p",null,"By default, enum type properties in entities are still enum types after being mapped to DTO properties."),(0,i.kt)("p",null,"You can map enum types to numbers or strings:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Map to numbers"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"AuthorView {\n    #allScalars\n    gender -> {\n        MALE: 100\n        FEMALE: 101\n    }\n}\n")),(0,i.kt)("p",{parentName:"li"},"The following code will be generated:"),(0,i.kt)(r.Z,{groupId:"language",mdxType:"Tabs"},(0,i.kt)(l.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="BookView.java"',title:'"BookView.java"'},"public class AuthorView implements View<AuthorView> {\n\n    private int gender;\n\n    ...other members omitted...\n}\n"))),(0,i.kt)(l.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-kotlin",metastring:'title="BookView.kt"',title:'"BookView.kt"'},"data class RobotView(\n    val gender: Int,\n    ...other members omitted...\n) : View<Robot> {\n\n    ...other members omitted...\n}\n"))))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Map to strings"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-sh"},'AuthorView {\n    #allScalars\n    gender -> {\n        MALE: "Male" \n        FEMALE: "Female"\n    }\n}\n')),(0,i.kt)("p",{parentName:"li"},"The following code will be generated:"),(0,i.kt)(r.Z,{groupId:"language",mdxType:"Tabs"},(0,i.kt)(l.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="BookView.java"',title:'"BookView.java"'},"public class AuthorView implements View<AuthorView> {\n\n    private String gender;\n\n    ...other members omitted...\n}\n"))),(0,i.kt)(l.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-kotlin",metastring:'title="BookView.kt"',title:'"BookView.kt"'},"data class RobotView(\n    val gender: String,\n    ...other members omitted... \n) : View<Robot> {\n\n    ...other members omitted...\n}\n")))))),(0,i.kt)("h2",{id:"10-association-attributes"},"10. Association Attributes"),(0,i.kt)("p",null,"The handling of association properties is a very powerful feature of the DTO language with three usages:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Direct use"),(0,i.kt)("li",{parentName:"ul"},"Recursive association"),(0,i.kt)("li",{parentName:"ul"},"Call id function"),(0,i.kt)("li",{parentName:"ul"},"Call flat function")),(0,i.kt)("h3",{id:"101-ordinary-association"},"10.1. Ordinary Association"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Basic usage"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-sh",metastring:'title="Robot.dto"',title:'"Robot.dto"'},"input CompositeBookInput {\n    \n    #allScalars(Book)\n\n    # highlight-next-line  \n    store {\n        #allScalars(BookStore)\n        -id\n    }\n\n    # highlight-next-line\n    authors {\n        #allScalars(Author)\n        -id\n    }\n}\n")),(0,i.kt)("p",{parentName:"li"},"The generated code is:"),(0,i.kt)(r.Z,{groupId:"language",mdxType:"Tabs"},(0,i.kt)(l.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="CompositeBookInput.java"',title:'"CompositeBookInput.java"'},"public class CompositeBookInput implements Input<Book> {\n\n    @Nullable\n    private Long id;\n\n    private String name;\n\n    private int edition;\n\n    private BigDecimal price;\n\n    // highlight-next-line\n    private TargetOf_store store;\n\n    // highlight-next-line\n    private List<TargetOf_authors> authors;\n\n    // highlight-next-line\n    public static class TargetOf_store implements Input<BookStore> {\n    \n        private String name;\n\n        @Nullable\n        private String website;\n\n        ...other members omitted...\n    }\n\n    // highlight-next-line\n    public static class TargetOf_authors implements Input<Author> {\n        \n        private String firstName;\n\n        private String lastName;\n\n        private Gender gender;\n\n        ...other members omitted...\n    }\n\n    ...other members omitted...\n}\n"))),(0,i.kt)(l.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-kotlin",metastring:'title="CompositeBookInput.kt"',title:'"CompositeBookInput.kt"'},'data class CompositeBookInput(\n    val id: Long? = null,\n    val name: String = "",\n    val edition: Int = 0, \n    val price: BigDecimal,\n\n    // highlight-next-line\n    val store: TargetOf_store? = null,\n    // highlight-next-line\n    val authors: List<TargetOf_authors> = emptyList(),\n) : Input<Book> {\n\n    // highlight-next-line\n    data class TargetOf_store(\n        val name: String = "",\n        val website: String? = null,\n    ) : Input<BookStore> {\n        ...other members omitted...\n    }\n\n    // highlight-next-line\n    data class TargetOf_authors(\n        public val firstName: String = "",\n        public val lastName: String = "",\n        public val gender: Gender,\n    ) : Input<Author> {\n        ...other members omitted...\n    }\n\n    ...other members omitted...\n}\n'))))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Renaming"),(0,i.kt)("p",{parentName:"li"},"If you want to rename association properties, the ",(0,i.kt)("inlineCode",{parentName:"p"},"as")," clause should be before the association definition block, for example:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-sh",metastring:'title="Book.dto"',title:'"Book.dto"'},"input CompositeBookInput {\n    \n    authors as authorList {\n        ...omitted...\n    }\n\n    ...omitted...\n}\n")))),(0,i.kt)("h3",{id:"102-recursive-association"},"10.2 Recursive Association"),(0,i.kt)("p",null,"For recursively associative properties in entities, such as ",(0,i.kt)("inlineCode",{parentName:"p"},"TreeNode.parent")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"TreeNode.childNodes")," in the attached example, the corresponding associative property in the DTO can be marked as recursive using an asterisk ",(0,i.kt)("inlineCode",{parentName:"p"},"*"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh",metastring:'title="TreeNode.dto"',title:'"TreeNode.dto"'},"TreeNodeView {\n    \n    #allScalars\n\n    #highlight-next-line\n    childNodes*\n}\n")),(0,i.kt)("h3",{id:"103-id-function"},"10.3. id Function"),(0,i.kt)("p",null,"Here is the translation into English:"),(0,i.kt)("p",null,"For ",(0,i.kt)(s.b,{buttonText:"short associations",mdxType:"ViewMore"},(0,i.kt)(o.k,{mdxType:"ShortAssociation"})),",\nwhile of course we can choose to define ",(0,i.kt)("a",{parentName:"p",href:"../../mapping/advanced/view/id-view"},"@IdView")," properties on the entities and\nsimply reference them in DTOs, we can't always rely on entity types having declared ",(0,i.kt)("a",{parentName:"p",href:"../../mapping/advanced/view/id-view"},"@IdView")," properties.\nA better approach should not make that assumption. "),(0,i.kt)("p",null,"Therefore, the DTO language supports the ",(0,i.kt)("inlineCode",{parentName:"p"},"id")," function on associated properties to achieve the same purpose:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh",metastring:'title="Book.dto"',title:'"Book.dto"'},"BookView {\n\n    // highlight-next-line\n    id(store)\n\n    // highlight-next-line\n    id(authors) as authorIds\n\n    ...omitted...\n}\n")),(0,i.kt)("p",null,"This code has the exact same function as the previous example, but no longer assumes the entity type always declares ",(0,i.kt)("a",{parentName:"p",href:"../../mapping/advanced/view/id-view"},"@IdView")," properties, which is a better solution."),(0,i.kt)("h3",{id:"104-flat-function"},"10.4. flat Function"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"For view and input, the ",(0,i.kt)("inlineCode",{parentName:"p"},"flat")," function can only be used for referential associations ",(0,i.kt)("em",{parentName:"p"},"(one-to-one or many-to-one)"),", not collection associations ",(0,i.kt)("em",{parentName:"p"},"(one-to-many or many-to-many)"),". It is used to promote the properties of associated DTOs to the current DTO type to obtain a flattened object without associations.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"For sepecification, the ",(0,i.kt)("inlineCode",{parentName:"p"},"flat")," function does not have the above restrictions and can be used for collection associations. Please check (../../query/super_qbe)."))),(0,i.kt)("p",null,"Take the ",(0,i.kt)("inlineCode",{parentName:"p"},"TreeNode")," entity in the official example ",(0,i.kt)("em",{parentName:"p"},"(in fact, this example is wrong, we will discuss this issue later)"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh",metastring:'title="TreeNode.dto"',title:'"TreeNode.dto"'},"FlatTreeNodeView {\n    \n    #allScalars(TreeNode)\n\n    # highlight-next-line\n    flat(parent) {\n        #allScalars(TreeNode)\n    }\n} \n")),(0,i.kt)("p",null,"As mentioned above, this example is wrong, because the aggregate root and the associated object both have the ",(0,i.kt)("inlineCode",{parentName:"p"},"id")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"name")," properties. Unconditionally extracting the properties of the associated object to the aggregate root will inevitably lead to name conflicts, eventually causing DTO language compilation errors."),(0,i.kt)("p",null,"The right approach is to combine it with the user's multi-property fuzzy renaming ",(0,i.kt)("inlineCode",{parentName:"p"},"as(...) {}")," block. Let's look at a new example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh",metastring:'title="TreeNode.dto"',title:'"TreeNode.dto"'},"FlatTreeNodeView {\n    \n    #allScalars(TreeNode) // id, name\n\n    # highlight-next-line\n    flat(parent) {\n        # highlight-next-line\n        as(^ -> parent) {\n            // parentId, parentName\n            #allScalars(TreeNode)\n        }\n    }\n}\n")),(0,i.kt)("p",null,"Thus, we get a flattened DTO type with 4 properties: ",(0,i.kt)("inlineCode",{parentName:"p"},"id"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"name"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"parentId")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"parentName"),". "),(0,i.kt)("p",null,"You can even nest the ",(0,i.kt)("inlineCode",{parentName:"p"},"flat")," function to convert multi-level associations into flattened objects:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh",metastring:'title="TreeNode.dto"',title:'"TreeNode.dto"'},"FlatTreeNodeView {\n    \n    #allScalars(TreeNode)\n\n    # highlight-next-line\n    flat(parent) {\n        as(^ -> parent) {\n            #allScalars(TreeNode)\n        }\n        # highlight-next-line\n        flat(grandParent) {\n            as(^ -> parent) {\n                #allScalars(TreeNode)\n            }\n            \n        }   \n    }\n} \n")),(0,i.kt)("p",null,"Thus, we get a flattened DTO type with 6 properties: ",(0,i.kt)("inlineCode",{parentName:"p"},"id"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"name"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"parentId"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"parentName"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"grandParentId"),", and ",(0,i.kt)("inlineCode",{parentName:"p"},"grandParentName"),"."),(0,i.kt)(r.Z,{groupId:"language",mdxType:"Tabs"},(0,i.kt)(l.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'TreeNode treeNode = Objects.createTreeNode(cola -> {\n    cola.setId(4L);\n    cola.setName("Coca cola");\n    cola.applyParent(drinks -> {\n        drinks.setId(3L);\n        drinks.setName("Drinks");\n        drinks.applyParent(food -> {\n            food.setId(2L);\n            food.setName("Food");\n        })\n    })\n});\n\n// Convert hierarchical Entity to flattened DTO  \nFlatTreeNodeView view = new FlatTreeNodeView(treeNode);  \n\nSystem.out.println(view);\n'))),(0,i.kt)(l.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},'val treeNode = new(TreeNode::class).by {\n    id = 4L\n    name = "Coca cola"\n    parent().apply {\n        id = 3L\n        name = "Drinks"\n        parent().apply {\n            id = 2L\n            name = "Food"\n        }   \n    }\n}\n\n// Convert hierarchical Entity to flattened DTO\nval view = FlatTreeNodeView(treeNode)\n\nprintln(view) \n')))),(0,i.kt)("p",null,"The print result is ",(0,i.kt)("em",{parentName:"p"},"(formatted here for readability)"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'com.yourcompany.yourproject.FlatTreeNodeView(\n    id = 4,\n    name = Coco cola, \n    parentId = 3,\n    parentName = Drinks,\n    grandParentId = 2,\n    grandParentName = "Food"\n)\n')),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"flat")," solution also has drawbacks. For ",(0,i.kt)("strong",{parentName:"p"},"output")," DTOs, the ",(0,i.kt)("inlineCode",{parentName:"p"},"flat")," solution is controversial and is not recommended to be blindly adopted."),(0,i.kt)("p",null,"Please refer to ",(0,i.kt)(s.b,{buttonText:"Controversy over whether output DTOs should use flat mode",mdxType:"ViewMore"},(0,i.kt)(m,{mdxType:"FlatProblem"}))),(0,i.kt)("h2",{id:"11-custom-fields"},"11. Custom Fields"),(0,i.kt)("h3",{id:"111-introduction-to-custom-fields"},"11.1 Introduction to Custom Fields"),(0,i.kt)("p",null,"In the examples we have discussed before, all DTO properties are mapped from entity properties and become mapped properties."),(0,i.kt)("p",null,"In addition to mapped properties, DTO types also support mapping custom properties:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh",metastring:'title="BookInput.dto"',title:'"BookInput.dto"'},"BookInput {\n    \n    #allScalars(Author)? - id\n\n    #highlight-next-line\n    remark: String\n}\n")),(0,i.kt)("p",null,"Here, ",(0,i.kt)("inlineCode",{parentName:"p"},"BookInput")," has a custom field ",(0,i.kt)("inlineCode",{parentName:"p"},"remark"),"."),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("p",{parentName:"admonition"},"The difference between custom properties and mapped properties is that custom properties require type definitions. ")),(0,i.kt)("h3",{id:"112-built-in-types"},"11.2 Built-in Types"),(0,i.kt)("p",null,"Custome fields can be defined as built-in types, which are types built into the DTO language that do not require import via ",(0,i.kt)("inlineCode",{parentName:"p"},"import"),"."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Primitive and boxed types"),(0,i.kt)("table",{parentName:"li"},(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"DTO Language Type"),(0,i.kt)("th",{parentName:"tr",align:null},"Generated Java Type"),(0,i.kt)("th",{parentName:"tr",align:null},"Generated Kotlin Type"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Boolean"),(0,i.kt)("td",{parentName:"tr",align:null},"boolean"),(0,i.kt)("td",{parentName:"tr",align:null},"Boolean")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Boolean?"),(0,i.kt)("td",{parentName:"tr",align:null},"Boolean"),(0,i.kt)("td",{parentName:"tr",align:null},"Boolean?")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Char"),(0,i.kt)("td",{parentName:"tr",align:null},"char"),(0,i.kt)("td",{parentName:"tr",align:null},"Char")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Char?"),(0,i.kt)("td",{parentName:"tr",align:null},"Character"),(0,i.kt)("td",{parentName:"tr",align:null},"Char?")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Byte"),(0,i.kt)("td",{parentName:"tr",align:null},"byte"),(0,i.kt)("td",{parentName:"tr",align:null},"Byte")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Byte?"),(0,i.kt)("td",{parentName:"tr",align:null},"Byte"),(0,i.kt)("td",{parentName:"tr",align:null},"Byte?")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Short"),(0,i.kt)("td",{parentName:"tr",align:null},"short"),(0,i.kt)("td",{parentName:"tr",align:null},"Short")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Short?"),(0,i.kt)("td",{parentName:"tr",align:null},"Short"),(0,i.kt)("td",{parentName:"tr",align:null},"Short?")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Int"),(0,i.kt)("td",{parentName:"tr",align:null},"int"),(0,i.kt)("td",{parentName:"tr",align:null},"Int")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Int?"),(0,i.kt)("td",{parentName:"tr",align:null},"Integer"),(0,i.kt)("td",{parentName:"tr",align:null},"Int?")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Long"),(0,i.kt)("td",{parentName:"tr",align:null},"long"),(0,i.kt)("td",{parentName:"tr",align:null},"Long")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Long?"),(0,i.kt)("td",{parentName:"tr",align:null},"Long"),(0,i.kt)("td",{parentName:"tr",align:null},"Long?")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Float"),(0,i.kt)("td",{parentName:"tr",align:null},"float"),(0,i.kt)("td",{parentName:"tr",align:null},"Float")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Float?"),(0,i.kt)("td",{parentName:"tr",align:null},"Float"),(0,i.kt)("td",{parentName:"tr",align:null},"Float?")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Double"),(0,i.kt)("td",{parentName:"tr",align:null},"double"),(0,i.kt)("td",{parentName:"tr",align:null},"Double")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Double?"),(0,i.kt)("td",{parentName:"tr",align:null},"Double"),(0,i.kt)("td",{parentName:"tr",align:null},"Double?"))))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Any and String types"),(0,i.kt)("table",{parentName:"li"},(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"DTO Language Type"),(0,i.kt)("th",{parentName:"tr",align:null},"Generated Java Type"),(0,i.kt)("th",{parentName:"tr",align:null},"Generated Kotlin Type"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Any"),(0,i.kt)("td",{parentName:"tr",align:null},"Object"),(0,i.kt)("td",{parentName:"tr",align:null},"Any")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"String"),(0,i.kt)("td",{parentName:"tr",align:null},"String"),(0,i.kt)("td",{parentName:"tr",align:null},"String"))))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Array types"),(0,i.kt)("table",{parentName:"li"},(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"DTO Language Type"),(0,i.kt)("th",{parentName:"tr",align:null},"Generated Java Type"),(0,i.kt)("th",{parentName:"tr",align:null},"Generated Kotlin Type"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Array","<","Boolean",">"),(0,i.kt)("td",{parentName:"tr",align:null},"boolean[]"),(0,i.kt)("td",{parentName:"tr",align:null},"BooleanArray")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Array","<","Boolean?",">"),(0,i.kt)("td",{parentName:"tr",align:null},"Boolean[]"),(0,i.kt)("td",{parentName:"tr",align:null},"Array","<","Boolean?",">")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Array","<","Char",">"),(0,i.kt)("td",{parentName:"tr",align:null},"char[]"),(0,i.kt)("td",{parentName:"tr",align:null},"CharArray")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Array","<","Char?",">"),(0,i.kt)("td",{parentName:"tr",align:null},"Character[]"),(0,i.kt)("td",{parentName:"tr",align:null},"Array","<","Char?",">")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Array","<","Byte",">"),(0,i.kt)("td",{parentName:"tr",align:null},"byte[]"),(0,i.kt)("td",{parentName:"tr",align:null},"ByteArray")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Array","<","Byte?",">"),(0,i.kt)("td",{parentName:"tr",align:null},"Byte[]"),(0,i.kt)("td",{parentName:"tr",align:null},"Array","<","Byte?",">")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Array","<","Short",">"),(0,i.kt)("td",{parentName:"tr",align:null},"short[]"),(0,i.kt)("td",{parentName:"tr",align:null},"ShortArray")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Array","<","Short?",">"),(0,i.kt)("td",{parentName:"tr",align:null},"Short[]"),(0,i.kt)("td",{parentName:"tr",align:null},"Array","<","Short?",">")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Array","<","Int",">"),(0,i.kt)("td",{parentName:"tr",align:null},"int[]"),(0,i.kt)("td",{parentName:"tr",align:null},"IntArray")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Array","<","Int?",">"),(0,i.kt)("td",{parentName:"tr",align:null},"Integer[]"),(0,i.kt)("td",{parentName:"tr",align:null},"Array","<","Int?",">")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Array","<","Long",">"),(0,i.kt)("td",{parentName:"tr",align:null},"long[]"),(0,i.kt)("td",{parentName:"tr",align:null},"LongArray")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Array","<","Long?",">"),(0,i.kt)("td",{parentName:"tr",align:null},"Long[]"),(0,i.kt)("td",{parentName:"tr",align:null},"Array","<","Long?",">")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Array","<","Float",">"),(0,i.kt)("td",{parentName:"tr",align:null},"float[]"),(0,i.kt)("td",{parentName:"tr",align:null},"FloatArray")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Array","<","Float?",">"),(0,i.kt)("td",{parentName:"tr",align:null},"Float[]"),(0,i.kt)("td",{parentName:"tr",align:null},"Array","<","Float?",">")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Array","<","Double",">"),(0,i.kt)("td",{parentName:"tr",align:null},"double[]"),(0,i.kt)("td",{parentName:"tr",align:null},"DoubleArray")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Array","<","Double?",">"),(0,i.kt)("td",{parentName:"tr",align:null},"Double[]"),(0,i.kt)("td",{parentName:"tr",align:null},"Array","<","Double?",">")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Array","<","UserType",">"),(0,i.kt)("td",{parentName:"tr",align:null},"UserType[]"),(0,i.kt)("td",{parentName:"tr",align:null},"Array","<","UserType",">")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Array","<","UserType?",">"),(0,i.kt)("td",{parentName:"tr",align:null},"UserType[]"),(0,i.kt)("td",{parentName:"tr",align:null},"Array","<","UserType?",">")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Array","<","*",">"),(0,i.kt)("td",{parentName:"tr",align:null},"Object[]"),(0,i.kt)("td",{parentName:"tr",align:null},"Array","<","*",">"))))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Collection types"),(0,i.kt)("table",{parentName:"li"},(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"DTO Language Type"),(0,i.kt)("th",{parentName:"tr",align:null},"Generated Java Type"),(0,i.kt)("th",{parentName:"tr",align:null},"Generated Kotlin Type"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Iterable","<","E",">"),(0,i.kt)("td",{parentName:"tr",align:null},"Iterable","<","? extends E",">"),(0,i.kt)("td",{parentName:"tr",align:null},"Iterable","<","E",">")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"MutableIterable","<","E",">"),(0,i.kt)("td",{parentName:"tr",align:null},"Iterable","<","E",">"),(0,i.kt)("td",{parentName:"tr",align:null},"MutableIterable","<","E",">")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Collection","<","E",">"),(0,i.kt)("td",{parentName:"tr",align:null},"Collection","<","? extends E",">"),(0,i.kt)("td",{parentName:"tr",align:null},"Collection","<","E",">")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"MutableCollection","<","E",">"),(0,i.kt)("td",{parentName:"tr",align:null},"Collection","<","E",">"),(0,i.kt)("td",{parentName:"tr",align:null},"MutableCollection","<","E",">")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"List","<","E",">"),(0,i.kt)("td",{parentName:"tr",align:null},"List","<","? extends E",">"),(0,i.kt)("td",{parentName:"tr",align:null},"List","<","E",">")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"MutableList","<","E",">"),(0,i.kt)("td",{parentName:"tr",align:null},"List","<","E",">"),(0,i.kt)("td",{parentName:"tr",align:null},"MutableList","<","E",">")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Set","<","E",">"),(0,i.kt)("td",{parentName:"tr",align:null},"Set","<","? extends E",">"),(0,i.kt)("td",{parentName:"tr",align:null},"Set","<","E",">")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"MutableSet","<","E",">"),(0,i.kt)("td",{parentName:"tr",align:null},"Set","<","E",">"),(0,i.kt)("td",{parentName:"tr",align:null},"MutableSet","<","E",">")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Map","<","K, V",">"),(0,i.kt)("td",{parentName:"tr",align:null},"Map","<","? extends K, ? extends V",">"),(0,i.kt)("td",{parentName:"tr",align:null},"Map","<","K, V",">")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"MutableMap","<","K, V",">"),(0,i.kt)("td",{parentName:"tr",align:null},"Map","<","K, V",">"),(0,i.kt)("td",{parentName:"tr",align:null},"Mutable","<","K, V",">")))))),(0,i.kt)("h3",{id:"113-generic-parameter-modifiers"},"11.3 Generic Parameter Modifiers"),(0,i.kt)("p",null,"Except for generic class types ",(0,i.kt)("em",{parentName:"p"},"(arrays and collections)")," in built-in types, other generic class types support using ",(0,i.kt)("inlineCode",{parentName:"p"},"in")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"out")," to modify generic parameters, for example:"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"DTO Language Type"),(0,i.kt)("th",{parentName:"tr",align:null},"Generated Java Type"),(0,i.kt)("th",{parentName:"tr",align:null},"Generated Kotlin Type"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"UserType1","<","UserType2",">"),(0,i.kt)("td",{parentName:"tr",align:null},"UserType1","<","UserType2",">"),(0,i.kt)("td",{parentName:"tr",align:null},"UserType1","<","UserType2",">")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"UserType1","<","out UserType2",">"),(0,i.kt)("td",{parentName:"tr",align:null},"UserType1","<","? extends UserType2",">"),(0,i.kt)("td",{parentName:"tr",align:null},"UserType1","<","out UserType2",">")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"UserType1","<","in UserType2",">"),(0,i.kt)("td",{parentName:"tr",align:null},"UserType1","<","? super UserType2",">"),(0,i.kt)("td",{parentName:"tr",align:null},"UserType1","<","in UserType2",">")))),(0,i.kt)("h3",{id:"114-import-statements"},"11.4 Import Statements"),(0,i.kt)("p",null,"Except for built-in types, other types must be fully qualified or imported at the beginning of the file when referenced, otherwise they will be considered to belong to the same package as the current entity."),(0,i.kt)("p",null,"The DTO language supports various styles of import statements, for example:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Single class import"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"import java.time.LocalDateTime\n"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Single class renamed import"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"import java.time.LocalDateTime as LDT\n"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Multi-class import"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"import java.time.{\n    LocalDateTime,\n    OffsetDataTime,\n    ZonedDataTime\n}\n"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Multi-class renamed import"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"import java.time.{\n    LocalDateTime as LDT,\n    OffsetDataTime as ODT,\n    ZonedDataTime as ZDT \n}\n")))),(0,i.kt)("h2",{id:"12-annotations"},"12. Annotations"),(0,i.kt)("h3",{id:"121-basic-usage"},"12.1 Basic Usage"),(0,i.kt)("p",null,"You can use annotations to decorate DTO types, mapped properties, and custom properties in the DTO language:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh",metastring:'title="BookInput.dto"',title:'"BookInput.dto"'},'import org.babyfish.jimmer.client.Doc \nimport javax.validation.constraints.Size\n\n@Doc("BookInput without associations") \u2776\nBookInput {\n    \n    #allScalars\n\n    @Size(min = 4, max = 20) \u2777\n    name\n\n    @Size(min = 10, max = 50) \u2778\n    remark: String\n}\n')),(0,i.kt)("p",null,"Where:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"\u2776 Decorates type")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"\u2777 Decorates mapped properties  ")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"\u2778 Decorates custom properties"))),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"There is a detail to note:"),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-sh",metastring:'title="BookView"',title:'"BookView"'},"...import statements omitted...\n\nBookView {\n\n    ...other properties omitted...\n\n    # highlight-next-line\n    @A authors @B {\n        ...associated object properties omitted... \n    }\n\n    ...other DTO types omitted...\n}\n")),(0,i.kt)("p",{parentName:"admonition"},"Where:  "),(0,i.kt)("ul",{parentName:"admonition"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"@A")," decorates the ",(0,i.kt)("inlineCode",{parentName:"p"},"authors")," property")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"@B")," decorates the anonymous associated type")))),(0,i.kt)("h3",{id:"122-annotation-replacement"},"12.2 Annotation Replacement"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"As mentioned above, the DTO language supports annotations to directly control the annotations of the generated DTO types.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"If a DTO property is not decorated by any annotation, the annotations of the corresponding property in the original entity will be copied ",(0,i.kt)("em",{parentName:"p"},"(if the DTO property is mapped, not custom)"),".\nAmong them, any ",(0,i.kt)("strong",{parentName:"p"},"non"),"-jimmer annotations under the ",(0,i.kt)("inlineCode",{parentName:"p"},"org.babyfish.jimmer.client")," package will be copied to the generated DTO type, except for those."))),(0,i.kt)("h3",{id:"123-value-parameter"},"12.3 value Parameter"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"value")," parameter in annotations can be abbreviated, for example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'@UserAnnotation(value = "a", value2 = "b", value3 = "c")\n')),(0,i.kt)("p",null,"can be abbreviated as:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'@UserAnnotation("a", value2 = "b", value3 = "c")\n')),(0,i.kt)("p",null,"Unlike Java, no matter how many parameters an annotation has, the ",(0,i.kt)("inlineCode",{parentName:"p"},"value")," parameter can be abbreviated, as long as the abbreviated property is configured first."),(0,i.kt)("h3",{id:"124-mixing-java-and-kotlin-syntax"},"12.4 Mixing Java and Kotlin Syntax"),(0,i.kt)("p",null,"There are some subtle differences between Java and Kotlin annotation syntax. The DTO language mixes the features of both, for example:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},'@UserAnnotation(\n    "key1", \n    items = {\n        @Item("subKey1", description = "Detail information for subKey1 ..."),\n        @Item("subKey2", description = "Detail information for subKey2 ..."),\n        @Item("subKey3", description = "Detail information for subKey3 ...")\n    }\n)\n'))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},'@UserAnnotation(\n    "key1",\n    items = [\n        @Item("subKey1", description = "Detail information for subKey1 ..."),\n        @Item("subKey2", description = "Detail information for subKey2 ..."),\n        @Item("subKey3", description = "Detail information for subKey3 ...")\n    ]\n)\n'))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},'@UserAnnotation(\n    "key1",\n    items = {\n        Item("subKey1", description = "Detail information or subKey1 ..."),\n        Item("subKey2", description = "Detail information for subKey2 ..."),\n        Item("subKey3", description = "Detail information for subKey3 ...")\n    }\n)\n'))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},'@UserAnnotation(\n    "key1",\n    items = [\n        Item("subKey1", description = "Detail information for subKey1 ..."),\n        Item("subKey2", description = "Detail information for subKey2 ..."),\n        Item("subKey3", description = "Detail information for subKey3 ...")\n    ]\n)\n')))),(0,i.kt)("p",null,"The above four styles are equivalent. You can freely choose the style you like."))}g.isMDXComponent=!0}}]);