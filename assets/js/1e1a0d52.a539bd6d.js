"use strict";(self.webpackChunkdocusaurus_code=self.webpackChunkdocusaurus_code||[]).push([[5226],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>d});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,s=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),m=p(n),d=r,k=m["".concat(s,".").concat(d)]||m[d]||c[d]||l;return n?a.createElement(k,o(o({ref:t},u),{},{components:n})):a.createElement(k,o({ref:t},u))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,o=new Array(l);o[0]=m;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:r,o[1]=i;for(var p=2;p<l;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},85162:(e,t,n)=>{n.d(t,{Z:()=>o});var a=n(67294),r=n(34334);const l="tabItem_Ymn6";function o(e){let{children:t,hidden:n,className:o}=e;return a.createElement("div",{role:"tabpanel",className:(0,r.Z)(l,o),hidden:n},t)}},65488:(e,t,n)=>{n.d(t,{Z:()=>d});var a=n(83117),r=n(67294),l=n(34334),o=n(72389),i=n(67392),s=n(7094),p=n(12466);const u="tabList__CuJ",c="tabItem_LNqP";function m(e){var t;const{lazy:n,block:o,defaultValue:m,values:d,groupId:k,className:b}=e,g=r.Children.map(e.children,(e=>{if((0,r.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),h=d??g.map((e=>{let{props:{value:t,label:n,attributes:a}}=e;return{value:t,label:n,attributes:a}})),y=(0,i.l)(h,((e,t)=>e.value===t.value));if(y.length>0)throw new Error(`Docusaurus error: Duplicate values "${y.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const f=null===m?m:m??(null==(t=g.find((e=>e.props.default)))?void 0:t.props.value)??g[0].props.value;if(null!==f&&!h.some((e=>e.value===f)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${f}" but none of its children has the corresponding value. Available values are: ${h.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:N,setTabGroupChoices:v}=(0,s.U)(),[T,B]=(0,r.useState)(f),S=[],{blockElementScrollPositionUntilNextRender:C}=(0,p.o5)();if(null!=k){const e=N[k];null!=e&&e!==T&&h.some((t=>t.value===e))&&B(e)}const x=e=>{const t=e.currentTarget,n=S.indexOf(t),a=h[n].value;a!==T&&(C(t),B(a),null!=k&&v(k,String(a)))},j=e=>{var t;let n=null;switch(e.key){case"ArrowRight":{const t=S.indexOf(e.currentTarget)+1;n=S[t]??S[0];break}case"ArrowLeft":{const t=S.indexOf(e.currentTarget)-1;n=S[t]??S[S.length-1];break}}null==(t=n)||t.focus()};return r.createElement("div",{className:(0,l.Z)("tabs-container",u)},r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,l.Z)("tabs",{"tabs--block":o},b)},h.map((e=>{let{value:t,label:n,attributes:o}=e;return r.createElement("li",(0,a.Z)({role:"tab",tabIndex:T===t?0:-1,"aria-selected":T===t,key:t,ref:e=>S.push(e),onKeyDown:j,onFocus:x,onClick:x},o,{className:(0,l.Z)("tabs__item",c,null==o?void 0:o.className,{"tabs__item--active":T===t})}),n??t)}))),n?(0,r.cloneElement)(g.filter((e=>e.props.value===T))[0],{className:"margin-top--md"}):r.createElement("div",{className:"margin-top--md"},g.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==T})))))}function d(e){const t=(0,o.Z)();return r.createElement(m,(0,a.Z)({key:String(t)},e))}},99297:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>s,default:()=>d,frontMatter:()=>i,metadata:()=>p,toc:()=>c});var a=n(83117),r=(n(67294),n(3905)),l=n(65488),o=n(85162);const i={sidebar_position:5,title:"Final Usage"},s=void 0,p={unversionedId:"overview/get-started/usage",id:"overview/get-started/usage",title:"Final Usage",description:"Two ways to use Jimmer",source:"@site/docs/overview/get-started/usage.mdx",sourceDirName:"overview/get-started",slug:"/overview/get-started/usage",permalink:"/jimmer-doc/docs/overview/get-started/usage",draft:!1,editUrl:"https://github.com/babyfish-ct/jimmer-doc/tree/main/docs/overview/get-started/usage.mdx",tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5,title:"Final Usage"},sidebar:"tutorialSidebar",previous:{title:"Generate Code",permalink:"/jimmer-doc/docs/overview/get-started/generate-code"},next:{title:"Benchmark Report",permalink:"/jimmer-doc/docs/overview/benchmark"}},u={},c=[{value:"Use Spring Data Repository",id:"use-spring-data-repository",level:2},{value:"Define Repository interface",id:"define-repository-interface",level:3},{value:"Abstract query methods",id:"abstract-query-methods",level:3},{value:"Default query methods",id:"default-query-methods",level:3},{value:"Directly use the underlying SqlClient",id:"directly-use-the-underlying-sqlclient",level:2},{value:"Build SqlClient",id:"build-sqlclient",level:3},{value:"Use SqlClient",id:"use-sqlclient",level:3}],m={toc:c};function d(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Two ways to use Jimmer "),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Use Spring Data Repository")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Directly use the underlying SqlClient"))),(0,r.kt)("h2",{id:"use-spring-data-repository"},"Use Spring Data Repository"),(0,r.kt)("h3",{id:"define-repository-interface"},"Define Repository interface"),(0,r.kt)("p",null,"Jimmer integrates Spring Data and provides a base repository interface for Java and Kotlin respectively."),(0,r.kt)("table",null,(0,r.kt)("tr",null,(0,r.kt)("td",null,"Java"),(0,r.kt)("td",null,"org.babyfish.jimmer.spring.repository.JRepository<E, ID>")),(0,r.kt)("tr",null,(0,r.kt)("td",null,"Kotlin"),(0,r.kt)("td",null,"org.babyfish.jimmer.spring.repository.KRepository<E, ID>"))),(0,r.kt)("p",null,"Both the Java and Kotlin interfaces have two generic parameters"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"E: Entity type"),(0,r.kt)("li",{parentName:"ul"},"ID: Entity ID type")),(0,r.kt)("p",null,"By inheriting this interface, developers can quickly implement various Repository. Take BookRepository as an example"),(0,r.kt)(l.Z,{groupId:"language",mdxType:"Tabs"},(0,r.kt)(o.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="BookRepository.java"',title:'"BookRepository.java"'},"package com.example.repository;\n\nimport com.example.model.Book;\n\nimport org.babyfish.jimmer.spring.repository.JRepository;\n\npublic interface BookRepository extends JRepository<Book, Long> {}\n"))),(0,r.kt)(o.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin",metastring:'title="BookRepository.kt"',title:'"BookRepository.kt"'},"package com.example.repository\n\nimport com.example.model.Book\n\nimport org.babyfish.jimmer.spring.repository.KRepository\n\ninterface BookRepository : KRepository<Book, Long>\n")))),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"Same as other Spring Data, just defining the interface is enough, ",(0,r.kt)("strong",{parentName:"p"},"no need")," to use ",(0,r.kt)("inlineCode",{parentName:"p"},"@org.springframework.stereotype.Repository"),". Jimmer will automatically implement these interfaces and register them in Spring."),(0,r.kt)("p",{parentName:"admonition"},"However, there is one caveat:"),(0,r.kt)("ul",{parentName:"admonition"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"By default, custom repositories must belong to the package of main class or its subpackages.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Otherwise, use ",(0,r.kt)("inlineCode",{parentName:"p"},"@org.babyfish.jimmer.spring.repository.EnableJimmerRepositories")," to decorate the Spring Boot application class or other Spring configuration classes to explicitly specify the package where the custom repository interfaces are located.  ")))),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"BookRepository")," inherits the ",(0,r.kt)("inlineCode",{parentName:"p"},"JRepository/KRepository")," interface. The super interface has some basic methods that can be used, such as ",(0,r.kt)("inlineCode",{parentName:"p"},"findNullable"),"."),(0,r.kt)(l.Z,{groupId:"language",mdxType:"Tabs"},(0,r.kt)(o.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"@SpringBootApplication  \npublic class App {\n    \n    public static void main(String[] args) {\n        ApplicationContext ctx = SpringApplication.run(App.class, args);\n        BookRepository bookRepository = ctx.getBean(BookRepository.class);\n        System.out.println(\n            bookRepository.findNullable(\n                3L,\n                \n                \u2776\n                Fetchers.BOOK_FETCHER\n                    .allScalarFields() \u2777  \n                    .authors( \u2778\n                        Fetchers.AUTHOR_FETCHER\n                            .allScalarFields() \u2779\n            )\n        );\n    }\n}\n"))),(0,r.kt)(o.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},"@SpringBootApplication\nclass App\n\nfun main(args: Array<String>) {\n    val ctx = runApplication(App::class.java, *args)\n    val bookRepository = ctx.getBean(BookRepository::class.java)\n    println(\n        bookRepository.findNullable(\n            3L,\n            \n            \u2776\n            newFetcher(Book::class) {\n                allScalarFields() \u2777\n                authors { \u2778\n                    allScalarFields() \u2779\n                }\n            }\n        )\n    )\n}\n")))),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"\u2776 The second parameter of the query method specifies an ",(0,r.kt)("a",{parentName:"p",href:"../../query/object-fetcher"},"object fetcher"),", which is one of the most important features of Jimmer."),(0,r.kt)("admonition",{parentName:"li",type:"info"},(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("a",{parentName:"p",href:"../../query/object-fetcher"},"Object fetcher")," is not required. Developers can call simpler overloaded versions, such as ",(0,r.kt)("inlineCode",{parentName:"p"},"findNullable(3L)")))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"\u2777 For the aggregate root type ",(0,r.kt)("inlineCode",{parentName:"p"},"Book"),", query all non-associative properties of the object ",(0,r.kt)("em",{parentName:"p"},"(id, name, edition, price)"),"  ")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"\u2778 Fetch the many-to-many association property ",(0,r.kt)("inlineCode",{parentName:"p"},"Book.authors")," of the object")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"\u2779 For the associated object type ",(0,r.kt)("inlineCode",{parentName:"p"},"Author"),", query all non-associative properties of the object ",(0,r.kt)("em",{parentName:"p"},"(id, firstName, lastName, gender)")))),(0,r.kt)("p",null,"The printed result is ",(0,r.kt)("em",{parentName:"p"},"(manually formatted here)"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "id":3,\n    "name":"Learning GraphQL",\n    "edition":3,\n    "price":51.00,\n    "authors":[\n        {\n            "id": 1,\n            "firstName": "Eve",\n            "lastName": "Procello",\n            "gender": "FEMALE"\n        },\n        {\n            "id": 2,\n            "firstName": "Alex",\n            "lastName": "Banks",\n            "gender": "MALE"\n        }\n    ]\n}\n')),(0,r.kt)("h3",{id:"abstract-query-methods"},"Abstract query methods"),(0,r.kt)("p",null,"Abstract methods can be added to the custom repository interface. Jimmer will automatically implement these methods."),(0,r.kt)(l.Z,{groupId:"language",mdxType:"Tabs"},(0,r.kt)(o.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="BookRepository.java"',title:'"BookRepository.java"'},"public interface BookRepository extends JRepository<Book, Long> {\n\n    List<Book> findByName(\n        @Nullable String name,\n        @Nullable Fetcher<Book> fetcher \u2776\n    );\n}\n"))),(0,r.kt)(o.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin",metastring:'title="BookRepository.kt"',title:'"BookRepository.kt"'},"interface BookRepository : KRepository<Book, Long> {\n\n    fun findByName(\n        name: String? = null,\n        fetcher: Fetcher<Book>? = null \u2776\n    ): List<Book>\n}\n")))),(0,r.kt)("p",null,"Unlike Spring Data JPA, developers can declare an ",(0,r.kt)("a",{parentName:"p",href:"../../query/object-fetcher"},"object fetcher")," parameter ",(0,r.kt)("em",{parentName:"p"},"(above \u2776)"),"."),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"If this feature is not needed, this parameter does not need to be declared.")),(0,r.kt)(l.Z,{groupId:"language",mdxType:"Tabs"},(0,r.kt)(o.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'@SpringBootApplication\npublic class App {\n    \n    public static void main(String[] args) {\n        ApplicationContext ctx = SpringApplication.run(App.class, args);\n        BookRepository bookRepository = ctx.getBean(BookRepository.class);\n        System.out.println(\n            bookRepository.findByName(\n                "GraphQL in Action",\n\n                \u2776\n                Fetchers.BOOK_FETCHER\n                    .name() \u2777\n                    .edition() \u2778\n                    .store( \u2779\n                        Fetchers.BOOK_STORE_FETCHER\n                            .name() \u277a\n                )\n            );\n        }\n}\n'))),(0,r.kt)(o.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},'@SpringBootApplication\nclass App\n\nfun main(args: Array<String>) {\n    val ctx = runApplication(App::class.java, *args) \n    val bookRepository = ctx.getBean(BookRepository::class.java)\n    println(\n        bookRepository.findByName(\n            "GraphQL in Action",\n            \n            \u2776\n            newFetcher(Book::class) {\n                name() \u2777\n                edition() \u2778\n                store { \u2779\n                    name() \u277a\n                }\n            }\n        )\n    )\n}\n')))),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"\u2776 Specify ",(0,r.kt)("a",{parentName:"p",href:"../../query/object-fetcher"},"object fetcher"),"  ")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"\u2777 and \u2778 For the aggregate root type ",(0,r.kt)("inlineCode",{parentName:"p"},"Book"),", query the ",(0,r.kt)("inlineCode",{parentName:"p"},"name")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"edition")," properties ",(0,r.kt)("em",{parentName:"p"},"(id is forcibly queried, no need to declare querying ",(0,r.kt)("inlineCode",{parentName:"em"},"id")," here)"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"\u2778 Fetch the many-to-one association property ",(0,r.kt)("inlineCode",{parentName:"p"},"Book.store")," of the object  ")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"\u2779 For the associated object type ",(0,r.kt)("inlineCode",{parentName:"p"},"BookStore"),", query the ",(0,r.kt)("inlineCode",{parentName:"p"},"id")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"name")," properties ",(0,r.kt)("em",{parentName:"p"},"(id is forcibly queried, no need to declare querying ",(0,r.kt)("inlineCode",{parentName:"em"},"id")," here)")))),(0,r.kt)("p",null,"The printed result is ",(0,r.kt)("em",{parentName:"p"},"(manually formatted here)"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'[\n    {\n        "id": 10,\n        "name": "GraphQL in Action",  \n        "edition": 1,\n        "store": {\n            "id": 2,\n            "name": "MANNING"\n        }\n    },\n    {\n        "id": 11, \n        "name": "GraphQL in Action",\n        "edition": 2,\n        "store": {\n            "id": 2,\n            "name": "MANNING"\n        }\n    },\n    {\n        "id": 12,\n        "name": "GraphQL in Action",\n        "edition": 3,\n        "store": {\n            "id": 2, \n            "name": "MANNING"\n        }\n    }\n]\n')),(0,r.kt)("h3",{id:"default-query-methods"},"Default query methods"),(0,r.kt)("p",null,"Default methods can be added to the custom repository interface and implemented by the developer for complex queries."),(0,r.kt)(l.Z,{groupId:"language",mdxType:"Tabs"},(0,r.kt)(o.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="BookRepository.java"',title:'"BookRepository.java"'},"public interface BookRepository extends JRepository<Book, Long> {\n\n    BookTable table = Tables.BOOK_TABLE;\n\n    default List<Book> find(\n        @Nullable String name,\n        @Nullable String storeName,\n        \n        // highlight-next-line\n        @Nullable String authorName,\n        \n        @Nullable Fetcher<Book> fetcher\n    ) {\n        AuthorTableEx author = TableExes.AUTHOR_TABLE_EX; \u2776\n\n        return sql()\n            .createQuery(table)\n            .whereIf(\n                StringUtils.hasText(name),\n                table.name().ilike(name)\n            )\n            .whereIf(\n                StringUtils.hasText(storeName),\n                table.store().name().ilike(storeName)\n            )\n            // highlight-next-line\n            .whereIf(\n                StringUtils.hasText(authorName),\n                table.id().in(\n                    sql()\n                        // highlight-next-line\n                        .createSubQuery(author) \u2777\n                        .where(\n                            Predicate.or(\n                                author.firstName().ilike(authorName),\n                                author.lastName().ilike(authorName)\n                            )\n                        )\n                        .select(\n                            author.books().id()\n                        )\n                )\n            )\n            .orderBy(table.name())\n            .orderBy(table.edition().desc())\n            .select(table.fetch(fetcher))\n            .execute();\n    }\n}\n"))),(0,r.kt)(o.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},"interface BookRepository : KRepository<BookStore, Long> {\n\n    fun find(\n        name: String? = null,\n        storeName: String? = null,\n\n        // highlight-next-line\n        authorName: String? = null,\n\n        fetcher: Fetcher<Book>? = null\n    ): List<Book> =\n        sql\n            .createQuery(Book::class) {\n                name?.takeIf { it.isNotEmpty() }?.let {\n                    where(table.name ilike it) \n                }\n                storeName?.takeIf { it.isNotEmpty() }?.let {\n                    table.store.name ilike it\n                }\n                // highlight-next-line\n                authorName?.takeIf { it.isNotEmpty() }?.let {\n                    where(\n                        // highlight-next-line\n                        table.id valueIn subQuery(Author::class) { \u2776\u2777\n                            where(\n                                or(\n                                    table.firstName ilike it,\n                                    table.lastName ilike it\n                                )\n                            )\n                            select(table.books.id)\n                        }\n                    )\n                }\n                orderBy(table.name)\n                orderBy(table.edition.desc())\n                select(table.fetch(fetcher))\n            }\n            .execute()\n}\n")))),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"\u2776"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Java: The subquery is based on the global variable ",(0,r.kt)("inlineCode",{parentName:"p"},"TableExes.AUTHOR_TABLE_EX")," and is aliased as ",(0,r.kt)("inlineCode",{parentName:"p"},"author")," for convenience.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Kotlin: ",(0,r.kt)("inlineCode",{parentName:"p"},"subQuery")," accepts a lambda expression."),(0,r.kt)("p",{parentName:"li"},"  Inside the subquery's lambda, the ",(0,r.kt)("inlineCode",{parentName:"p"},"table")," variable overrides the outer query's ",(0,r.kt)("inlineCode",{parentName:"p"},"table")," variable. To introduce the parent query table in the subquery (not shown here, usually used for correlated subqueries), use the ",(0,r.kt)("inlineCode",{parentName:"p"},"parentTable")," variable.")))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"\u2777 Create subquery"))),(0,r.kt)("p",null,"Without doubt, if the ",(0,r.kt)("inlineCode",{parentName:"p"},"authorName")," parameter is not specified, the final SQL will not contain the subquery, no need to demonstrate."),(0,r.kt)("p",null,"Let's demonstrate the case where the ",(0,r.kt)("inlineCode",{parentName:"p"},"authorName")," parameter is specified ",(0,r.kt)("em",{parentName:"p"},"(to simplify the discussion, do not specify the ",(0,r.kt)("inlineCode",{parentName:"em"},"fetcher")," parameter)"),"."),(0,r.kt)(l.Z,{groupId:"language",mdxType:"Tabs"},(0,r.kt)(o.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'List<Book> books = bookRepository.find(null, null, "A", null);\n'))),(0,r.kt)(o.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},'val books = bookRepository.find(authorName = "M") \n')))),(0,r.kt)("p",null,"The generated SQL is (formatted for readability):"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"select tb_1_.ID, tb_1_.NAME, tb_1_.EDITION, tb_1_.PRICE, tb_1_.STORE_ID\nfrom BOOK as tb_1_\nwhere\n    tb_1_.ID in (\n        /* highlight-next-line */  \n        select tb_3_.BOOK_ID\n        from AUTHOR as tb_2_\n        inner join BOOK_AUTHOR_MAPPING as tb_3_\n            on tb_2_.ID = tb_3_.AUTHOR_ID\n        where\n            lower(tb_2_.FIRST_NAME) like ? /* %a% */ \n        or\n            lower(tb_2_.LAST_NAME) like ? /* %a% */  \n    )\norder by\n    tb_1_.NAME asc,\n    tb_1_.EDITION desc\n")),(0,r.kt)("h2",{id:"directly-use-the-underlying-sqlclient"},"Directly use the underlying SqlClient"),(0,r.kt)("h3",{id:"build-sqlclient"},"Build SqlClient"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"SqlClient")," is the lowest level API in Jimmer"),(0,r.kt)("table",null,(0,r.kt)("tr",null,(0,r.kt)("td",null,"Java"),(0,r.kt)("td",null,"org.babyfish.jimmer.sql.JSqlClient")),(0,r.kt)("tr",null,(0,r.kt)("td",null,"Kotlin"),(0,r.kt)("td",null,"org.babyfish.jimmer.sql.kt.KSqlClient"))),(0,r.kt)("p",null,"If developers inject ",(0,r.kt)("inlineCode",{parentName:"p"},"SqlClient")," in Spring, Jimmer's Spring Boot starter will automatically create one."),(0,r.kt)("admonition",{type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"For Kotlin projects, must configure ",(0,r.kt)("inlineCode",{parentName:"p"},"jimmer.language")," = ",(0,r.kt)("inlineCode",{parentName:"p"},"kotlin")," in ",(0,r.kt)("inlineCode",{parentName:"p"},"application.properties")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"application.yml"),".",(0,r.kt)("br",{parentName:"p"}),"\n","Because Jimmer decides to automatically create ",(0,r.kt)("inlineCode",{parentName:"p"},"JSqlClient")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"KSqlClient")," based on the ",(0,r.kt)("inlineCode",{parentName:"p"},"jimmer.language")," setting.")),(0,r.kt)("p",null,"Developers can also override the SqlClient created automatically by Jimmer, as follows"),(0,r.kt)(l.Z,{groupId:"language",mdxType:"Tabs"},(0,r.kt)(o.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"// highlight-next-line\n@Bean  \npublic JSqlClient sqlClient() {\n    return JSqlClient\n        .newBuilder()\n        .setDialect(new PostgresDialect())\n        ...Omit other configurations...\n        .build();\n}\n"))),(0,r.kt)(o.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},"// highlight-next-line\n@Bean\nfun sqlClient(): KSqlClient =\n    newKSqlClient {\n        setDialect(new PostgresDialect())\n        ...Omit other configurations...\n    }\n")))),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"If choosing to override the ",(0,r.kt)("inlineCode",{parentName:"p"},"SqlClient")," provided by default by Jimmer, it is recommended to name it ",(0,r.kt)("inlineCode",{parentName:"p"},"sqlClient"),"."),(0,r.kt)("p",{parentName:"admonition"},"Otherwise, need to use ",(0,r.kt)("inlineCode",{parentName:"p"},'@EnableJimmerRepositories(sqlClientRef = "mySqlClient")')," on the Spring Boot Application or some Spring configuration class.")),(0,r.kt)("h3",{id:"use-sqlclient"},"Use SqlClient"),(0,r.kt)(l.Z,{groupId:"language",mdxType:"Tabs"},(0,r.kt)(o.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'@SpringBootApplication\npublic class App {\n    \n    public static void main(String[] args) {\n        ApplicationContext ctx = SpringApplication.run(App.class, args);\n        JSqlClient sqlClient = ctx.getBean(JSqlClient.class);\n        List<Tuple3<Book, Integer, Integer>> tuples = sqlClient\n            .createQuery(table)\n            .select(\n                // First column, data structure of Book as aggregate root \n                // and shape controlled by object fetcher\n                table.fetch(\n                    Fetchers.BOOK_FETCHER\n                        .allScalarFields()\n                        .authors(\n                            Fetchers.AUTHOR_FETCHER\n                                .allScalarFields()\n                        )\n                ),\n                // Second column: analytic function embedded in Native SQL\n                Expression.numeric().sql(\n                    Integer.class,\n                    "rank() over(order by %e desc)", \n                    table.price()\n                ),\n                // Third column: analytic function embedded in Native SQL   \n                Expression.numeric().sql(\n                    Integer.class,\n                    "rank() over(partition by %e order by %e desc)",\n                    new Expression[] { table.storeId(), table.price() }\n                )\n            )\n            .execute();\n        for (Tuple3<Book, Integer, Integer> tuple : tuples) {\n            System.out.printf(\n                "Book object: %o, Global rank: %d, Local rank: %d\\n",\n                tuple.get_1(),\n                tuple.get_2(),\n                tuple.get_3()\n            );\n        }\n    }\n}\n'))),(0,r.kt)(o.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},'@SpringBootApplication \nclass App\n\nfun main(args: Array<String>) {\n    val ctx = runApplication(App::class.java, *args)\n    val sqlClient = ctx.getBean(KSqlClient::class.java) \n    val tuples = sqlClient\n        .createQuery(Author::class) {\n            select(\n                // First column, data structure of Book as aggregate root\n                // and shape controlled by object fetcher   \n                table.fetchBy {\n                    allScalarFields()\n                    authors {\n                        allScalarFields()\n                    }\n                },\n                // Second column: analytic function embedded in Native SQL\n                sql(Int::class, "rank() over(order by %e desc)") {\n                    expression(table.price)\n                },\n                // Third column: analytic function embedded in Native SQL\n                sql("rank() over(partition by %e order by %e desc)") {\n                    expression(table.store.id)\n                    expression(table.price)\n                }\n            )\n        }\n        .execute()\n        \n    for ((book, globalRank, localRank) in tuples) {\n        println("Book object: $book, Global rank: $globalRank, Local rank: $localRank")\n    }\n}\n')))))}d.isMDXComponent=!0}}]);