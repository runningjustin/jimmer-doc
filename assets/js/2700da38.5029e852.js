"use strict";(self.webpackChunkdocusaurus_code=self.webpackChunkdocusaurus_code||[]).push([[6966],{3905:(e,n,t)=>{t.d(n,{Zo:()=>m,kt:()=>h});var r=t(67294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=r.createContext({}),p=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},m=function(e){var n=p(e.components);return r.createElement(s.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},u=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),u=p(t),h=a,d=u["".concat(s,".").concat(h)]||u[h]||c[h]||i;return t?r.createElement(d,o(o({ref:n},m),{},{components:t})):r.createElement(d,o({ref:n},m))}));function h(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,o=new Array(i);o[0]=u;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var p=2;p<i;p++)o[p]=t[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}u.displayName="MDXCreateElement"},85162:(e,n,t)=>{t.d(n,{Z:()=>o});var r=t(67294),a=t(34334);const i="tabItem_Ymn6";function o(e){let{children:n,hidden:t,className:o}=e;return r.createElement("div",{role:"tabpanel",className:(0,a.Z)(i,o),hidden:t},n)}},65488:(e,n,t)=>{t.d(n,{Z:()=>h});var r=t(83117),a=t(67294),i=t(34334),o=t(72389),l=t(67392),s=t(7094),p=t(12466);const m="tabList__CuJ",c="tabItem_LNqP";function u(e){var n;const{lazy:t,block:o,defaultValue:u,values:h,groupId:d,className:g}=e,k=a.Children.map(e.children,(e=>{if((0,a.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),f=h??k.map((e=>{let{props:{value:n,label:t,attributes:r}}=e;return{value:n,label:t,attributes:r}})),b=(0,l.l)(f,((e,n)=>e.value===n.value));if(b.length>0)throw new Error(`Docusaurus error: Duplicate values "${b.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const v=null===u?u:u??(null==(n=k.find((e=>e.props.default)))?void 0:n.props.value)??k[0].props.value;if(null!==v&&!f.some((e=>e.value===v)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${v}" but none of its children has the corresponding value. Available values are: ${f.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:y,setTabGroupChoices:N}=(0,s.U)(),[q,S]=(0,a.useState)(v),w=[],{blockElementScrollPositionUntilNextRender:x}=(0,p.o5)();if(null!=d){const e=y[d];null!=e&&e!==q&&f.some((n=>n.value===e))&&S(e)}const E=e=>{const n=e.currentTarget,t=w.indexOf(n),r=f[t].value;r!==q&&(x(n),S(r),null!=d&&N(d,String(r)))},j=e=>{var n;let t=null;switch(e.key){case"ArrowRight":{const n=w.indexOf(e.currentTarget)+1;t=w[n]??w[0];break}case"ArrowLeft":{const n=w.indexOf(e.currentTarget)-1;t=w[n]??w[w.length-1];break}}null==(n=t)||n.focus()};return a.createElement("div",{className:(0,i.Z)("tabs-container",m)},a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.Z)("tabs",{"tabs--block":o},g)},f.map((e=>{let{value:n,label:t,attributes:o}=e;return a.createElement("li",(0,r.Z)({role:"tab",tabIndex:q===n?0:-1,"aria-selected":q===n,key:n,ref:e=>w.push(e),onKeyDown:j,onFocus:E,onClick:E},o,{className:(0,i.Z)("tabs__item",c,null==o?void 0:o.className,{"tabs__item--active":q===n})}),t??n)}))),t?(0,a.cloneElement)(k.filter((e=>e.props.value===q))[0],{className:"margin-top--md"}):a.createElement("div",{className:"margin-top--md"},k.map(((e,n)=>(0,a.cloneElement)(e,{key:n,hidden:e.props.value!==q})))))}function h(e){const n=(0,o.Z)();return a.createElement(u,(0,r.Z)({key:String(n)},e))}},9619:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>m,contentTitle:()=>s,default:()=>h,frontMatter:()=>l,metadata:()=>p,toc:()=>c});var r=t(83117),a=(t(67294),t(3905)),i=t(65488),o=t(85162);const l={sidebar_position:2,title:"Query"},s=void 0,p={unversionedId:"graphql/query",id:"graphql/query",title:"Query",description:"Feature Description",source:"@site/docs/graphql/query.mdx",sourceDirName:"graphql",slug:"/graphql/query",permalink:"/jimmer-doc/docs/graphql/query",draft:!1,editUrl:"https://github.com/babyfish-ct/jimmer-doc/tree/main/docs/graphql/query.mdx",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2,title:"Query"},sidebar:"tutorialSidebar",previous:{title:"Basic Concepts",permalink:"/jimmer-doc/docs/graphql/concept"},next:{title:"Mutation",permalink:"/jimmer-doc/docs/graphql/mutation"}},m={},c=[{value:"Feature Description",id:"feature-description",level:2},{value:"Implement GraphQL Service",id:"implement-graphql-service",level:2},{value:"1. Simplest Implementation",id:"1-simplest-implementation",level:3},{value:"2. Optimize Performance",id:"2-optimize-performance",level:3},{value:"Running Effect",id:"running-effect",level:2}],u={toc:c};function h(e){let{components:n,...t}=e;return(0,a.kt)("wrapper",(0,r.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"feature-description"},"Feature Description"),(0,a.kt)("p",null,"Without Jimmer's support, implementing GraphQL queries requires two types of work:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"Query aggregate roots"),(0,a.kt)("p",{parentName:"li"},"This is work that needs to be done when developing any data service, whether it's a GraphQL service, REST service, or even a service using other custom protocols."),(0,a.kt)("p",{parentName:"li"},"Developers only need to query and return standalone aggregate root objects without considering their association properties. So this is a relatively simple development task."),(0,a.kt)("p",{parentName:"li"},"For ",(0,a.kt)("a",{parentName:"p",href:"https://spring.io/projects/spring-graphql"},"Spring GraphQL"),", just add the ",(0,a.kt)("inlineCode",{parentName:"p"},"@QueryMapping")," annotation to the query methods in controller classes.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"Query association properties and calculated properties"),(0,a.kt)("p",{parentName:"li"},"This is the bulk of the work required to implement GraphQL queries, requiring consideration of all current object associations and batch loading. There is some workload involved."),(0,a.kt)("p",{parentName:"li"},"In other words, it is precisely because the server undertakes these responsibilities that using GraphQL feels free, convenient and powerful on the client side."),(0,a.kt)("p",{parentName:"li"},"For ",(0,a.kt)("a",{parentName:"p",href:"https://spring.io/projects/spring-graphql"},"Spring GraphQL"),", some schemes are provided for querying association properties, such as"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://docs.spring.io/spring-graphql/docs/current/reference/html/#controllers.schema-mapping"},"@SchemaMapping")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://docs.spring.io/spring-graphql/docs/current/reference/html/#execution.batching"},"Batch Loading")," "),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://docs.spring.io/spring-graphql/docs/current/reference/html/#controllers.batch-mapping"},"@BatchMapping"))))),(0,a.kt)("p",null,"When using Jimmer to implement GraphQL queries, developers only need to focus on querying aggregate roots, just ensuring that these aggregate roots have simple scalar fields. This is because"),(0,a.kt)("admonition",{type:"tip"},(0,a.kt)("p",{parentName:"admonition"},"All association properties and calculated properties of entity objects are automatically mapped to GraphQL fields by Jimmer without any development.")),(0,a.kt)("admonition",{type:"caution"},(0,a.kt)("p",{parentName:"admonition"},"So far, the GraphQL protocol does not support recursive queries for self-associated properties."),(0,a.kt)("p",{parentName:"admonition"},"Therefore, it is not possible to expose functionality like ",(0,a.kt)("a",{parentName:"p",href:"../query/object-fetcher/recursive"},"recursive queries in object fetchers")," through GraphQL. This is a functionality sacrifice that must currently be accepted when using GraphQL. ")),(0,a.kt)("h2",{id:"implement-graphql-service"},"Implement GraphQL Service"),(0,a.kt)("h3",{id:"1-simplest-implementation"},"1. Simplest Implementation"),(0,a.kt)(i.Z,{groupId:"language",mdxType:"Tabs"},(0,a.kt)(o.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="BookStoreService.java"',title:'"BookStoreService.java"'},"package com.example.business;\n\nimport org.springframework.graphql.data.method.annotation.Argument; \n// highlight-next-line\nimport org.springframework.graphql.data.method.annotation.QueryMapping;\nimport org.springframework.stereotype.Controller;\n\n...Omit other imports...\n\n@Controller  \npublic class BookStoreService {\n\n    private final JSqlClient sqlClient;\n\n    public BookStoreService(JSqlClient sqlClient) {\n        this.sqlClient = sqlClient;\n    }\n\n    // highlight-next-line \n    @QueryMapping\n    public List<BookStore> bookStores(\n            @Argument @Nullable String name\n    ) {\n        BookStoreTable table = Tables.BOOK_STORE_TABLE;\n        return sqlClient\n            .createQuery(table)\n            .where(table.name().ilikeIf(name))\n            .select(table) \n            .execute();\n    }\n}\n"))),(0,a.kt)(o.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-kotlin",metastring:'title="BookStoreService.kt"',title:'"BookStoreService.kt"'},"package com.example.business\n\nimport org.springframework.graphql.data.method.annotation.Argument\n// highlight-next-line\nimport org.springframework.graphql.data.method.annotation.QueryMapping\nimport org.springframework.stereotype.Controller  \n\n...Omit other imports...\n\n@Controller\nclass BookStoreService(  \n    private val sqlClient: KSqlClient  \n) {\n\n    // highlight-next-line \n    @QueryMapping\n    fun bookStores(\n        @Argument name: String? \n    ): List<BookStore> =  \n        sqlClient\n            .createQuery(BookStore::class) {\n                where(table.name `ilike?` name)\n                select(table)\n            }\n            .execute() \n}\n")))),(0,a.kt)("p",null,"Unlike previous REST services, this example does ",(0,a.kt)("strong",{parentName:"p"},"not")," use ",(0,a.kt)("a",{parentName:"p",href:"../query/object-fetcher"},"object fetchers"),", returning the simplest orphan objects ",(0,a.kt)("em",{parentName:"p"},"(orphan objects contain neither associated properties nor calculated properties)"),".  "),(0,a.kt)("p",null,"Although we return orphan objects here, if the client's GraphQL request contains associated objects, Jimmer will still automatically load the required associated properties."),(0,a.kt)("p",null,"However, there is a problem with this approach: in non-cache mode, unnecessary properties will also be queried, which has performance issues. We will introduce another approach with optimization capability later."),(0,a.kt)("h3",{id:"2-optimize-performance"},"2. Optimize Performance"),(0,a.kt)("p",null,"To avoid querying unnecessary non-associated properties in non-cache mode, Jimmer can create a ",(0,a.kt)("inlineCode",{parentName:"p"},"Fetcher")," object based on ",(0,a.kt)("inlineCode",{parentName:"p"},"graphql.schema.DataFetchingEnvironment")," and use this Fetcher to query the database with the object as a parameter.  "),(0,a.kt)("admonition",{type:"tip"},(0,a.kt)("p",{parentName:"admonition"},"In non-cache mode, not querying unnecessary non-associated properties is the essential difference between Jimmer GraphQL and other GraphQL implementations in the Java ecosystem.  ")),(0,a.kt)(i.Z,{groupId:"language",mdxType:"Tabs"},(0,a.kt)(o.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="BookStoreService.java"',title:'"BookStoreService.java"'},"package com.example.business;\n\nimport org.springframework.graphql.data.method.annotation.Argument;     \n// highlight-next-line      \nimport graphql.schema.DataFetchingEnvironment;\n// highlight-next-line\nimport org.babyfish.jimmer.spring.graphql.DataFetchingEnvironments;\nimport org.springframework.graphql.data.method.annotation.QueryMapping;\nimport org.springframework.stereotype.Controller;\n\n...Omit other imports...\n\n@Controller  \npublic class BookStoreService {\n\n    private final JSqlClient sqlClient;\n\n    public BookStoreService(JSqlClient sqlClient) {\n        this.sqlClient = sqlClient;\n    }\n\n    @QueryMapping\n    public List<BookStore> bookStores( \n            @Argument @Nullable String name,\n            // highlight-next-line\n            DataFetchingEnvironment env\n    ) {\n        BookStoreTable table = Tables.BOOK_STORE_TABLE;\n        return sqlClient\n            .createQuery(table) \n            .where(table.name().ilikeIf(name))\n            .select(\n                table.fetch(  \n                    // highlight-next-line\n                    DataFetchingEnvironments.createQuery(\n                        BookStore.class,\n                        env  \n                    )\n                )\n            )\n            .execute();\n    }\n}\n"))),(0,a.kt)(o.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-kotlin",metastring:'title="BookStoreService.kt"',title:'"BookStoreService.kt"'},"package com.example.business  \n\nimport org.springframework.graphql.data.method.annotation.Argument  \n// highlight-next-line\nimport graphql.schema.DataFetchingEnvironment  \n// highlight-next-line \nimport org.babyfish.jimmer.spring.graphql.toFetcher\nimport org.springframework.graphql.data.method.annotation.QueryMapping\nimport org.springframework.stereotype.Controller   \n\n...Omit other imports...  \n\n@Controller    \nclass BookStoreService(   \n    private val sqlClient: KSqlClient    \n) {\n\n    @QueryMapping\n    fun bookStores(\n        @Argument name: String?,    \n        // highlight-next-line\n        env: DataFetchingEnvironment \n    ): List<BookStore> =    \n        sqlClient\n            .createQuery(BookStore::class) {\n                where(table.name `ilike?` name) \n                select(\n                    table.fetch(\n                        // highlight-next-line\n                        env.toFetcher()    \n                    )\n                )\n            }\n            .execute()  \n}\n")))),(0,a.kt)("h2",{id:"running-effect"},"Running Effect"),(0,a.kt)("p",null,"In the accompanying example, the GraphQL related projects are:"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Language"),(0,a.kt)("th",{parentName:"tr",align:null},"Example"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"Java"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"https://github.com/babyfish-ct/jimmer-examples/tree/main/java/jimmer-sql-graphql"},"jimmer-examples/java/jimmer-sql-graphql"))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"Kotlin"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"https://github.com/babyfish-ct/jimmer-examples/tree/main/kotlin/jimmer-sql-graphql-kt"},"jimmer-examples/kotlin/jimmer-sql-graphql-kt"))))),(0,a.kt)("p",null,"Select any project, open and start it. Finally, use the browser to visit http://localhost:8080/graphiql"),(0,a.kt)("admonition",{type:"note"},(0,a.kt)("p",{parentName:"admonition"},"Be careful, it's /graph",(0,a.kt)("strong",{parentName:"p"},"i"),"ql, not /graphql")),(0,a.kt)("p",null,"Execute the request:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"query {\n  bookStores {\n    id\n    name\n    avgPrice \u2776\n    books { \u2777\n      id\n      name\n      edition\n      price\n      authors { \u2778\n        id\n        firstName\n        fullName\n        gender\n      }\n    }\n  }\n}\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"\u2776 Query calculated property ",(0,a.kt)("inlineCode",{parentName:"p"},"BookStore.avgPrice"))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"\u2777 Query association property ",(0,a.kt)("inlineCode",{parentName:"p"},"BookStore.books")," ")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"\u2778 Query association property ",(0,a.kt)("inlineCode",{parentName:"p"},"Book.authors")))),(0,a.kt)("p",null,"The return result is:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "data":{\n        "bookStores":[\n            {\n                "id":2,\n                "name":"MANNING",\n                // highlight-next-line\n                "avgPrice":80.333333,\n                // highlight-next-line\n                "books":[\n                    {\n                        "id":10,\n                        "name":"GraphQL in Action",\n                        "edition":1,\n                        "price":80,\n                        // highlight-next-line\n                        "authors":[\n                            {\n                                "id":5,\n                                "firstName":"Samer",\n                                "fullName":"Samer Buna",\n                                "gender":"MALE"\n                            }\n                        ]\n                    },\n                    {\n                        "id":11,\n                        ...omitted...  \n                    },\n                    {\n                        "id":12,\n                        ...omitted...\n                    }\n                ]\n            },\n            {\n                "id":1,\n                "name":"O\'REILLY",\n                // highlight-next-line\n                "avgPrice":58.5,\n                // highlight-next-line\n                "books":[\n                    {\n                        "id":4,\n                        "name":"Effective TypeScript",\n                        "edition":1,\n                        "price":73,\n                        // highlight-next-line\n                        "authors":[\n                            {\n                                "id":3,\n                                "firstName":"Dan",\n                                "fullName":"Dan Vanderkam",\n                                "gender":"MALE"\n                            }\n                        ]\n                    },\n                    {\n                        "id":5,\n                        ...omitted...\n                    },\n                    {\n                        "id":6,\n                        ...omitted...\n                    },\n                    {\n                        "id":1,\n                        "name":"Learning GraphQL",\n                        "edition":1,\n                        "price":50,\n                        "authors":[\n                            {\n                                "id":2,\n                                "firstName":"Alex",\n                                "fullName":"Alex Banks",\n                                "gender":"MALE"\n                            },\n                            {\n                                "id":1,\n                                "firstName":"Eve",\n                                "fullName":"Eve Procello",\n                                "gender":"FEMALE"\n                            }\n                        ]\n                    },\n                    {\n                        "id":2,\n                        "name":"Learning GraphQL",\n                        "edition":2,\n                        "price":55,\n                        "authors":[\n                            {\n                                "id":2,\n                                "firstName":"Alex",\n                                "fullName":"Alex Banks",\n                                "gender":"MALE"\n                            },\n                            {\n                                "id":1,\n                                "firstName":"Eve",\n                                "fullName":"Eve Procello",\n                                "gender":"FEMALE"\n                            }\n                        ]\n                    },\n                    {\n                        "id":3,\n                        "name":"Learning GraphQL",\n                        "edition":3,\n                        "price":51,\n                        "authors":[\n                            {\n                                "id":2,\n                                "firstName":"Alex",\n                                "fullName":"Alex Banks",\n                                "gender":"MALE"\n                            },\n                            {\n                                "id":1,\n                                "firstName":"Eve",\n                                "fullName":"Eve Procello",\n                                "gender":"FEMALE"\n                            }\n                        ]\n                    },\n                    {\n                        "id":7,\n                        "name":"Programming TypeScript",\n                        "edition":1,\n                        "price":47.5,\n                        "authors":[\n                            {\n                                "id":4,\n                                "firstName":"Boris",\n                                "fullName":"Boris Cherny",\n                                "gender":"MALE"\n                            }\n                        ]\n                    },\n                    {\n                        "id":8,\n                        "name":"Programming TypeScript",\n                        "edition":2,\n                        "price":45,\n                        "authors":[\n                            {\n                                "id":4,\n                                "firstName":"Boris",\n                                "fullName":"Boris Cherny",\n                                "gender":"MALE"\n                            }\n                        ]\n                    },\n                    {\n                        "id":9,\n                        "name":"Programming TypeScript",\n                        "edition":3,\n                        "price":48,\n                        "authors":[\n                            {\n                                "id":4,\n                                "firstName":"Boris",\n                                "fullName":"Boris Cherny",\n                                "gender":"MALE"\n                            }\n                        ]\n                    }\n                ]\n            }\n        ]\n    }\n}\n')))}h.isMDXComponent=!0}}]);