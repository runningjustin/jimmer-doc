"use strict";(self.webpackChunkdocusaurus_code=self.webpackChunkdocusaurus_code||[]).push([[3339],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>d});var a=t(67294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=a.createContext({}),u=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},c=function(e){var n=u(e.components);return a.createElement(s.Provider,{value:n},e.children)},m={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},p=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),p=u(t),d=r,h=p["".concat(s,".").concat(d)]||p[d]||m[d]||o;return t?a.createElement(h,i(i({ref:n},c),{},{components:t})):a.createElement(h,i({ref:n},c))}));function d(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,i=new Array(o);i[0]=p;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var u=2;u<o;u++)i[u]=t[u];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}p.displayName="MDXCreateElement"},85162:(e,n,t)=>{t.d(n,{Z:()=>i});var a=t(67294),r=t(34334);const o="tabItem_Ymn6";function i(e){let{children:n,hidden:t,className:i}=e;return a.createElement("div",{role:"tabpanel",className:(0,r.Z)(o,i),hidden:t},n)}},65488:(e,n,t)=>{t.d(n,{Z:()=>d});var a=t(83117),r=t(67294),o=t(34334),i=t(72389),l=t(67392),s=t(7094),u=t(12466);const c="tabList__CuJ",m="tabItem_LNqP";function p(e){var n;const{lazy:t,block:i,defaultValue:p,values:d,groupId:h,className:k}=e,b=r.Children.map(e.children,(e=>{if((0,r.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),g=d??b.map((e=>{let{props:{value:n,label:t,attributes:a}}=e;return{value:n,label:t,attributes:a}})),f=(0,l.l)(g,((e,n)=>e.value===n.value));if(f.length>0)throw new Error(`Docusaurus error: Duplicate values "${f.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const y=null===p?p:p??(null==(n=b.find((e=>e.props.default)))?void 0:n.props.value)??b[0].props.value;if(null!==y&&!g.some((e=>e.value===y)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${y}" but none of its children has the corresponding value. Available values are: ${g.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:v,setTabGroupChoices:N}=(0,s.U)(),[w,T]=(0,r.useState)(y),C=[],{blockElementScrollPositionUntilNextRender:B}=(0,u.o5)();if(null!=h){const e=v[h];null!=e&&e!==w&&g.some((n=>n.value===e))&&T(e)}const x=e=>{const n=e.currentTarget,t=C.indexOf(n),a=g[t].value;a!==w&&(B(n),T(a),null!=h&&N(h,String(a)))},P=e=>{var n;let t=null;switch(e.key){case"ArrowRight":{const n=C.indexOf(e.currentTarget)+1;t=C[n]??C[0];break}case"ArrowLeft":{const n=C.indexOf(e.currentTarget)-1;t=C[n]??C[C.length-1];break}}null==(n=t)||n.focus()};return r.createElement("div",{className:(0,o.Z)("tabs-container",c)},r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.Z)("tabs",{"tabs--block":i},k)},g.map((e=>{let{value:n,label:t,attributes:i}=e;return r.createElement("li",(0,a.Z)({role:"tab",tabIndex:w===n?0:-1,"aria-selected":w===n,key:n,ref:e=>C.push(e),onKeyDown:P,onFocus:x,onClick:x},i,{className:(0,o.Z)("tabs__item",m,null==i?void 0:i.className,{"tabs__item--active":w===n})}),t??n)}))),t?(0,r.cloneElement)(b.filter((e=>e.props.value===w))[0],{className:"margin-top--md"}):r.createElement("div",{className:"margin-top--md"},b.map(((e,n)=>(0,r.cloneElement)(e,{key:n,hidden:e.props.value!==w})))))}function d(e){const n=(0,i.Z)();return r.createElement(p,(0,a.Z)({key:String(n)},e))}},37799:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>d,frontMatter:()=>l,metadata:()=>u,toc:()=>m});var a=t(83117),r=(t(67294),t(3905)),o=t(65488),i=t(85162);const l={sidebar_position:7,title:"7. Comprehensive Query"},s=void 0,u={unversionedId:"showcase/comprehensive-query",id:"showcase/comprehensive-query",title:"7. Comprehensive Query",description:"So far, we've quickly demonstrated the following features",source:"@site/docs/showcase/comprehensive-query.mdx",sourceDirName:"showcase",slug:"/showcase/comprehensive-query",permalink:"/jimmer-doc/docs/showcase/comprehensive-query",draft:!1,editUrl:"https://github.com/babyfish-ct/jimmer-doc/tree/main/docs/showcase/comprehensive-query.mdx",tags:[],version:"current",sidebarPosition:7,frontMatter:{sidebar_position:7,title:"7. Comprehensive Query"},sidebar:"tutorialSidebar",previous:{title:"6. Paging Query",permalink:"/jimmer-doc/docs/showcase/page"},next:{title:"8. Other Queries",permalink:"/jimmer-doc/docs/showcase/other-query"}},c={},m=[{value:"Query Dynamic Entities",id:"query-dynamic-entities",level:2},{value:"Query Static DTO",id:"query-static-dto",level:2}],p={toc:m};function d(e){let{components:n,...t}=e;return(0,r.kt)("wrapper",(0,a.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"So far, we've quickly demonstrated the following features"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Object Fetcher, i.e. querying arbitrarily shaped data structures, are what are shown in ",(0,r.kt)("a",{parentName:"p",href:"./fetch-association"},"Fetch Association")," and ",(0,r.kt)("a",{parentName:"p",href:"./recursive-query"},"Recursive Query"),".")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Conditions, especially ",(0,r.kt)("a",{parentName:"p",href:"./where/dynamic-join"},"Dynamic table join")," and ",(0,r.kt)("a",{parentName:"p",href:"./where/implicit-subquery"},"Implicit subquery"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Sorting, including dynamic sorting")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Paging queries"))),(0,r.kt)("p",null,"Now, let's combine all of the above features into a relatively powerful query"),(0,r.kt)("p",null,"Again, there are two ways to develop"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Query dynamic entities")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Query static DTOs"))),(0,r.kt)("h2",{id:"query-dynamic-entities"},"Query Dynamic Entities"),(0,r.kt)(o.Z,{groupId:"language",mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'public class BookRepository {\n\n    private static final BookTable T = BookTable.$;\n\n    private final JSqlClient sqlClient;\n\n    public BookRepository(JSqlClient sqlClient) {\n        this.sqlClient = sqlClient;\n    }\n\n    public Page<Book> findBooks(\n        int pageIndex,\n        int pageSize,\n        @Nullable String sortCode,\n        @Nullable Fetcher<Book> fetcher,\n        @Nullable String name,\n        @Nullable BigDecimal minPrice,\n        @Nullable BigDecimal maxPrice,\n        @Nullable String storeName,\n        @Nullable String storeWebsite,\n        @Nullable String authorName    \n    ) {\n        return sqlClient\n            .createQuery(T)\n            .where(T.name().ilikeIf(name))\n            .where(T.price().betweenIf(minPrice, maxPrice))\n            .where(T.store().name().ilikeIf(storeName))\n            .where(T.store().website().ilikeIf(storeWebsite))\n            .where(\n                T.authors(author ->\n                    Predicate.or(\n                        author.firstName().ilikeIf(authorName),\n                        author.lastName().ilikeIf(authorName)\n                    )\n                )\n            )\n            .orderBy(\n                Order.makeOrders(\n                    T,\n                    sortCode != null ? \n                        sortCode :\n                        "name asc, edition desc"\n                )\n            )\n            .select(T.fetch(fetcher))\n            .fetchPage(pageIndex, pageSize);\n    }\n}\n'))),(0,r.kt)(i.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},'class BookRepository(\n    private val sqlClient: KSqlClient\n) {\n    fun findBooks(\n        pageIndex: Int,\n        pageSize: Int = 10,\n        sortCode: String = "name asc, edition desc",\n        fetcher: Fetcher<Book>? = null,\n        name: String? = null,\n        minPrice: BigDecimal? = null,\n        maxPrice: BigDecimal? = null,\n        storeName: String? = null,\n        storeWebsite: String? = null,\n        name: String? = null\n    ): Page<Book> =\n        sqlClient\n            .createQuery(Book::class) {\n                where(table.name `ilike?` name)\n                where(table.price.`between?`(minPrice, maxPrice))\n                where(table.store.name `ilike?` storeName)\n                where(table.store.website `ilike?` storeWebsite)\n                where += table.authors {\n                    or(\n                        firstName `ilike?` authorName,\n                        lastName `ilike?` authorName\n                    )\n                }\n                orderBy(table.makeOrders(sortCode))\n                select(table.fetch(fetcher))\n            }\n            .fetchPage(pageIndex, pageSize)\n}\n')))),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"Here, the 'findBooks' method has too many parameters. This doesn't matter to Kotlin, but it may not be a good design for Java."),(0,r.kt)("p",{parentName:"admonition"},"If your project is based on the Java language, you can choose to reduce the number of parameters in the Java language by distilling all or some of the parameters into an object."),(0,r.kt)("p",{parentName:"admonition"},"However, this does not provide substantial benefit to the example presentation here, therefore, we do not do so in order to maintain a high degree of consistency between the Java and Kotlin examples.")),(0,r.kt)("p",null,"The user can use it like this ",(0,r.kt)("em",{parentName:"p"},"(considering that Java doesn't have a good way to simplify the invocation to a method with many parameters, just a demonstration the kotlin invocation)")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},'val bookRepository = ...Omitted...\n\nval page = bookRepository.findBooks(\n    pageIndex = 1,\n    pageSize = 2,\n    name = "GraphQL",\n    maxPrice = BigDecimal(60),\n    authorName = "alex",\n    fetcher = newFetcher(Book::class).by {\n        allScalarFields()\n        store {\n            name()\n        }\n        authors {\n            firstName()\n            lastName()\n        }\n    }\n)\n')),(0,r.kt)("p",null,"The result is"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'Page{\n    rows=[\n        {\n            "id":1,\n            "name":"Learning GraphQL",\n            "edition":1,\n            "price":50.00,\n            "store":{"id":1,"name":"O\'REILLY"},\n            "authors":[\n                {"id":2,"firstName":"Alex","lastName":"Banks"},\n                {"id":1,"firstName":"Eve","lastName":"Procello"}\n            ]\n        }\n    ], \n    totalRowCount=3, \n    totalPageCount=2\n}\n')),(0,r.kt)("h2",{id:"query-static-dto"},"Query Static DTO"),(0,r.kt)(o.Z,{groupId:"language",mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'public class BookRepository {\n\n    private static final BookTable T = BookTable.$;\n\n    private final JSqlClient sqlClient;\n\n    public BookRepository(JSqlClient sqlClient) {\n        this.sqlClient = sqlClient;\n    }\n\n    public <V extends View<Book>> Page<V> findBooks(\n        int pageIndex,\n        int pageSize,\n        @Nullable String sortCode,\n        @Nullable Class<V> viewType,\n        @Nullable String name,\n        @Nullable BigDecimal minPrice,\n        @Nullable BigDecimal maxPrice,\n        @Nullable String storeName,\n        @Nullable String storeWebsite,\n        @Nullable String authorName    \n    ) {\n        return sqlClient\n            .createQuery(T)\n            .where(T.name().ilikeIf(name))\n            .where(T.price().betweenIf(minPrice, maxPrice))\n            .where(T.store().name().ilikeIf(storeName))\n            .where(T.store().website().ilikeIf(storeWebsite))\n            .where(\n                T.authors(author ->\n                    Predicate.or(\n                        author.firstName().ilikeIf(authorName),\n                        author.lastName().ilikeIf(authorName)\n                    )\n                )\n            )\n            .orderBy(\n                Order.makeOrders(\n                    T,\n                    sortCode != null ? \n                        sortCode :\n                        "name asc, edition desc"\n                )\n            )\n            .select(T.fetch(viewType))\n            .fetchPage(pageIndex, pageSize);\n    }\n}\n'))),(0,r.kt)(i.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},'class BookRepository(\n    private val sqlClient: KSqlClient\n) {\n    fun <V: View<Book>> findBooks(\n        pageIndex: Int,\n        pageSize: Int = 10,\n        sortCode: String = "name asc, edition desc",\n        viewType: KClass<T>,\n        name: String? = null,\n        minPrice: BigDecimal? = null,\n        maxPrice: BigDecimal? = null,\n        storeName: String? = null,\n        storeWebsite: String? = null,\n        name: String? = null\n    ): Page<Book> =\n        sqlClient\n            .createQuery(Book::class) {\n                where(table.name `ilike?` name)\n                where(table.price.`between?`(minPrice, maxPrice))\n                where(table.store.name `ilike?` storeName)\n                where(table.store.website `ilike?` storeWebsite)\n                where += table.authors {\n                    or(\n                        firstName `ilike?` authorName,\n                        lastName `ilike?` authorName\n                    )\n                }\n                orderBy(table.makeOrders(sortCode))\n                select(table.fetch(viewType))\n            }\n            .fetchPage(pageIndex, pageSize)\n}\n')))),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"Here, the 'findBooks' method has too many parameters. This doesn't matter to Kotlin, but it may not be a good design for Java."),(0,r.kt)("p",{parentName:"admonition"},"If your project is based on the Java language, you can choose to reduce the number of parameters in the Java language by distilling all or some of the parameters into an object."),(0,r.kt)("p",{parentName:"admonition"},"However, this does not provide substantial benefit to the example presentation here, therefore, we do not do so in order to maintain a high degree of consistency between the Java and Kotlin examples.")),(0,r.kt)("p",null,"To demonstrate the invocation, let's first use the DTO language to automatically generate a DTO type that implements the ",(0,r.kt)("inlineCode",{parentName:"p"},"View<Book>")," interface."),(0,r.kt)("p",null,"Create any file with the ",(0,r.kt)("inlineCode",{parentName:"p"},"dto")," extension under the ",(0,r.kt)("inlineCode",{parentName:"p"},"src/main/dto")," folder, and edit the code as follows:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"export com.yourcompany.yourproject.model.Book\n    -> package com.yourcompany.yourproject.model.dto\n\nBookView {\n    #allScalars\n    store {\n        id\n        name\n    }\n    authors {\n        id\n        firstName\n        lastName\n    }\n}\n")),(0,r.kt)("p",null,"Compile the project, a java/kotlin class named ",(0,r.kt)("inlineCode",{parentName:"p"},"BookView")," will be automatically generated."),(0,r.kt)("p",null,"The user can use it like this ",(0,r.kt)("em",{parentName:"p"},"(considering that Java doesn't have a good way to simplify the invocation to a method with many parameters, just a demonstration the kotlin invocation)")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},'val bookRepository = ...Omitted...\n\nval page = bookRepository.findBooks(\n    name = "GraphQL",\n    maxPrice = BigDecimal(60),\n    authorName = "alex",\n    viewType = BookView::class\n)\n')),(0,r.kt)("p",null,"\u5f97\u5230\u5982\u4e0b\u7ed3\u679c"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},"Page{\n    rows=[\n        BookView(\n            id=1, \n            name=Learning GraphQL, \n            edition=1, \n            price=50.00, \n            store=BookView.TargetOf_store(id=1, name=O'REILLY), \n            authors=[\n                BookView.TargetOf_authors(id=2, firstName=Alex, lastName=Banks), \n                BookView.TargetOf_authors(id=1, firstName=Eve, lastName=Procello)\n            ]\n        )\n    ], \n    totalRowCount=3, \n    totalPageCount=2\n}\n")))}d.isMDXComponent=!0}}]);