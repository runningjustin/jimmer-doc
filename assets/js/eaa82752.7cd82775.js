"use strict";(self.webpackChunkdocusaurus_code=self.webpackChunkdocusaurus_code||[]).push([[6092],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>d});var a=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=a.createContext({}),u=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},c=function(e){var t=u(e.components);return a.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,s=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),m=u(n),d=o,b=m["".concat(s,".").concat(d)]||m[d]||p[d]||r;return n?a.createElement(b,l(l({ref:t},c),{},{components:n})):a.createElement(b,l({ref:t},c))}));function d(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,l=new Array(r);l[0]=m;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:o,l[1]=i;for(var u=2;u<r;u++)l[u]=n[u];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},85162:(e,t,n)=>{n.d(t,{Z:()=>l});var a=n(67294),o=n(34334);const r="tabItem_Ymn6";function l(e){let{children:t,hidden:n,className:l}=e;return a.createElement("div",{role:"tabpanel",className:(0,o.Z)(r,l),hidden:n},t)}},65488:(e,t,n)=>{n.d(t,{Z:()=>d});var a=n(83117),o=n(67294),r=n(34334),l=n(72389),i=n(67392),s=n(7094),u=n(12466);const c="tabList__CuJ",p="tabItem_LNqP";function m(e){var t;const{lazy:n,block:l,defaultValue:m,values:d,groupId:b,className:y}=e,v=o.Children.map(e.children,(e=>{if((0,o.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),f=d??v.map((e=>{let{props:{value:t,label:n,attributes:a}}=e;return{value:t,label:n,attributes:a}})),h=(0,i.l)(f,((e,t)=>e.value===t.value));if(h.length>0)throw new Error(`Docusaurus error: Duplicate values "${h.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const k=null===m?m:m??(null==(t=v.find((e=>e.props.default)))?void 0:t.props.value)??v[0].props.value;if(null!==k&&!f.some((e=>e.value===k)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${k}" but none of its children has the corresponding value. Available values are: ${f.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:g,setTabGroupChoices:N}=(0,s.U)(),[j,w]=(0,o.useState)(k),T=[],{blockElementScrollPositionUntilNextRender:O}=(0,u.o5)();if(null!=b){const e=g[b];null!=e&&e!==j&&f.some((t=>t.value===e))&&w(e)}const x=e=>{const t=e.currentTarget,n=T.indexOf(t),a=f[n].value;a!==j&&(O(t),w(a),null!=b&&N(b,String(a)))},E=e=>{var t;let n=null;switch(e.key){case"ArrowRight":{const t=T.indexOf(e.currentTarget)+1;n=T[t]??T[0];break}case"ArrowLeft":{const t=T.indexOf(e.currentTarget)-1;n=T[t]??T[T.length-1];break}}null==(t=n)||t.focus()};return o.createElement("div",{className:(0,r.Z)("tabs-container",c)},o.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.Z)("tabs",{"tabs--block":l},y)},f.map((e=>{let{value:t,label:n,attributes:l}=e;return o.createElement("li",(0,a.Z)({role:"tab",tabIndex:j===t?0:-1,"aria-selected":j===t,key:t,ref:e=>T.push(e),onKeyDown:E,onFocus:x,onClick:x},l,{className:(0,r.Z)("tabs__item",p,null==l?void 0:l.className,{"tabs__item--active":j===t})}),n??t)}))),n?(0,o.cloneElement)(v.filter((e=>e.props.value===j))[0],{className:"margin-top--md"}):o.createElement("div",{className:"margin-top--md"},v.map(((e,t)=>(0,o.cloneElement)(e,{key:t,hidden:e.props.value!==j})))))}function d(e){const t=(0,l.Z)();return o.createElement(m,(0,a.Z)({key:String(t)},e))}},37572:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>d,frontMatter:()=>i,metadata:()=>u,toc:()=>p});var a=n(83117),o=(n(67294),n(3905)),r=n(65488),l=n(85162);const i={sidebar_position:2,title:"Lonely Form"},s=void 0,u={unversionedId:"mutation/save-command/input-dto/lonely",id:"mutation/save-command/input-dto/lonely",title:"Lonely Form",description:"This is a very crude solution, only for learning or very simple projects.",source:"@site/docs/mutation/save-command/input-dto/lonely.mdx",sourceDirName:"mutation/save-command/input-dto",slug:"/mutation/save-command/input-dto/lonely",permalink:"/jimmer-doc/docs/mutation/save-command/input-dto/lonely",draft:!1,editUrl:"https://github.com/babyfish-ct/jimmer-doc/tree/main/docs/mutation/save-command/input-dto/lonely.mdx",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2,title:"Lonely Form"},sidebar:"tutorialSidebar",previous:{title:"Problem",permalink:"/jimmer-doc/docs/mutation/save-command/input-dto/problem"},next:{title:"Using DTO Language",permalink:"/jimmer-doc/docs/mutation/save-command/input-dto/dto-lang"}},c={},p=[],m={toc:p};function d(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("admonition",{type:"caution"},(0,o.kt)("p",{parentName:"admonition"},"This is a very crude solution, only for learning or very simple projects.")),(0,o.kt)("p",null,"Limitation: Can only save single table data, cannot persist complex data structures."),(0,o.kt)("p",null,"Functionality: Resolves security issue ",(0,o.kt)("em",{parentName:"p"},"(this issue is discussed in ",(0,o.kt)("a",{parentName:"em",href:"./problem"},"previous doc"),")"),". "),(0,o.kt)("p",null,"Advantage: No need to define Input DTOs."),(0,o.kt)("p",null,"Disadvantage: Does not resolve API ambiguity issue ",(0,o.kt)("em",{parentName:"p"},"(this issue is discussed in ",(0,o.kt)("a",{parentName:"em",href:"./problem"},"previous doc"),")"),"."),(0,o.kt)(r.Z,{groupId:"language",mdxType:"Tabs"},(0,o.kt)(l.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},'@PutMapping("/book")\npublic void saveBook(\n    @RequestBody Book book  \n) {\n    // highlight-next-line\n    if (!ImmutableObjects.isLonely(book)) {\n        throw new IllegalArguemntException("The input object is too complex");\n    }\n    bookRepository.save(book);\n}\n'))),(0,o.kt)(l.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},'@PutMapping("/book")\nfun saveBook(\n    // highlight-next-line \n    @RequestBody book: Book\n) {\n    // highlight-next-line\n    if (!isLonely(book)) {\n        throw IllegalArguemntException("The input object is too complex")\n    }\n    bookRepository.save(input)\n} \n')))),(0,o.kt)("p",null,"This example directly uses the Jimmer dynamic object as the parameter, without restricting the complexity of the passed data structure. But we added a validation to throw an exception if the parameter is not a lonely object, to ensure security."),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"isLonely")," is used to determine if a dynamic object is just a lonely object. A lonely object can only have two kinds of properties:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Scalar properties")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Association properties based on foreign keys, but can only be assigned ",(0,o.kt)("inlineCode",{parentName:"p"},"null")," or associated objects with only ",(0,o.kt)("inlineCode",{parentName:"p"},"id")," property."))),(0,o.kt)("p",null,"It is easy to see that the validation in the above code ensures all ",(0,o.kt)("inlineCode",{parentName:"p"},"insert")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"update")," operations can only apply to one table."),(0,o.kt)("p",null,"If the developer thinks:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Restricting functionality to only modifying one table achieves the security limit needed")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"The other API ambiguity issue is acceptable"))),(0,o.kt)("p",null,"Then this is indeed a very crude but usable solution."))}d.isMDXComponent=!0}}]);