"use strict";(self.webpackChunkdocusaurus_code=self.webpackChunkdocusaurus_code||[]).push([[9721],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>d});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=a.createContext({}),s=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=s(e.components);return a.createElement(p.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,p=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),c=s(n),d=r,h=c["".concat(p,".").concat(d)]||c[d]||m[d]||o;return n?a.createElement(h,i(i({ref:t},u),{},{components:n})):a.createElement(h,i({ref:t},u))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=c;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var s=2;s<o;s++)i[s]=n[s];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},85162:(e,t,n)=>{n.d(t,{Z:()=>i});var a=n(67294),r=n(34334);const o="tabItem_Ymn6";function i(e){let{children:t,hidden:n,className:i}=e;return a.createElement("div",{role:"tabpanel",className:(0,r.Z)(o,i),hidden:n},t)}},65488:(e,t,n)=>{n.d(t,{Z:()=>d});var a=n(83117),r=n(67294),o=n(34334),i=n(72389),l=n(67392),p=n(7094),s=n(12466);const u="tabList__CuJ",m="tabItem_LNqP";function c(e){var t;const{lazy:n,block:i,defaultValue:c,values:d,groupId:h,className:k}=e,g=r.Children.map(e.children,(e=>{if((0,r.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),v=d??g.map((e=>{let{props:{value:t,label:n,attributes:a}}=e;return{value:t,label:n,attributes:a}})),b=(0,l.l)(v,((e,t)=>e.value===t.value));if(b.length>0)throw new Error(`Docusaurus error: Duplicate values "${b.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const f=null===c?c:c??(null==(t=g.find((e=>e.props.default)))?void 0:t.props.value)??g[0].props.value;if(null!==f&&!v.some((e=>e.value===f)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${f}" but none of its children has the corresponding value. Available values are: ${v.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:y,setTabGroupChoices:N}=(0,p.U)(),[I,T]=(0,r.useState)(f),w=[],{blockElementScrollPositionUntilNextRender:j}=(0,s.o5)();if(null!=h){const e=y[h];null!=e&&e!==I&&v.some((t=>t.value===e))&&T(e)}const O=e=>{const t=e.currentTarget,n=w.indexOf(t),a=v[n].value;a!==I&&(j(t),T(a),null!=h&&N(h,String(a)))},B=e=>{var t;let n=null;switch(e.key){case"ArrowRight":{const t=w.indexOf(e.currentTarget)+1;n=w[t]??w[0];break}case"ArrowLeft":{const t=w.indexOf(e.currentTarget)-1;n=w[t]??w[w.length-1];break}}null==(t=n)||t.focus()};return r.createElement("div",{className:(0,o.Z)("tabs-container",u)},r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.Z)("tabs",{"tabs--block":i},k)},v.map((e=>{let{value:t,label:n,attributes:i}=e;return r.createElement("li",(0,a.Z)({role:"tab",tabIndex:I===t?0:-1,"aria-selected":I===t,key:t,ref:e=>w.push(e),onKeyDown:B,onFocus:O,onClick:O},i,{className:(0,o.Z)("tabs__item",m,null==i?void 0:i.className,{"tabs__item--active":I===t})}),n??t)}))),n?(0,r.cloneElement)(g.filter((e=>e.props.value===I))[0],{className:"margin-top--md"}):r.createElement("div",{className:"margin-top--md"},g.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==I})))))}function d(e){const t=(0,i.Z)();return r.createElement(c,(0,a.Z)({key:String(t)},e))}},54935:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>p,default:()=>d,frontMatter:()=>l,metadata:()=>s,toc:()=>m});var a=n(83117),r=(n(67294),n(3905)),o=n(65488),i=n(85162);const l={sidebar_position:3,title:"Mutation"},p=void 0,s={unversionedId:"graphql/mutation",id:"graphql/mutation",title:"Mutation",description:"Introduction to GraphQL Input",source:"@site/docs/graphql/mutation.mdx",sourceDirName:"graphql",slug:"/graphql/mutation",permalink:"/jimmer-doc/docs/graphql/mutation",draft:!1,editUrl:"https://github.com/babyfish-ct/jimmer-doc/tree/main/docs/graphql/mutation.mdx",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3,title:"Mutation"},sidebar:"tutorialSidebar",previous:{title:"Query",permalink:"/jimmer-doc/docs/graphql/query"},next:{title:"Object",permalink:"/jimmer-doc/docs/object/"}},u={},m=[{value:"Introduction to GraphQL Input",id:"introduction-to-graphql-input",level:2},{value:"Define Jimmer Input DTO",id:"define-jimmer-input-dto",level:2},{value:"Implement GraphQL mutation",id:"implement-graphql-mutation",level:2}],c={toc:m};function d(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"introduction-to-graphql-input"},"Introduction to GraphQL Input"),(0,r.kt)("p",null,"In GraphQL, GraphQLObjects returned by queries are dynamic objects of arbitrary shapes. However, if mutation operations accept object parameters, they must be GraphQLInputs, which are static objects of fixed shapes. "),(0,r.kt)("p",null,"See ",(0,r.kt)("a",{parentName:"p",href:"https://graphql.org/graphql-js/mutations-and-input-types/"},"GraphQLInput")," to learn more."),(0,r.kt)("p",null,"Take the GraphQL declaration file in the example ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/babyfish-ct/jimmer/blob/main/example/java/jimmer-sql-graphql/src/main/resources/graphql/schema.graphqls"},"schema.graphqls")," as an example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"type Book implements CommonEntity { \u2776\n    id: Long!\n    name: String!\n    edition: Int!\n    price: BigDecimal!\n    store: BookStore\n    authors: [Author!]!\n    createdTime: LocalDateTime!\n    modifiedTime: LocalDateTime!\n    tenant: String!\n}\n\ninput BookInput { \u2777\n    id: Long\n    name: String!\n    edition: Int\n    price: BigDecimal!\n    storeId: Long\n    authorIds: [Long!]!\n}\n\n...other code omitted...\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"\u2776 Types declared with the ",(0,r.kt)("inlineCode",{parentName:"p"},"type")," keyword are dynamic types used to express arbitrary data structures, used as GraphQL output types")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"\u2777 Types declared with the ",(0,r.kt)("inlineCode",{parentName:"p"},"input")," keyword are static types used to express fixed data structures, used as GraphQL input types"))),(0,r.kt)("h2",{id:"define-jimmer-input-dto"},"Define Jimmer Input DTO"),(0,r.kt)("p",null,"Jimmer Input DTOs are introduced in great detail in ",(0,r.kt)("a",{parentName:"p",href:"../mutation/save-command/input-dto"},"Save Command/Input DTO"),", which will not be repeated here."),(0,r.kt)("p",null,"Jimmer provides two ways to define Input DTOs:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"../object/view/dto-language"},"Automatically generate Input DTOs using the DTO language")," "),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"../object/view/mapstruct"},"Manually define Input DTOs based on MapStruct"))),(0,r.kt)("p",null,"Using the DTO language can achieve our goal very efficiently, so this article adopts this approach."),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"In the project where the entity is defined"),", create the directory ",(0,r.kt)("inlineCode",{parentName:"p"},"src/main/dto"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Under ",(0,r.kt)("inlineCode",{parentName:"p"},"src/main/dto"),", create subdirectories ",(0,r.kt)("inlineCode",{parentName:"p"},"com/yourcompany/yourpoject/model")," according to the package path where the entities are located")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Under the directory created in the previous step, create the file ",(0,r.kt)("inlineCode",{parentName:"p"},"Book.dto"),". The file must have the same name as the entity class and the extension must be ",(0,r.kt)("inlineCode",{parentName:"p"},"dto"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Edit this file and use the DTO language to define various DTO shapes for the Book entity"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-sh",metastring:'title="Book.dto"',title:'"Book.dto"'},"input BookInput {\n    \n    #allScalars(Book)\n\n    id(store)\n\n    id(authors) as authorIds\n}\n\n...other DTO definitions omitted...\n")))),(0,r.kt)("p",null,"After compilation, the following Input DTO will be generated automatically:"),(0,r.kt)(o.Z,{groupId:"language",mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="BookInput.java"',title:'"BookInput.java"'},"@lombok.Data\npublic class BookInput implements Input<Book> { \u2776\n\n    @Nullable\n    private Long id;\n\n    private String name;\n\n    private int edition;\n\n    private BigDecimal price;\n\n    @Nullable\n    private Long storeId;\n\n    private List<Long> authorIds;\n\n    @Override\n    public Book toEntity() { \u2777\n        ...omitted...\n    }\n\n    ...other members omitted...\n}\n"))),(0,r.kt)(i.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin",metastring:'title="BookInput.kt"',title:'"BookInput.kt"'},'data class BookInput(\n    val id: Long? = null,\n    val name: String = "",\n    val edition: Int = 0,\n    val price: BigDecimal,\n    val storeId: Long? = null,\n    val authorIds: List<Long> = emptyList()  \n): Input<Book> { \u2776\n\n    override fun toEntity(): Book = \u2777\n        ...omitted...\n    \n    ...other members omitted...\n}\n')))),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"\u2776 The ",(0,r.kt)("inlineCode",{parentName:"p"},"BookInput")," class implements the interface ",(0,r.kt)("inlineCode",{parentName:"p"},"org.babyfish.jimmer.Input"),", which supports the ",(0,r.kt)("inlineCode",{parentName:"p"},"toEntity")," method to convert the current Input DTO object to a Jimmer dynamic entity object.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"\u2777 Implements the ",(0,r.kt)("inlineCode",{parentName:"p"},"Input.toEntity")," method"))),(0,r.kt)("h2",{id:"implement-graphql-mutation"},"Implement GraphQL mutation"),(0,r.kt)(o.Z,{groupId:"language",mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="BookStoreService.java"',title:'"BookStoreService.java"'},"package com.example.business;\n\nimport org.springframework.graphql.data.method.annotation.Argument;\n// highlight-next-line\nimport org.springframework.graphql.data.method.annotation.MutationMapping;\nimport org.springframework.stereotype.Controller;\n\n...other imports omitted...\n\n@Controller\npublic class BookStoreService {\n\n    private final BookStoreRepsitory bookStoreRepsitory;\n\n    public BookStoreService(BookStoreRepsitory bookStoreRepsitory) {\n        this.bookStoreRepsitory = bookStoreRepsitory;\n    }\n\n    @MutationMapping \u2776\n    @Transactional\n    public Book saveBook(\n        @Argument BookInput input \u2777 \n    ) {\n        // `save(input)` is shorthand for `save(input.toEntity())`\n        return bookRepository.save(input); \u2778\n    }\n}\n"))),(0,r.kt)(i.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin",metastring:'title="BookStoreService.kt"',title:'"BookStoreService.kt"'},"package com.example.business\n\nimport org.springframework.graphql.data.method.annotation.Argument\n// highlight-next-line  \nimport org.springframework.graphql.data.method.annotation.MutationMapping\nimport org.springframework.stereotype.Controller\n\n...other imports omitted...\n\n@Controller\nclass BookStoreService(\n    private val bookStoreRepository: BookStoreRepsitory\n) {\n\n    @MutationMapping \u2776\n    @Transactional\n    fun saveBook(\n        @Argument input: BookInput \u2777\n    ): Book =\n        // `save(input)` is shorthand for `save(input.toEntity())`\n        bookRepository.save(input) \u2778\n}\n")))),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"\u2776 Use annotation ",(0,r.kt)("inlineCode",{parentName:"p"},"@org.springframework.graphql.data.method.annotation.MutationMapping"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"\u2777 Use the static Input DTO type ",(0,r.kt)("inlineCode",{parentName:"p"},"BookInput")," to allow users to pass only data structures of specified shapes to conform to ",(0,r.kt)("a",{parentName:"p",href:"https://graphql.org/graphql-js/mutations-and-input-types/"},"GraphQLInput"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"\u2778 ",(0,r.kt)("a",{parentName:"p",href:"../mutation/save-command"},"Save command")," to save arbitrary data structures in one line"),(0,r.kt)("p",{parentName:"li"},"Here ",(0,r.kt)("inlineCode",{parentName:"p"},"bookRepository.save(input)")," is actually shorthand for ",(0,r.kt)("inlineCode",{parentName:"p"},"bookRepository.save(input.toEntity())"),"."),(0,r.kt)("admonition",{parentName:"li",type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"No matter how simple or relatively complex the data structure defined by the ",(0,r.kt)("inlineCode",{parentName:"p"},"BookInput")," type, it can be saved in one line. This is the core value of the ",(0,r.kt)("a",{parentName:"p",href:"../mutation/save-command"},"save command")," feature.")))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"")))}d.isMDXComponent=!0}}]);