"use strict";(self.webpackChunkdocusaurus_code=self.webpackChunkdocusaurus_code||[]).push([[8446],{3905:(e,a,t)=>{t.d(a,{Zo:()=>u,kt:()=>d});var n=t(67294);function l(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function r(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);a&&(n=n.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,n)}return t}function i(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?r(Object(t),!0).forEach((function(a){l(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}function o(e,a){if(null==e)return{};var t,n,l=function(e,a){if(null==e)return{};var t,n,l={},r=Object.keys(e);for(n=0;n<r.length;n++)t=r[n],a.indexOf(t)>=0||(l[t]=e[t]);return l}(e,a);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)t=r[n],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(l[t]=e[t])}return l}var s=n.createContext({}),p=function(e){var a=n.useContext(s),t=a;return e&&(t="function"==typeof e?e(a):i(i({},a),e)),t},u=function(e){var a=p(e.components);return n.createElement(s.Provider,{value:a},e.children)},m={inlineCode:"code",wrapper:function(e){var a=e.children;return n.createElement(n.Fragment,{},a)}},c=n.forwardRef((function(e,a){var t=e.components,l=e.mdxType,r=e.originalType,s=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),c=p(t),d=l,h=c["".concat(s,".").concat(d)]||c[d]||m[d]||r;return t?n.createElement(h,i(i({ref:a},u),{},{components:t})):n.createElement(h,i({ref:a},u))}));function d(e,a){var t=arguments,l=a&&a.mdxType;if("string"==typeof e||l){var r=t.length,i=new Array(r);i[0]=c;var o={};for(var s in a)hasOwnProperty.call(a,s)&&(o[s]=a[s]);o.originalType=e,o.mdxType="string"==typeof e?e:l,i[1]=o;for(var p=2;p<r;p++)i[p]=t[p];return n.createElement.apply(null,i)}return n.createElement.apply(null,t)}c.displayName="MDXCreateElement"},85162:(e,a,t)=>{t.d(a,{Z:()=>i});var n=t(67294),l=t(34334);const r="tabItem_Ymn6";function i(e){let{children:a,hidden:t,className:i}=e;return n.createElement("div",{role:"tabpanel",className:(0,l.Z)(r,i),hidden:t},a)}},65488:(e,a,t)=>{t.d(a,{Z:()=>d});var n=t(83117),l=t(67294),r=t(34334),i=t(72389),o=t(67392),s=t(7094),p=t(12466);const u="tabList__CuJ",m="tabItem_LNqP";function c(e){var a;const{lazy:t,block:i,defaultValue:c,values:d,groupId:h,className:f}=e,b=l.Children.map(e.children,(e=>{if((0,l.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),k=d??b.map((e=>{let{props:{value:a,label:t,attributes:n}}=e;return{value:a,label:t,attributes:n}})),N=(0,o.l)(k,((e,a)=>e.value===a.value));if(N.length>0)throw new Error(`Docusaurus error: Duplicate values "${N.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const v=null===c?c:c??(null==(a=b.find((e=>e.props.default)))?void 0:a.props.value)??b[0].props.value;if(null!==v&&!k.some((e=>e.value===v)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${v}" but none of its children has the corresponding value. Available values are: ${k.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:g,setTabGroupChoices:y}=(0,s.U)(),[T,C]=(0,l.useState)(v),w=[],{blockElementScrollPositionUntilNextRender:S}=(0,p.o5)();if(null!=h){const e=g[h];null!=e&&e!==T&&k.some((a=>a.value===e))&&C(e)}const _=e=>{const a=e.currentTarget,t=w.indexOf(a),n=k[t].value;n!==T&&(S(a),C(n),null!=h&&y(h,String(n)))},j=e=>{var a;let t=null;switch(e.key){case"ArrowRight":{const a=w.indexOf(e.currentTarget)+1;t=w[a]??w[0];break}case"ArrowLeft":{const a=w.indexOf(e.currentTarget)-1;t=w[a]??w[w.length-1];break}}null==(a=t)||a.focus()};return l.createElement("div",{className:(0,r.Z)("tabs-container",u)},l.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.Z)("tabs",{"tabs--block":i},f)},k.map((e=>{let{value:a,label:t,attributes:i}=e;return l.createElement("li",(0,n.Z)({role:"tab",tabIndex:T===a?0:-1,"aria-selected":T===a,key:a,ref:e=>w.push(e),onKeyDown:j,onFocus:_,onClick:_},i,{className:(0,r.Z)("tabs__item",m,null==i?void 0:i.className,{"tabs__item--active":T===a})}),t??a)}))),t?(0,l.cloneElement)(b.filter((e=>e.props.value===T))[0],{className:"margin-top--md"}):l.createElement("div",{className:"margin-top--md"},b.map(((e,a)=>(0,l.cloneElement)(e,{key:a,hidden:e.props.value!==T})))))}function d(e){const a=(0,i.Z)();return l.createElement(c,(0,n.Z)({key:String(a)},e))}},17266:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>u,contentTitle:()=>s,default:()=>d,frontMatter:()=>o,metadata:()=>p,toc:()=>m});var n=t(83117),l=(t(67294),t(3905)),r=t(65488),i=t(85162);const o={sidebar_position:1,title:"Formula"},s=void 0,p={unversionedId:"mapping/advanced/calculated/formula",id:"mapping/advanced/calculated/formula",title:"Formula",description:"Simple formula properties are properties declared with @org.babyfish.jimmer.sql.Formula. There are two usages:",source:"@site/docs/mapping/advanced/calculated/formula.mdx",sourceDirName:"mapping/advanced/calculated",slug:"/mapping/advanced/calculated/formula",permalink:"/jimmer-doc/docs/mapping/advanced/calculated/formula",draft:!1,editUrl:"https://github.com/babyfish-ct/jimmer-doc/tree/main/docs/mapping/advanced/calculated/formula.mdx",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,title:"Formula"},sidebar:"tutorialSidebar",previous:{title:"Calculated Properties",permalink:"/jimmer-doc/docs/mapping/advanced/calculated/"},next:{title:"Complex Calculation",permalink:"/jimmer-doc/docs/mapping/advanced/calculated/transient"}},u={},m=[{value:"Java/Kotlin-based Calculation",id:"javakotlin-based-calculation",level:2},{value:"SQL-based Calculation",id:"sql-based-calculation",level:2},{value:"Comparison with Java/Kotlin-based Simple Formula",id:"comparison-with-javakotlin-based-simple-formula",level:3}],c={toc:m};function d(e){let{components:a,...t}=e;return(0,l.kt)("wrapper",(0,n.Z)({},c,t,{components:a,mdxType:"MDXLayout"}),(0,l.kt)("p",null,"Simple formula properties are properties declared with ",(0,l.kt)("inlineCode",{parentName:"p"},"@org.babyfish.jimmer.sql.Formula"),". There are two usages:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Formula properties based on Java/Kotlin calculation"),(0,l.kt)("li",{parentName:"ul"},"Formula properties based on SQL calculation")),(0,l.kt)("admonition",{type:"note"},(0,l.kt)("p",{parentName:"admonition"},"Simple formula properties are designed for simple and fast calculations. For complex calculations, use ",(0,l.kt)("a",{parentName:"p",href:"./transient"},"Complex Formula Properties")," instead.")),(0,l.kt)("p",null,"In ",(0,l.kt)("a",{parentName:"p",href:"/jimmer-doc/docs/quick-view/get-started/define-entity"},"Define Entity"),", we defined two fields for ",(0,l.kt)("inlineCode",{parentName:"p"},"Author"),": ",(0,l.kt)("inlineCode",{parentName:"p"},"firstName")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"lastName"),"."),(0,l.kt)("p",null,"Next, let's add a new property ",(0,l.kt)("inlineCode",{parentName:"p"},"fullName")," to ",(0,l.kt)("inlineCode",{parentName:"p"},"Author"),": "),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"fullName = firstName + ' ' + lastName\n")),(0,l.kt)("p",null,"Then we use two different ways, Java/Kotlin-based calculation and SQL-based calculation, to implement ",(0,l.kt)("inlineCode",{parentName:"p"},"Author.fullName"),"."),(0,l.kt)("h2",{id:"javakotlin-based-calculation"},"Java/Kotlin-based Calculation"),(0,l.kt)(r.Z,{groupId:"language",mdxType:"Tabs"},(0,l.kt)(i.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="Author.java"',title:'"Author.java"'},'package com.example.model;\n\nimport org.babyfish.jimmer.sql.*;\n\n@Entity\npublic interface Author {\n\n    @Formula(dependencies = {"firstName", "lastName"})\n    default String fullName() {\n        return firstName() + \' \' + lastName(); \n    }\n\n    ...Omit other properties...\n}\n'))),(0,l.kt)(i.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-kotlin",metastring:'title="Author.kt"',title:'"Author.kt"'},'package com.example.model\n\nimport org.babyfish.jimmer.sql.*\n\n@Entity\ninterface Author {\n\n    @Formula(dependencies = ["firstName", "lastName"])\n    val fullName: String\n        get() = "$firstName $lastName"\n\n    ...Omit other properties...\n}\n')))),(0,l.kt)("p",null,"It is easy to see that Java/Kotlin-based simple formula properties have the following characteristics:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"The property is not abstract (requires ",(0,l.kt)("inlineCode",{parentName:"p"},"default")," keyword in Java) and directly provides calculation logic implementation.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"@Formula"),"'s ",(0,l.kt)("inlineCode",{parentName:"p"},"dependencies")," is specified, indicating that this property depends on ",(0,l.kt)("inlineCode",{parentName:"p"},"Author.firstName")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"Author.lastName"),"."),(0,l.kt)("p",{parentName:"li"},"  That is, the dynamic entity must ensure the presence of both ",(0,l.kt)("inlineCode",{parentName:"p"},"firstName")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"lastName")," properties to calculate ",(0,l.kt)("inlineCode",{parentName:"p"},"fullName"),".\n"))),(0,l.kt)("p",null,"The usage is:"),(0,l.kt)(r.Z,{groupId:"language",mdxType:"Tabs"},(0,l.kt)(i.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},"Author author = authorRepository.findNullable(\n    1L,\n    Fetchers.AUTHOR_FETCHER\n        // Query id (implicit + forced) and fullName  \n        // highlight-next-line\n        .fullName()\n);\nSystem.out.println(author);\n"))),(0,l.kt)(i.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-kotlin"},"val author = authorRepository.findNullable(\n    1L,\n    newFetcher(Author::class).by {\n        // Query id (implicit + forced) and fullName\n        // highlight-next-line\n        fullName()\n    }\n);\nprintln(author)\n")))),(0,l.kt)("p",null,"The executed SQL is:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"select\n    tb_1_.ID,\n    /* highlight-start */  \n    tb_1_.FIRST_NAME,\n    tb_1_.LAST_NAME\n    /* highlight-end */\nfrom AUTHOR as tb_1_\nwhere tb_1_.ID = ?  \n")),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"fullName")," is a formula property without corresponding field in the database, but depends on ",(0,l.kt)("inlineCode",{parentName:"p"},"firstName")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"lastName"),".\nSo this SQL queries ",(0,l.kt)("inlineCode",{parentName:"p"},"FIRST_NAME")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"LAST_NAME")," to make its dependent properties present.  "),(0,l.kt)("p",null,"Next, let's see what is printed:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{"id":1,"fullName":"Eve Procello"}\n')),(0,l.kt)("p",null,"We can see that after Jackson serialization (the ",(0,l.kt)("inlineCode",{parentName:"p"},"toString")," method of entity objects is a shortcut for serialization), there is only ",(0,l.kt)("inlineCode",{parentName:"p"},"fullName")," but no ",(0,l.kt)("inlineCode",{parentName:"p"},"firstName")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"lastName"),"."),(0,l.kt)("p",null,"This is because the object fetcher causes ",(0,l.kt)("inlineCode",{parentName:"p"},"firstName")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"lastName")," to be indirectly fetched due to fetching ",(0,l.kt)("inlineCode",{parentName:"p"},"fullName"),", but they are not directly fetched."),(0,l.kt)("p",null,"In this case, although the dynamic object has ",(0,l.kt)("inlineCode",{parentName:"p"},"firstName")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"lastName"),", they are marked as invisible to Jackson and will not appear in the Jackson serialization result. "),(0,l.kt)("admonition",{type:"note"},(0,l.kt)("p",{parentName:"admonition"},"If the object fetcher directly fetches ",(0,l.kt)("inlineCode",{parentName:"p"},"firstName")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"lastName"),", they will definitely appear in the serialization result. Readers can try it themselves, no need to repeat here.")),(0,l.kt)("h2",{id:"sql-based-calculation"},"SQL-based Calculation"),(0,l.kt)(r.Z,{groupId:"language",mdxType:"Tabs"},(0,l.kt)(i.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="Author.java"',title:'"Author.java"'},"package com.example.model;\n\nimport org.babyfish.jimmer.sql.*;\n\n@Entity\npublic interface Author {\n\n    @Formula(sql = \"concat(%alias.FIRST_NAME, ' ', %alias.LAST_NAME)\")\n    String fullName();\n\n    ...Omit other properties...\n} \n"))),(0,l.kt)(i.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-kotlin",metastring:'title="Author.kt"',title:'"Author.kt"'},"package com.example.model\n\nimport org.babyfish.jimmer.sql.*\n\n@Entity\ninterface Author {\n\n    @Formula(sql = \"concat(%alias.FIRST_NAME, ' ', %alias.LAST_NAME)\")\n    val fullName: String\n\n    ...Omit other properties...\n}\n")))),(0,l.kt)("p",null,"It is easy to see that SQL-based simple formula properties have the following characteristics:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"The property is abstract.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"@Formula"),"'s ",(0,l.kt)("inlineCode",{parentName:"p"},"sql")," is specified as an SQL expression with a special token ",(0,l.kt)("inlineCode",{parentName:"p"},"%alias")),(0,l.kt)("p",{parentName:"li"},"  Users cannot know the alias of the current table in the final SQL in advance, so Jimmer stipulates here that ",(0,l.kt)("inlineCode",{parentName:"p"},"%alias")," represents the actual table column name.\n"))),(0,l.kt)("p",null,"The usage is:"),(0,l.kt)(r.Z,{groupId:"language",mdxType:"Tabs"},(0,l.kt)(i.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},"Author author = authorRepository.findNullable(  \n    1L,\n    Fetchers.AUTHOR_FETCHER\n        // Query id (implicit + forced) and fullName\n        // highlight-next-line\n        .fullName()\n);\nSystem.out.println(author);\n"))),(0,l.kt)(i.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-kotlin"},"val author = authorRepository.findNullable(\n    1L,\n    newFetcher(Author::class).by {\n        // Query id (implicit + forced) and fullName\n        // highlight-next-line\n        fullName()\n    }\n);\nprintln(author)\n")))),(0,l.kt)("p",null,"The generated SQL is:  "),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"select\n    tb_1_.ID,\n    /* Here, `%alias` in @Formula.sql is replaced with `tb_1_` */ \n    /* highlight-next-line */\n    concat(tb_1_.FIRST_NAME, ' ', tb_1_.LAST_NAME)\nfrom AUTHOR as tb_1_\nwhere tb_1_.ID = ?\n")),(0,l.kt)("p",null,"The final printed result is:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{"id":1,"fullName":"Eve Procello"}\n')),(0,l.kt)("h3",{id:"comparison-with-javakotlin-based-simple-formula"},"Comparison with Java/Kotlin-based Simple Formula"),(0,l.kt)("p",null,"Compared with Java/Kotlin-based simple formula, SQL-based simple formula has one disadvantage and one advantage:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Disadvantage: If the object fetcher fetches ",(0,l.kt)("inlineCode",{parentName:"p"},"firstName"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"lastName")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"fullName")," at the same time, it will cause the final SQL to query three columns: "),(0,l.kt)("p",{parentName:"li"},"  ",(0,l.kt)("inlineCode",{parentName:"p"},"tb_1_.FIRST_NAME"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"tb_1_.LAST_NAME")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"concat(tb_1_.FIRST_NAME, ' ', tb_1_.LAST_NAME)"),"."),(0,l.kt)("p",{parentName:"li"},"  Obviously, the returned data contains redundancy and is wasteful.\n")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Advantage: Java/Kotlin-based formula properties can only be used as fields to be fetched by object fetchers, and cannot be used by SQL DSL."),(0,l.kt)("p",{parentName:"li"},"  SQL-based formula properties will be generated into the strongly typed SQL DSL API by the code generator, available for SQL DSL, such as:"),(0,l.kt)("p",{parentName:"li"},"  Java's ",(0,l.kt)("inlineCode",{parentName:"p"},'where(table.fullName().eq("Eve Procello"))')," or Kotlin's ",(0,l.kt)("inlineCode",{parentName:"p"},'where(table.fullName eq "Eve Procello")')),(0,l.kt)("p",{parentName:"li"},"  :::tip",(0,l.kt)("br",{parentName:"p"}),"\n","Among all formula properties, only SQL-based simple formula properties can be used by SQL DSL."),(0,l.kt)("p",{parentName:"li"},"  It is recommended to use databases that support function indexes and use them in combination with function indexes.\n:::\n"))),(0,l.kt)("p",null,"Therefore, it is recommended to carefully consider whether @Formula formula properties should be based on Java/Kotlin calculation or SQL calculation."))}d.isMDXComponent=!0}}]);