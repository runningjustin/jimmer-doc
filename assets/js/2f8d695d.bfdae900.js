"use strict";(self.webpackChunkdocusaurus_code=self.webpackChunkdocusaurus_code||[]).push([[1522],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>p});var a=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=a.createContext({}),m=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=m(e.components);return a.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),c=m(n),p=o,b=c["".concat(s,".").concat(p)]||c[p]||u[p]||r;return n?a.createElement(b,i(i({ref:t},d),{},{components:n})):a.createElement(b,i({ref:t},d))}));function p(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,i=new Array(r);i[0]=c;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:o,i[1]=l;for(var m=2;m<r;m++)i[m]=n[m];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},85162:(e,t,n)=>{n.d(t,{Z:()=>i});var a=n(67294),o=n(34334);const r="tabItem_Ymn6";function i(e){let{children:t,hidden:n,className:i}=e;return a.createElement("div",{role:"tabpanel",className:(0,o.Z)(r,i),hidden:n},t)}},65488:(e,t,n)=>{n.d(t,{Z:()=>p});var a=n(83117),o=n(67294),r=n(34334),i=n(72389),l=n(67392),s=n(7094),m=n(12466);const d="tabList__CuJ",u="tabItem_LNqP";function c(e){var t;const{lazy:n,block:i,defaultValue:c,values:p,groupId:b,className:h}=e,f=o.Children.map(e.children,(e=>{if((0,o.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),N=p??f.map((e=>{let{props:{value:t,label:n,attributes:a}}=e;return{value:t,label:n,attributes:a}})),k=(0,l.l)(N,((e,t)=>e.value===t.value));if(k.length>0)throw new Error(`Docusaurus error: Duplicate values "${k.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const y=null===c?c:c??(null==(t=f.find((e=>e.props.default)))?void 0:t.props.value)??f[0].props.value;if(null!==y&&!N.some((e=>e.value===y)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${y}" but none of its children has the corresponding value. Available values are: ${N.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:g,setTabGroupChoices:v}=(0,s.U)(),[T,w]=(0,o.useState)(y),j=[],{blockElementScrollPositionUntilNextRender:O}=(0,m.o5)();if(null!=b){const e=g[b];null!=e&&e!==T&&N.some((t=>t.value===e))&&w(e)}const x=e=>{const t=e.currentTarget,n=j.indexOf(t),a=N[n].value;a!==T&&(O(t),w(a),null!=b&&v(b,String(a)))},C=e=>{var t;let n=null;switch(e.key){case"ArrowRight":{const t=j.indexOf(e.currentTarget)+1;n=j[t]??j[0];break}case"ArrowLeft":{const t=j.indexOf(e.currentTarget)-1;n=j[t]??j[j.length-1];break}}null==(t=n)||t.focus()};return o.createElement("div",{className:(0,r.Z)("tabs-container",d)},o.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.Z)("tabs",{"tabs--block":i},h)},N.map((e=>{let{value:t,label:n,attributes:i}=e;return o.createElement("li",(0,a.Z)({role:"tab",tabIndex:T===t?0:-1,"aria-selected":T===t,key:t,ref:e=>j.push(e),onKeyDown:C,onFocus:x,onClick:x},i,{className:(0,r.Z)("tabs__item",u,null==i?void 0:i.className,{"tabs__item--active":T===t})}),n??t)}))),n?(0,o.cloneElement)(f.filter((e=>e.props.value===T))[0],{className:"margin-top--md"}):o.createElement("div",{className:"margin-top--md"},f.map(((e,t)=>(0,o.cloneElement)(e,{key:t,hidden:e.props.value!==T})))))}function p(e){const t=(0,i.Z)();return o.createElement(c,(0,a.Z)({key:String(t)},e))}},35892:(e,t,n)=>{n.d(t,{ZP:()=>s});var a=n(83117),o=(n(67294),n(3905)),r=n(65488),i=n(85162);const l={toc:[{value:"Prerequisites",id:"prerequisites",level:2},{value:"Usage",id:"usage",level:2},{value:"Output",id:"output",level:2}]};function s(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,a.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,'In order to solve the inconvenience of secondary "modification" ',(0,o.kt)("em",{parentName:"p"},"(creating a new immutable object based on another immutable object)")," of complex immutable objects in the current JVM ecosystem, some immutable object frameworks were born:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://immutables.github.io/immutable.html"},"Immutables")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/inferred/FreeBuilder"},"FreeBuilder")," "),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://arrow-kt.io/learn/immutable-data/intro/"},"Arrow-Kt(Kotlin)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://kopyk.at/"},"Kopyk(Kotlin)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/PatilShreyas/mutekt"},"MuteKt(Kotlin)"))),(0,o.kt)("p",null,"Jimmer is an ORM framework, and handling deep data structures is a core issue for ORM, so Jimmer must do similar work."),(0,o.kt)("p",null,"Jimmer needs to provide elegant dual language support for both Java and Kotlin at the same time. None of the above solutions can meet this requirement, so Jimmer did not use any of them, but chose to transplant ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/immerjs/immer"},"immer")," from the JavaScript/TypeScript field."),(0,o.kt)("p",null,"After transplanting ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/immerjs/immer"},"immer"),', secondary "modifications" of deep immutable data structures become very powerful and elegant.'),(0,o.kt)("h2",{id:"prerequisites"},"Prerequisites"),(0,o.kt)(r.Z,{groupId:"language",mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},"package yourpackage;\n\nimport java.util.List;\n\nimport org.babyfish.jimmer.Immutable;\nimport org.jetbrains.annotations.Nullable;\n\n// No need for ORM @Entity to demonstrate this, non-ORM @Immutable is enough  \n@Immutable\npublic interface TreeNode {\n    \n    String name();\n\n    @Nullable\n    TreeNode parent();\n\n    List<TreeNode> childNodes();\n}\n"))),(0,o.kt)(i.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},"package yourpackage\n\nimport org.babyfish.jimmer.Immutable\n\n// No need for ORM @Entity to demonstrate this, non-ORM @Immutable is enough\n@Immutable \ninterface TreeNode {\n\n    val name: String\n\n    val parent: TreeNode?\n\n    val childNodes: List<TreeNode>\n}\n")))),(0,o.kt)("h2",{id:"usage"},"Usage"),(0,o.kt)(r.Z,{groupId:"language",mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},'// Step 1, build brand new data from scratch\nTreeNode treeNode = Objects.createTreeNode(root -> {\n    root.setName("Root").addIntoChildNodes(food -> {\n        food\n            .setName("Food")\n            .addIntoChildNodes(drink -> {\n                drink\n                    .setName("Drink")\n                    .addIntoChildNodes(cococola -> {\n                        cococola.setName("Cococola");\n                    })\n                    .addIntoChildNodes(fanta -> {\n                        fanta.setName("Fanta");\n                    });\n                ;\n            });\n        ;\n    });\n});\n\n// Step 2, the key step!  \n// Based on existing data object, make some "changes" to create new data object\nTreeNode newTreeNode = Objects.createTreeNode(\n    // highlight-next-line  \n    treeNode, // existing data\n    root -> {\n        root\n            .childNodes(false).get(0) // Food\n            .childNodes(false).get(0) // Drink\n            .childNodes(false).get(0) // Cococola\n            .setName("Cococola plus");\n    }\n);\n\nSystem.out.println("treeNode:" + treeNode);\nSystem.out.println("newTreeNode:" + newTreeNode);\n'))),(0,o.kt)(i.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},'// Step 1, build brand new data from scratch\nval treeNode = new(TreeNode::class).by {\n    name = "Root"\n    childNodes().addBy {\n        name = "Food"\n        childNodes().addBy {\n            name = "Drinks" \n            childNodes().addBy {\n                name = "Cococola"\n            }\n            childNodes().addBy {\n                name = "Fanta" \n            }\n        }\n    }\n}\n\n// Step 2, the key step!\n// Based on existing data object, make some "changes" to create new data object  \nval newTreeNode = treeNode.copy {\n    childNodes()[0] // Food\n        .childNodes()[0] // Drinks\n        .childNodes()[0] // Cococola\n        .name += " plus" \n}\n\nprintln("treeNode: $treeNode")\nprintln("newTreeNode: $newTreeNode")\n')))),(0,o.kt)("admonition",{type:"tip"},(0,o.kt)("p",{parentName:"admonition"},"For Kotlin,"),(0,o.kt)("pre",{parentName:"admonition"},(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},"val newTreeNode = treeNode.copy { \n    ... \n}\n")),(0,o.kt)("p",{parentName:"admonition"},"is actually a shorthand for"),(0,o.kt)("pre",{parentName:"admonition"},(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},"val newTreeNode = new(TreeNode::class).by(treeNode) { \n    ... \n}\n"))),(0,o.kt)("h2",{id:"output"},"Output"),(0,o.kt)("p",null,"The output (the actual printed output is compact, but formatted here for readability):"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'treeNode: {\n    "name":"Root", \n    "childNodes":[\n        {\n            "name":"Food",\n            "childNodes":[\n                {\n                    "name":"Drink",\n                    "childNodes":[\n                        // highlight-next-line\n                        {"name":"Coco Cola"},  \n                        {"name":"Fanta"}\n                    ]\n                }\n            ]\n        }\n    ]\n}\nnewTreeNode: {\n    "name":"Root",\n    "childNodes":[\n        {\n            "name":"Food",\n            "childNodes":[\n                {\n                    "name":"Drink",\n                    "childNodes":[\n                        // highlight-next-line\n                        {"name":"Coco Cola plus"},\n                        {"name":"Fanta"}\n                    ]\n                }\n            ]\n        }\n    ]\n}\n')),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("p",{parentName:"admonition"},"This transplant is a powerful complement to the JVM ecosystem."),(0,o.kt)("p",{parentName:"admonition"},"This framework is named Jimmer, paying tribute to ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/immerjs/immer"},"immer"),".")))}s.isMDXComponent=!0},59508:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>m,contentTitle:()=>l,default:()=>c,frontMatter:()=>i,metadata:()=>s,toc:()=>d});var a=n(83117),o=(n(67294),n(3905)),r=n(35892);const i={sidebar_position:3,title:"Solution"},l=void 0,s={unversionedId:"object/immutable/solution",id:"object/immutable/solution",title:"Solution",description:"The sample code above uses a type called TreeNodeDraft, which is the interface type automatically generated by Jimmer based on the user-defined type TreeNode.",source:"@site/docs/object/immutable/solution.mdx",sourceDirName:"object/immutable",slug:"/object/immutable/solution",permalink:"/jimmer-doc/docs/object/immutable/solution",draft:!1,editUrl:"https://github.com/babyfish-ct/jimmer-doc/tree/main/docs/object/immutable/solution.mdx",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3,title:"Solution"},sidebar:"tutorialSidebar",previous:{title:"Current Situation",permalink:"/jimmer-doc/docs/object/immutable/current-situation"},next:{title:"Draft",permalink:"/jimmer-doc/docs/object/draft"}},m={},d=[],u={toc:d};function c(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)(r.ZP,{mdxType:"ImmutableSolution"}),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("p",{parentName:"admonition"},"The sample code above uses a type called ",(0,o.kt)("inlineCode",{parentName:"p"},"TreeNodeDraft"),", which is the interface type automatically generated by Jimmer based on the user-defined type ",(0,o.kt)("inlineCode",{parentName:"p"},"TreeNode"),"."),(0,o.kt)("p",{parentName:"admonition"},"Readers can ignore this auto-generated interface for now, later documentation ",(0,o.kt)("a",{parentName:"p",href:"../draft"},"Draft")," will introduce it. ")))}c.isMDXComponent=!0}}]);