"use strict";(self.webpackChunkdocusaurus_code=self.webpackChunkdocusaurus_code||[]).push([[9841],{3905:(e,t,a)=>{a.d(t,{Zo:()=>c,kt:()=>d});var n=a(67294);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function r(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,i=function(e,t){if(null==e)return{};var a,n,i={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(i[a]=e[a]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var s=n.createContext({}),p=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):r(r({},t),e)),a},c=function(e){var t=p(e.components);return n.createElement(s.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var a=e.components,i=e.mdxType,o=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=p(a),d=i,v=u["".concat(s,".").concat(d)]||u[d]||m[d]||o;return a?n.createElement(v,r(r({ref:t},c),{},{components:a})):n.createElement(v,r({ref:t},c))}));function d(e,t){var a=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=a.length,r=new Array(o);r[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:i,r[1]=l;for(var p=2;p<o;p++)r[p]=a[p];return n.createElement.apply(null,r)}return n.createElement.apply(null,a)}u.displayName="MDXCreateElement"},85162:(e,t,a)=>{a.d(t,{Z:()=>r});var n=a(67294),i=a(34334);const o="tabItem_Ymn6";function r(e){let{children:t,hidden:a,className:r}=e;return n.createElement("div",{role:"tabpanel",className:(0,i.Z)(o,r),hidden:a},t)}},65488:(e,t,a)=>{a.d(t,{Z:()=>d});var n=a(83117),i=a(67294),o=a(34334),r=a(72389),l=a(67392),s=a(7094),p=a(12466);const c="tabList__CuJ",m="tabItem_LNqP";function u(e){var t;const{lazy:a,block:r,defaultValue:u,values:d,groupId:v,className:k}=e,h=i.Children.map(e.children,(e=>{if((0,i.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),y=d??h.map((e=>{let{props:{value:t,label:a,attributes:n}}=e;return{value:t,label:a,attributes:n}})),b=(0,l.l)(y,((e,t)=>e.value===t.value));if(b.length>0)throw new Error(`Docusaurus error: Duplicate values "${b.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const g=null===u?u:u??(null==(t=h.find((e=>e.props.default)))?void 0:t.props.value)??h[0].props.value;if(null!==g&&!y.some((e=>e.value===g)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${g}" but none of its children has the corresponding value. Available values are: ${y.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:f,setTabGroupChoices:N}=(0,s.U)(),[T,C]=(0,i.useState)(g),E=[],{blockElementScrollPositionUntilNextRender:S}=(0,p.o5)();if(null!=v){const e=f[v];null!=e&&e!==T&&y.some((t=>t.value===e))&&C(e)}const j=e=>{const t=e.currentTarget,a=E.indexOf(t),n=y[a].value;n!==T&&(S(t),C(n),null!=v&&N(v,String(n)))},x=e=>{var t;let a=null;switch(e.key){case"ArrowRight":{const t=E.indexOf(e.currentTarget)+1;a=E[t]??E[0];break}case"ArrowLeft":{const t=E.indexOf(e.currentTarget)-1;a=E[t]??E[E.length-1];break}}null==(t=a)||t.focus()};return i.createElement("div",{className:(0,o.Z)("tabs-container",c)},i.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.Z)("tabs",{"tabs--block":r},k)},y.map((e=>{let{value:t,label:a,attributes:r}=e;return i.createElement("li",(0,n.Z)({role:"tab",tabIndex:T===t?0:-1,"aria-selected":T===t,key:t,ref:e=>E.push(e),onKeyDown:x,onFocus:j,onClick:j},r,{className:(0,o.Z)("tabs__item",m,null==r?void 0:r.className,{"tabs__item--active":T===t})}),a??t)}))),a?(0,i.cloneElement)(h.filter((e=>e.props.value===T))[0],{className:"margin-top--md"}):i.createElement("div",{className:"margin-top--md"},h.map(((e,t)=>(0,i.cloneElement)(e,{key:t,hidden:e.props.value!==T})))))}function d(e){const t=(0,r.Z)();return i.createElement(u,(0,n.Z)({key:String(t)},e))}},4301:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>d,frontMatter:()=>l,metadata:()=>p,toc:()=>m});var n=a(83117),i=(a(67294),a(3905)),o=a(65488),r=a(85162);const l={sidebar_position:9,title:"Remote Association"},s=void 0,p={unversionedId:"mapping/advanced/remote",id:"mapping/advanced/remote",title:"Remote Association",description:"Remote association is a product of combining Jimmer with microservice architecture. It will be introduced in detail in Spring Cloud and Remote Association.",source:"@site/docs/mapping/advanced/remote.mdx",sourceDirName:"mapping/advanced",slug:"/mapping/advanced/remote",permalink:"/jimmer-doc/docs/mapping/advanced/remote",draft:!1,editUrl:"https://github.com/babyfish-ct/jimmer-doc/tree/main/docs/mapping/advanced/remote.mdx",tags:[],version:"current",sidebarPosition:9,frontMatter:{sidebar_position:9,title:"Remote Association"},sidebar:"tutorialSidebar",previous:{title:"Non-Structural Mapping",permalink:"/jimmer-doc/docs/mapping/advanced/join-sql"},next:{title:"Key",permalink:"/jimmer-doc/docs/mapping/advanced/key"}},c={},m=[{value:"@Entity",id:"entity",level:2},{value:"@MappedSuperclass",id:"mappedsuperclass",level:2}],u={toc:m};function d(e){let{components:t,...a}=e;return(0,i.kt)("wrapper",(0,n.Z)({},u,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("admonition",{type:"caution"},(0,i.kt)("p",{parentName:"admonition"},"Remote association is a product of combining Jimmer with microservice architecture. It will be introduced in detail in ",(0,i.kt)("a",{parentName:"p",href:"../../spring/spring-cloud"},"Spring Cloud and Remote Association"),"."),(0,i.kt)("p",{parentName:"admonition"},"The purpose of this article is not to systematically explain remote associations, just to introduce the mapping configuration required for remote associations.")),(0,i.kt)("h2",{id:"entity"},"@Entity"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"@Entity")," annotation has an optional parameter ",(0,i.kt)("inlineCode",{parentName:"p"},"microServiceName"),' whose default value is "".'),(0,i.kt)("p",null,"Association properties involve two entity types. Since associations must point from the source to the target ",(0,i.kt)("em",{parentName:"p"},"(self association properties are special, the source and target overlap)"),":"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"If the ",(0,i.kt)("inlineCode",{parentName:"p"},"microServiceName")," of the source entity and target entity of the association property are equal, then this association is a local association ",(0,i.kt)("em",{parentName:"p"},"(All entities in the examples before this article use the default ",(0,i.kt)("inlineCode",{parentName:"em"},"microServiceName"),", so they are local associations)"),".")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"If the ",(0,i.kt)("inlineCode",{parentName:"p"},"microServiceName")," of the source entity and target entity of the association property are not equal, then this association is a remote association."))),(0,i.kt)("p",null,"For example:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Owning side ",(0,i.kt)("em",{parentName:"p"},"(required)"),": ",(0,i.kt)("inlineCode",{parentName:"p"},"Book.authors")),(0,i.kt)(o.Z,{groupId:"language",mdxType:"Tabs"},(0,i.kt)(r.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="Book.java"',title:'"Book.java"'},'// highlight-next-line \n@Entity(microServiceName = "book-service")\npublic interface Book {\n\n    @ManyToMany\n    List<Author> authors();\n\n    ...Omit other code...\n}\n'))),(0,i.kt)(r.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-kotlin",metastring:'title="Book.kt"',title:'"Book.kt"'},'// highlight-next-line\n@Entity(microServiceName = "book-service") \ninterface Book {\n\n    @ManyToMany\n    val authors: List<Author>\n\n    ...Omit other code...\n}\n'))))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Inverse side ",(0,i.kt)("em",{parentName:"p"},"(optional)"),": ",(0,i.kt)("inlineCode",{parentName:"p"},"Author.authors")),(0,i.kt)(o.Z,{groupId:"language",mdxType:"Tabs"},(0,i.kt)(r.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="Author.java"',title:'"Author.java"'},'// highlight-next-line\n@Entity(microServiceName = "author-service")\npublic interface Author {\n\n    @ManyToMany(mappedBy = "authors") \n    List<Book> books();\n\n    ...Omit other code...\n}\n'))),(0,i.kt)(r.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-kotlin",metastring:'title="Author.kt"',title:'"Author.kt"'},'// highlight-next-line\n@Entity(microServiceName = "author-service")\ninterface Author {\n\n    @ManyToMany(mappedBy = "authors")\n    val books: List<Book>\n\n    ...Omit other code...\n}\n')))))),(0,i.kt)("p",null,"Here, the microservice name of ",(0,i.kt)("inlineCode",{parentName:"p"},"Book")," is ",(0,i.kt)("inlineCode",{parentName:"p"},"book-service"),", and the microservice name of ",(0,i.kt)("inlineCode",{parentName:"p"},"Author")," is ",(0,i.kt)("inlineCode",{parentName:"p"},"author-service"),". The two are not equal, so ",(0,i.kt)("inlineCode",{parentName:"p"},"Book.authors")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"Author.books")," are remote associations."),(0,i.kt)("h2",{id:"mappedsuperclass"},"@MappedSuperclass"),(0,i.kt)("p",null,"As a super type, ",(0,i.kt)("inlineCode",{parentName:"p"},"MappedSuperclass")," has two usages:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Can contain association properties, but must belong to the same microservice"),(0,i.kt)(o.Z,{groupId:"language",mdxType:"Tabs"},(0,i.kt)(r.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="BookServiceCommonEnity.java"',title:'"BookServiceCommonEnity.java"'},'// highlight-next-line\n@MappedSuperclass(microServiceName = "book-service")\npublic interface BookServiceCommonEnity {\n\n    LocalDateTime createdTime();\n\n    @ManyToOne  \n    User createdBy();\n\n    LocalDateTime modifiedTime();\n\n    @ManyToOne\n    User modifiedBy();\n}\n'))),(0,i.kt)(r.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-kotlin",metastring:'title="BookServiceCommonEnity.kt"',title:'"BookServiceCommonEnity.kt"'},'// highlight-next-line\n@MappedSuperclass(microServiceName = "book-service") \ninterface BookServiceCommonEnity {\n\n    val createdTime: LocalDateTime\n\n    @ManyToOne\n    val createdBy: User\n\n    val modifiedTime: LocalDateTime\n\n    @ManyToOne\n    val modifiedBy: User\n}\n')))),(0,i.kt)("p",{parentName:"li"},"Here ",(0,i.kt)("inlineCode",{parentName:"p"},"BookServiceCommonEnity")," contains association properties ",(0,i.kt)("inlineCode",{parentName:"p"},"createdBy")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"modifiedBy"),", but only ",(0,i.kt)("inlineCode",{parentName:"p"},"Entity")," or other ",(0,i.kt)("inlineCode",{parentName:"p"},"MappedSuperclass"),' belonging to the microservice "book-service" can inherit it.')),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Can span any microservices, but must not contain association properties"),(0,i.kt)(o.Z,{groupId:"language",mdxType:"Tabs"},(0,i.kt)(r.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="CommonEnity.java"',title:'"CommonEnity.java"'},"// highlight-next-line\n@MappedSuperclass(acrossMicroServices = true)\npublic interface CommonEnity {\n\n    LocalDateTime createdTime();\n\n    LocalDateTime modifiedTime(); \n}\n"))),(0,i.kt)(r.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-kotlin",metastring:'title="CommonEnity.kt"',title:'"CommonEnity.kt"'},"// highlight-next-line\n@MappedSuperclass(acrossMicroServices = true)  \ninterface CommonEnity {\n\n    val createdTime: LocalDateTime\n\n    val modifiedTime: LocalDateTime\n}\n")))),(0,i.kt)("p",{parentName:"li"},"Here ",(0,i.kt)("inlineCode",{parentName:"p"},"CommonEnity")," can span any microservices. Any ",(0,i.kt)("inlineCode",{parentName:"p"},"Entity")," or other ",(0,i.kt)("inlineCode",{parentName:"p"},"MappedSuperclass")," under any microservice can inherit it, but it itself does not contain any association properties."))))}d.isMDXComponent=!0}}]);