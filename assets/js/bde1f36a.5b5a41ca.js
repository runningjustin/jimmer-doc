"use strict";(self.webpackChunkdocusaurus_code=self.webpackChunkdocusaurus_code||[]).push([[6323],{3905:(e,t,a)=>{a.d(t,{Zo:()=>u,kt:()=>d});var n=a(67294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function p(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var o=n.createContext({}),s=function(e){var t=n.useContext(o),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},u=function(e){var t=s(e.components);return n.createElement(o.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,o=e.parentName,u=p(e,["components","mdxType","originalType","parentName"]),m=s(a),d=r,g=m["".concat(o,".").concat(d)]||m[d]||c[d]||i;return a?n.createElement(g,l(l({ref:t},u),{},{components:a})):n.createElement(g,l({ref:t},u))}));function d(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,l=new Array(i);l[0]=m;var p={};for(var o in t)hasOwnProperty.call(t,o)&&(p[o]=t[o]);p.originalType=e,p.mdxType="string"==typeof e?e:r,l[1]=p;for(var s=2;s<i;s++)l[s]=a[s];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}m.displayName="MDXCreateElement"},85162:(e,t,a)=>{a.d(t,{Z:()=>l});var n=a(67294),r=a(34334);const i="tabItem_Ymn6";function l(e){let{children:t,hidden:a,className:l}=e;return n.createElement("div",{role:"tabpanel",className:(0,r.Z)(i,l),hidden:a},t)}},65488:(e,t,a)=>{a.d(t,{Z:()=>d});var n=a(83117),r=a(67294),i=a(34334),l=a(72389),p=a(67392),o=a(7094),s=a(12466);const u="tabList__CuJ",c="tabItem_LNqP";function m(e){var t;const{lazy:a,block:l,defaultValue:m,values:d,groupId:g,className:b}=e,y=r.Children.map(e.children,(e=>{if((0,r.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),v=d??y.map((e=>{let{props:{value:t,label:a,attributes:n}}=e;return{value:t,label:a,attributes:n}})),k=(0,p.l)(v,((e,t)=>e.value===t.value));if(k.length>0)throw new Error(`Docusaurus error: Duplicate values "${k.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const h=null===m?m:m??(null==(t=y.find((e=>e.props.default)))?void 0:t.props.value)??y[0].props.value;if(null!==h&&!v.some((e=>e.value===h)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${h}" but none of its children has the corresponding value. Available values are: ${v.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:f,setTabGroupChoices:N}=(0,o.U)(),[T,j]=(0,r.useState)(h),O=[],{blockElementScrollPositionUntilNextRender:S}=(0,s.o5)();if(null!=g){const e=f[g];null!=e&&e!==T&&v.some((t=>t.value===e))&&j(e)}const C=e=>{const t=e.currentTarget,a=O.indexOf(t),n=v[a].value;n!==T&&(S(t),j(n),null!=g&&N(g,String(n)))},M=e=>{var t;let a=null;switch(e.key){case"ArrowRight":{const t=O.indexOf(e.currentTarget)+1;a=O[t]??O[0];break}case"ArrowLeft":{const t=O.indexOf(e.currentTarget)-1;a=O[t]??O[O.length-1];break}}null==(t=a)||t.focus()};return r.createElement("div",{className:(0,i.Z)("tabs-container",u)},r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.Z)("tabs",{"tabs--block":l},b)},v.map((e=>{let{value:t,label:a,attributes:l}=e;return r.createElement("li",(0,n.Z)({role:"tab",tabIndex:T===t?0:-1,"aria-selected":T===t,key:t,ref:e=>O.push(e),onKeyDown:M,onFocus:C,onClick:C},l,{className:(0,i.Z)("tabs__item",c,null==l?void 0:l.className,{"tabs__item--active":T===t})}),a??t)}))),a?(0,r.cloneElement)(y.filter((e=>e.props.value===T))[0],{className:"margin-top--md"}):r.createElement("div",{className:"margin-top--md"},y.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==T})))))}function d(e){const t=(0,l.Z)();return r.createElement(m,(0,n.Z)({key:String(t)},e))}},92410:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>u,contentTitle:()=>o,default:()=>d,frontMatter:()=>p,metadata:()=>s,toc:()=>c});var n=a(83117),r=(a(67294),a(3905)),i=a(65488),l=a(85162);const p={sidebar_position:7,title:"JSON Mapping"},o=void 0,s={unversionedId:"mapping/advanced/json",id:"mapping/advanced/json",title:"JSON Mapping",description:"Jimmer supports JSON properties. In Java/Kotlin entity types, such properties can be declared as any type other than java.lang.Object and kotlin.Any.",source:"@site/docs/mapping/advanced/json.mdx",sourceDirName:"mapping/advanced",slug:"/mapping/advanced/json",permalink:"/jimmer-doc/docs/mapping/advanced/json",draft:!1,editUrl:"https://github.com/babyfish-ct/jimmer-doc/tree/main/docs/mapping/advanced/json.mdx",tags:[],version:"current",sidebarPosition:7,frontMatter:{sidebar_position:7,title:"JSON Mapping"},sidebar:"tutorialSidebar",previous:{title:"Enum Mapping",permalink:"/jimmer-doc/docs/mapping/advanced/enum"},next:{title:"Non-Structural Mapping",permalink:"/jimmer-doc/docs/mapping/advanced/join-sql"}},u={},c=[{value:"Global JSON Mapping",id:"global-json-mapping",level:2},{value:"Property-level JSON Mapping",id:"property-level-json-mapping",level:2},{value:"ObjectMapper Configuration",id:"objectmapper-configuration",level:2},{value:"Use Low-level API",id:"use-low-level-api",level:3},{value:"Use Spring Boot Starter",id:"use-spring-boot-starter",level:3}],m={toc:c};function d(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,n.Z)({},m,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Jimmer supports JSON properties. In Java/Kotlin entity types, such properties can be declared as any type other than ",(0,r.kt)("inlineCode",{parentName:"p"},"java.lang.Object")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"kotlin.Any"),".\nIn the database, the information stored in the corresponding column is JSON."),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("ul",{parentName:"admonition"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"JSON properties are simple properties, not association properties.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"According to the current implementation, the corresponding column type in Postgres should be ",(0,r.kt)("inlineCode",{parentName:"p"},"jsonb"),", and the corresponding column type in other databases should be string.")))),(0,r.kt)("p",null,"Jimmer provides ",(0,r.kt)("inlineCode",{parentName:"p"},"org.babyfish.jimmer.sql.Serialized"),". There are two ways to use JSON mapping:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Global JSON mapping"),(0,r.kt)("p",{parentName:"li"},"If the property type is a custom class rather than an array, collection, or Map, decorate this class with ",(0,r.kt)("inlineCode",{parentName:"p"},"@Serialized"),". This way, any properties of the this type in all entities will become JSON properties.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Property-level JSON mapping"),(0,r.kt)("p",{parentName:"li"},"The current property can be decorated with ",(0,r.kt)("inlineCode",{parentName:"p"},"@Serialized"),". "))),(0,r.kt)("p",null,"Properties of array, collection, or map types must use property-level mapping; however, global mapping is better for custom types."),(0,r.kt)("h2",{id:"global-json-mapping"},"Global JSON Mapping"),(0,r.kt)("p",null,"First, define a custom class and decorate it with ",(0,r.kt)("inlineCode",{parentName:"p"},"@Serialized"),":"),(0,r.kt)(i.Z,{groupId:"language",mdxType:"Tabs"},(0,r.kt)(l.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="UserType.java"',title:'"UserType.java"'},"// highlight-next-line\n@Serialized\npublic class UserType {\n\n    ...Omit members, can contain any info...\n    ...As long as Json serialization/deserialization is supported... \n}\n"))),(0,r.kt)(l.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin",metastring:'title="UserType.kt"',title:'"UserType.kt"'},"// highlight-next-line\n@Serialized  \ndata class UserType(\n\n    ...Omit parameters, can contain any info...\n    ...As long as Json serialization/deserialization is supported...\n)\n")))),(0,r.kt)("p",null,"Then ",(0,r.kt)("inlineCode",{parentName:"p"},"UserType")," can be used to define properties for any entity:"),(0,r.kt)(i.Z,{groupId:"language",mdxType:"Tabs"},(0,r.kt)(l.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="Book.java"',title:'"Book.java"'},"@Entity\npublic interface Book {\n\n    // highlight-next-line\n    UserType userData();\n\n    ...Omit other types...\n}\n"))),(0,r.kt)(l.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin",metastring:'title="Book.kt"',title:'"Book.kt"'},"@Entity\ninterface Book {\n\n    // highlight-next-line\n    val userData: UserType\n    \n    ...Omit other types... \n}\n")))),(0,r.kt)("h2",{id:"property-level-json-mapping"},"Property-level JSON Mapping"),(0,r.kt)("p",null,"Just decorate the property with ",(0,r.kt)("inlineCode",{parentName:"p"},"@Serialized"),":"),(0,r.kt)(i.Z,{groupId:"language",mdxType:"Tabs"},(0,r.kt)(l.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="Book.java"',title:'"Book.java"'},"@Entity\npublic interface Book {\n\n    // highlight-next-line\n    @Serialized\n    List<Map<String, SomeType1>> userData1();\n\n    // highlight-next-line\n    @Serialized\n    Map<String, List<SomeType2>> userData2();\n\n    ...Omit other types...\n}\n"))),(0,r.kt)(l.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin",metastring:'title="Book.kt"',title:'"Book.kt"'},"@Entity\ninterface Book {\n\n    // highlight-next-line\n    @Serialized\n    val userData1: List<Map<String, SomeType1>>\n    \n    // highlight-next-line \n    @Serialized\n    val userData2: Map<String, List<SomeType2>>\n    \n    ...Omit other types...\n}\n")))),(0,r.kt)("h2",{id:"objectmapper-configuration"},"ObjectMapper Configuration"),(0,r.kt)("h3",{id:"use-low-level-api"},"Use Low-level API"),(0,r.kt)("p",null,"Developers can configure the ObjectMapper for JSON serialization/deserialization of properties decorated with ",(0,r.kt)("inlineCode",{parentName:"p"},"@Seralized"),"."),(0,r.kt)(i.Z,{groupId:"language",mdxType:"Tabs"},(0,r.kt)(l.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"ObjectMapper mapper1 = ...omitted...;\nObjectMapper mapper2 = ...omitted...; \nObjectMapper mapper3 = ...omitted...;\nJSqlClient sqlClient = JSqlClient\n    .newBuilder()\n    .setDefaultSerializedTypeObjectMapper(mapper1) \u2776\n    .setSerializedTypeObjectMapper(MetaConfig.class, mapper2) \u2777\n    .setSerializedTypePropMapper(TopicProps.TAGS, mapper3) \u2778\n    ...Omit other configurations...\n    .build();\n"))),(0,r.kt)(l.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},"val mapper1: ObjectMapper = ...omitted...\nval mapper2: ObjectMapper = ...omitted...\nval mapper3: ObjectMapper = ...omitted...\nval sqlClient = newKSqlClient {\n    setDefaultSerializedTypeObjectMapper(mapper1) \u2776\n    setSerializedTypeObjectMapper(MetaConfig::class, mapper2) \u2777\n    setSerializedTypePropMapper(Topic::tags, mapper3) \u2778\n    ...Omit other configurations...\n}\n")))),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"\u2776 Set default ObjectMapper to ",(0,r.kt)("inlineCode",{parentName:"p"},"mapper1")),(0,r.kt)("p",{parentName:"li"},"Equivalent to ",(0,r.kt)("inlineCode",{parentName:"p"},"setSerializedTypeObjectMapper(Object.class, mapper1)"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"\u2777 For any property whose return type is MetaConfig or its subclass, use ",(0,r.kt)("inlineCode",{parentName:"p"},"mapper2"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"\u2778 Explicitly set ObjectMapper for ",(0,r.kt)("inlineCode",{parentName:"p"},"Topic.tags")," to ",(0,r.kt)("inlineCode",{parentName:"p"},"mapper3")," "),(0,r.kt)("p",{parentName:"li"},"If the set property is not decorated with ",(0,r.kt)("inlineCode",{parentName:"p"},"@Serialized"),", an exception will be thrown"))),(0,r.kt)("p",null,"Configuration precedence: \u2778 > \u2777 > \u2776"),(0,r.kt)("h3",{id:"use-spring-boot-starter"},"Use Spring Boot Starter"),(0,r.kt)("p",null,"If using the Spring Boot Starter, the SqlClient is created automatically, but users can change the configuration before SqlClient is created via ",(0,r.kt)("inlineCode",{parentName:"p"},"Customizer/KCoustomizer"),":"),(0,r.kt)(i.Z,{groupId:"language",mdxType:"Tabs"},(0,r.kt)(l.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"// highlight-next-line\n@Component \npublic class SerializationCustomizer implements Customizer {\n\n    @Override  \n    public void customize(JSqlClient.Builder builder) {\n        builder\n            .setDefaultSerializedTypeObjectMapper(...omitted...)\n            .setSerializedTypeObjectMapper(MetaConfig.class, ...omitted...)\n            .setSerializedTypePropMapper(TopicProps.TAGS, ...omitted...); \n    }\n}\n"))),(0,r.kt)(l.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},"// highlight-next-line\n@Component\nclass SerializationCustomizer : KCustomizer {\n    \n    override fun customize(dsl: KSqlClientDsl) {\n        dsl\n            .setDefaultSerializedTypeObjectMapper(...omitted...)\n            .setSerializedTypeObjectMapper(MetaConfig::class, ...omitted...)\n            .setSerializedTypePropMapper(Topic::tags, ...omitted...);\n    }\n}\n")))))}d.isMDXComponent=!0}}]);