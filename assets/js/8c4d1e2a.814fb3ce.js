"use strict";(self.webpackChunkdocusaurus_code=self.webpackChunkdocusaurus_code||[]).push([[5450],{3905:(e,t,a)=>{a.d(t,{Zo:()=>u,kt:()=>k});var n=a(67294);function o(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function r(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){o(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,n,o=function(e,t){if(null==e)return{};var a,n,o={},l=Object.keys(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||(o[a]=e[a]);return o}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(o[a]=e[a])}return o}var s=n.createContext({}),p=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):r(r({},t),e)),a},u=function(e){var t=p(e.components);return n.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var a=e.components,o=e.mdxType,l=e.originalType,s=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),m=p(a),k=o,c=m["".concat(s,".").concat(k)]||m[k]||d[k]||l;return a?n.createElement(c,r(r({ref:t},u),{},{components:a})):n.createElement(c,r({ref:t},u))}));function k(e,t){var a=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var l=a.length,r=new Array(l);r[0]=m;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:o,r[1]=i;for(var p=2;p<l;p++)r[p]=a[p];return n.createElement.apply(null,r)}return n.createElement.apply(null,a)}m.displayName="MDXCreateElement"},85162:(e,t,a)=>{a.d(t,{Z:()=>r});var n=a(67294),o=a(34334);const l="tabItem_Ymn6";function r(e){let{children:t,hidden:a,className:r}=e;return n.createElement("div",{role:"tabpanel",className:(0,o.Z)(l,r),hidden:a},t)}},65488:(e,t,a)=>{a.d(t,{Z:()=>k});var n=a(83117),o=a(67294),l=a(34334),r=a(72389),i=a(67392),s=a(7094),p=a(12466);const u="tabList__CuJ",d="tabItem_LNqP";function m(e){var t;const{lazy:a,block:r,defaultValue:m,values:k,groupId:c,className:b}=e,y=o.Children.map(e.children,(e=>{if((0,o.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),v=k??y.map((e=>{let{props:{value:t,label:a,attributes:n}}=e;return{value:t,label:a,attributes:n}})),g=(0,i.l)(v,((e,t)=>e.value===t.value));if(g.length>0)throw new Error(`Docusaurus error: Duplicate values "${g.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const f=null===m?m:m??(null==(t=y.find((e=>e.props.default)))?void 0:t.props.value)??y[0].props.value;if(null!==f&&!v.some((e=>e.value===f)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${f}" but none of its children has the corresponding value. Available values are: ${v.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:h,setTabGroupChoices:T}=(0,s.U)(),[N,j]=(0,o.useState)(f),I=[],{blockElementScrollPositionUntilNextRender:O}=(0,p.o5)();if(null!=c){const e=h[c];null!=e&&e!==N&&v.some((t=>t.value===e))&&j(e)}const w=e=>{const t=e.currentTarget,a=I.indexOf(t),n=v[a].value;n!==N&&(O(t),j(n),null!=c&&T(c,String(n)))},x=e=>{var t;let a=null;switch(e.key){case"ArrowRight":{const t=I.indexOf(e.currentTarget)+1;a=I[t]??I[0];break}case"ArrowLeft":{const t=I.indexOf(e.currentTarget)-1;a=I[t]??I[I.length-1];break}}null==(t=a)||t.focus()};return o.createElement("div",{className:(0,l.Z)("tabs-container",u)},o.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,l.Z)("tabs",{"tabs--block":r},b)},v.map((e=>{let{value:t,label:a,attributes:r}=e;return o.createElement("li",(0,n.Z)({role:"tab",tabIndex:N===t?0:-1,"aria-selected":N===t,key:t,ref:e=>I.push(e),onKeyDown:x,onFocus:w,onClick:w},r,{className:(0,l.Z)("tabs__item",d,null==r?void 0:r.className,{"tabs__item--active":N===t})}),a??t)}))),a?(0,o.cloneElement)(y.filter((e=>e.props.value===N))[0],{className:"margin-top--md"}):o.createElement("div",{className:"margin-top--md"},y.map(((e,t)=>(0,o.cloneElement)(e,{key:t,hidden:e.props.value!==N})))))}function k(e){const t=(0,r.Z)();return o.createElement(m,(0,n.Z)({key:String(t)},e))}},87080:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>u,contentTitle:()=>s,default:()=>k,frontMatter:()=>i,metadata:()=>p,toc:()=>d});var n=a(83117),o=(a(67294),a(3905)),l=a(65488),r=a(85162);const i={sidebar_position:7,title:"Tool Methods"},s=void 0,p={unversionedId:"object/tool",id:"object/tool",title:"Tool Methods",description:"Jimmer provides a series of static tool methods for operating on dynamic objects or their Drafts.",source:"@site/docs/object/tool.mdx",sourceDirName:"object",slug:"/object/tool",permalink:"/jimmer-doc/docs/object/tool",draft:!1,editUrl:"https://github.com/babyfish-ct/jimmer-doc/tree/main/docs/object/tool.mdx",tags:[],version:"current",sidebarPosition:7,frontMatter:{sidebar_position:7,title:"Tool Methods"},sidebar:"tutorialSidebar",previous:{title:"Visibility",permalink:"/jimmer-doc/docs/object/visibility"},next:{title:"Resources",permalink:"/jimmer-doc/docs/resource/"}},u={},d=[{value:"Operating on Immutable Objects",id:"operating-on-immutable-objects",level:2},{value:"isLoaded",id:"isloaded",level:3},{value:"get",id:"get",level:3},{value:"isIdOnly",id:"isidonly",level:3},{value:"makeIdOnly",id:"makeidonly",level:3},{value:"isLonely",id:"islonely",level:3},{value:"toLonely",id:"tolonely",level:3},{value:"toIdOnly",id:"toidonly",level:3},{value:"fromString",id:"fromstring",level:3},{value:"Operating on Mutable Drafts",id:"operating-on-mutable-drafts",level:2},{value:"set",id:"set",level:3},{value:"unload",id:"unload",level:3},{value:"show",id:"show",level:3},{value:"hide",id:"hide",level:3}],m={toc:d};function k(e){let{components:t,...a}=e;return(0,o.kt)("wrapper",(0,n.Z)({},m,a,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Jimmer provides a series of static tool methods for operating on dynamic objects or their Drafts."),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("p",{parentName:"admonition"},"For brevity, this article only lists the strongly typed usages.",(0,o.kt)("br",{parentName:"p"}),"\n","There are also weakly typed versions of these refactoring methods.")),(0,o.kt)("h2",{id:"operating-on-immutable-objects"},"Operating on Immutable Objects"),(0,o.kt)("h3",{id:"isloaded"},"isLoaded"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Purpose: Determine if a property of a dynamic object is loaded")),(0,o.kt)(l.Z,{groupId:"language",mdxType:"Tabs"},(0,o.kt)(r.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},"if (ImmutableObjects.isLoaded(book, BookProps.AUTHORS)) {\n    ...\n}\n"))),(0,o.kt)(r.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},"if (isLoaded(book, Book::authors)) {\n    ...\n}\n")))),(0,o.kt)("h3",{id:"get"},"get"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Purpose: Dynamically get a property of an object  ")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Exception: The property of the object is in an unloaded state"))),(0,o.kt)(l.Z,{groupId:"language",mdxType:"Tabs"},(0,o.kt)(r.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},"List<Author> authors =   \n    ImmutableObjects.get(book, BookProps.AUTHORS);\n"))),(0,o.kt)(r.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},"val authors = get(book, Book::authors) \n")))),(0,o.kt)("h3",{id:"isidonly"},"isIdOnly"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Purpose: Check if a dynamic object is only set with an id property  ")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Precondition: The object type is annotated with ",(0,o.kt)("inlineCode",{parentName:"p"},"@Entity")," and is an ORM entity with an id"))),(0,o.kt)(l.Z,{groupId:"language",mdxType:"Tabs"},(0,o.kt)(r.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},"if (ImmutableObjects.isIdOnly(book)) {\n    ...\n}\n"))),(0,o.kt)(r.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},"if (isIdOnly(book)) {\n    ...\n}\n")))),(0,o.kt)("h3",{id:"makeidonly"},"makeIdOnly"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Purpose: Construct an object of the given type and set its id property")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Precondition: The object type is annotated with ",(0,o.kt)("inlineCode",{parentName:"p"},"@Entity")," and is an ORM entity with an id"))),(0,o.kt)(l.Z,{groupId:"language",mdxType:"Tabs"},(0,o.kt)(r.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},"Book book = ImmutableObjects.makeIdOnly(Book.class, 1L);\n"))),(0,o.kt)(r.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},"val book = makeIdOnly(Book::class, 1L)\n")))),(0,o.kt)("admonition",{type:"tip"},(0,o.kt)("ul",{parentName:"admonition"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"For Kotlin, the id parameter must be non-null, and the return value is also non-null."),(0,o.kt)("p",{parentName:"li"},"To accept a possibly null id and directly return null when id is null, call ",(0,o.kt)("inlineCode",{parentName:"p"},"makeNullableIdOnly"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Java's ",(0,o.kt)("inlineCode",{parentName:"p"},"makeIdOnly")," is actually equivalent to Kotlin's ",(0,o.kt)("inlineCode",{parentName:"p"},"makeNullableIdOnly"),".")))),(0,o.kt)("h3",{id:"islonely"},"isLonely"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Purpose: Check if an object is only set with an id property. I.e. no associated properties are set to non-null ",(0,o.kt)("em",{parentName:"p"},"(including unset and set to null)"),"."),(0,o.kt)("admonition",{parentName:"li",type:"info"},(0,o.kt)("p",{parentName:"admonition"},"If the object is an ORM entity, it is an exception if a one-to-one or many-to-one property based directly on a foreign key is set to an associated object with only an id.")))),(0,o.kt)(l.Z,{groupId:"language",mdxType:"Tabs"},(0,o.kt)(r.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},"if (ImmutableObjects.isLonely(book)) {\n    ...\n} \n"))),(0,o.kt)(r.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},"if (isLonely(book)) {\n    ...\n}\n")))),(0,o.kt)("h3",{id:"tolonely"},"toLonely"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Purpose: Create a new object based on an existing object. The new object copies all non-associated properties from the old object, but all associated properties remain unset."),(0,o.kt)("admonition",{parentName:"li",type:"info"},(0,o.kt)("p",{parentName:"admonition"},"For ORM entities, special handling is performed for one-to-one and many-to-one properties based directly on foreign keys. These are set to associated objects with only ids or null.")))),(0,o.kt)(l.Z,{groupId:"language",mdxType:"Tabs"},(0,o.kt)(r.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},"Book lonelyBook = ImmutableObjects.toLonely(book);\n"))),(0,o.kt)(r.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},"val lonelyBook = toLonely(book) \n")))),(0,o.kt)("h3",{id:"toidonly"},"toIdOnly"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Purpose: Create a new object based on an existing object. The new object only copies the id property from the old object.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Precondition: The object type is annotated with ",(0,o.kt)("inlineCode",{parentName:"p"},"@Entity")," and is an ORM entity with an id"))),(0,o.kt)(l.Z,{groupId:"language",mdxType:"Tabs"},(0,o.kt)(r.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},"Book lonelyBook = ImmutableObjects.toIdOnly(book); \n"))),(0,o.kt)(r.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},"val lonelyBook = toIdOnly(book)\n")))),(0,o.kt)("p",null,"Or "),(0,o.kt)(l.Z,{groupId:"language",mdxType:"Tabs"},(0,o.kt)(r.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},"List<Book> lonelyBooks = ImmutableObjects.toIdOnly(books);\n"))),(0,o.kt)(r.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},"val lonelyBooks = toIdOnly(books)\n")))),(0,o.kt)("h3",{id:"fromstring"},"fromString"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Purpose: Shortcut for JSON deserialization")),(0,o.kt)(l.Z,{groupId:"language",mdxType:"Tabs"},(0,o.kt)(r.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},'Book book = ImmutableObjects.fromObject(\n    Book.class, \n    "{\\"id\\":1,\\"name\\":\\"Learning GraphQL\\",\\"authorIds\\":[2,1]}"   \n);\n'))),(0,o.kt)(r.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},'val book = fromString(\n    Book::class,\n    """{"id":1,"name":"Learning GraphQL","authorIds":[2,1]}"""  \n)\n')))),(0,o.kt)("h2",{id:"operating-on-mutable-drafts"},"Operating on Mutable Drafts"),(0,o.kt)("h3",{id:"set"},"set"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Purpose: Dynamically set Draft properties")),(0,o.kt)(l.Z,{groupId:"language",mdxType:"Tabs"},(0,o.kt)(r.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},"Book newBook = Objects.createBook(book, draft -> {\n    DraftObjects.set(draft, BookProps.AUTHOR_IDS, Arrays.asList(1L, 3L)); \n});\n"))),(0,o.kt)(r.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},"val newBook = new(Book::class).by(book) {\n    set(draft, Book::authorIds, listOf(1L, 3L))\n}\n")))),(0,o.kt)("h3",{id:"unload"},"unload"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Purpose: Unload a Draft property, i.e. mark a property as unloaded")),(0,o.kt)(l.Z,{groupId:"language",mdxType:"Tabs"},(0,o.kt)(r.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},"Book newBook = Objects.createBook(book, draft -> {\n    DraftObjects.unload(draft, BookProps.AUTHOR_IDS);  \n});\n"))),(0,o.kt)(r.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},"val newBook = new(Book::class).by(book) {\n    unload(draft, Book::authorIds)\n}\n")))),(0,o.kt)("h3",{id:"show"},"show"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Purpose: Show a property")),(0,o.kt)(l.Z,{groupId:"language",mdxType:"Tabs"},(0,o.kt)(r.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},"Book newBook = Objects.createBook(book, draft -> {\n    DraftObjects.show(draft, BookProps.AUTHOR_IDS);\n});\n"))),(0,o.kt)(r.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},"val newBook = new(Book::class).by(book) {\n    show(draft, Book::authorIds) \n}\n")))),(0,o.kt)("h3",{id:"hide"},"hide"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Purpose: Hide a property")),(0,o.kt)(l.Z,{groupId:"language",mdxType:"Tabs"},(0,o.kt)(r.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},"Book newBook = Objects.createBook(book, draft -> {\n    DraftObjects.hide(draft, BookProps.AUTHOR_IDS); \n});\n"))),(0,o.kt)(r.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},"val newBook = new(Book::class).by(book) {\n    hide(draft, Book::authorIds)\n}\n")))),"```")}k.isMDXComponent=!0}}]);