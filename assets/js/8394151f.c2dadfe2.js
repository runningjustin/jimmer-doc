"use strict";(self.webpackChunkdocusaurus_code=self.webpackChunkdocusaurus_code||[]).push([[9017],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>p});var a=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=a.createContext({}),c=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},d=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),m=c(n),p=i,h=m["".concat(s,".").concat(p)]||m[p]||u[p]||r;return n?a.createElement(h,l(l({ref:t},d),{},{components:n})):a.createElement(h,l({ref:t},d))}));function p(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,l=new Array(r);l[0]=m;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:i,l[1]=o;for(var c=2;c<r;c++)l[c]=n[c];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},85162:(e,t,n)=>{n.d(t,{Z:()=>l});var a=n(67294),i=n(34334);const r="tabItem_Ymn6";function l(e){let{children:t,hidden:n,className:l}=e;return a.createElement("div",{role:"tabpanel",className:(0,i.Z)(r,l),hidden:n},t)}},65488:(e,t,n)=>{n.d(t,{Z:()=>p});var a=n(83117),i=n(67294),r=n(34334),l=n(72389),o=n(67392),s=n(7094),c=n(12466);const d="tabList__CuJ",u="tabItem_LNqP";function m(e){var t;const{lazy:n,block:l,defaultValue:m,values:p,groupId:h,className:b}=e,k=i.Children.map(e.children,(e=>{if((0,i.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),f=p??k.map((e=>{let{props:{value:t,label:n,attributes:a}}=e;return{value:t,label:n,attributes:a}})),y=(0,o.l)(f,((e,t)=>e.value===t.value));if(y.length>0)throw new Error(`Docusaurus error: Duplicate values "${y.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const v=null===m?m:m??(null==(t=k.find((e=>e.props.default)))?void 0:t.props.value)??k[0].props.value;if(null!==v&&!f.some((e=>e.value===v)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${v}" but none of its children has the corresponding value. Available values are: ${f.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:g,setTabGroupChoices:w}=(0,s.U)(),[N,x]=(0,i.useState)(v),T=[],{blockElementScrollPositionUntilNextRender:C}=(0,c.o5)();if(null!=h){const e=g[h];null!=e&&e!==N&&f.some((t=>t.value===e))&&x(e)}const O=e=>{const t=e.currentTarget,n=T.indexOf(t),a=f[n].value;a!==N&&(C(t),x(a),null!=h&&w(h,String(a)))},I=e=>{var t;let n=null;switch(e.key){case"ArrowRight":{const t=T.indexOf(e.currentTarget)+1;n=T[t]??T[0];break}case"ArrowLeft":{const t=T.indexOf(e.currentTarget)-1;n=T[t]??T[T.length-1];break}}null==(t=n)||t.focus()};return i.createElement("div",{className:(0,r.Z)("tabs-container",d)},i.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.Z)("tabs",{"tabs--block":l},b)},f.map((e=>{let{value:t,label:n,attributes:l}=e;return i.createElement("li",(0,a.Z)({role:"tab",tabIndex:N===t?0:-1,"aria-selected":N===t,key:t,ref:e=>T.push(e),onKeyDown:I,onFocus:O,onClick:O},l,{className:(0,r.Z)("tabs__item",u,null==l?void 0:l.className,{"tabs__item--active":N===t})}),n??t)}))),n?(0,i.cloneElement)(k.filter((e=>e.props.value===N))[0],{className:"margin-top--md"}):i.createElement("div",{className:"margin-top--md"},k.map(((e,t)=>(0,i.cloneElement)(e,{key:t,hidden:e.props.value!==N})))))}function p(e){const t=(0,l.Z)();return i.createElement(m,(0,a.Z)({key:String(t)},e))}},31:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>s,default:()=>p,frontMatter:()=>o,metadata:()=>c,toc:()=>u});var a=n(83117),i=(n(67294),n(3905)),r=n(65488),l=n(85162);const o={sidebar_position:2,title:"4.2 Dynamic Conditions"},s=void 0,c={unversionedId:"showcase/where/dynamic-where",id:"showcase/where/dynamic-where",title:"4.2 Dynamic Conditions",description:"Using whereIf",source:"@site/docs/showcase/where/dynamic-where.mdx",sourceDirName:"showcase/where",slug:"/showcase/where/dynamic-where",permalink:"/jimmer-doc/docs/showcase/where/dynamic-where",draft:!1,editUrl:"https://github.com/babyfish-ct/jimmer-doc/tree/main/docs/showcase/where/dynamic-where.mdx",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2,title:"4.2 Dynamic Conditions"},sidebar:"tutorialSidebar",previous:{title:"4.1 Base Usage",permalink:"/jimmer-doc/docs/showcase/where/usage"},next:{title:"4.3 Associated Id",permalink:"/jimmer-doc/docs/showcase/where/associated-id"}},d={},u=[{value:"Using whereIf",id:"using-whereif",level:2},{value:"Using Dynamic Predicate",id:"using-dynamic-predicate",level:2},{value:"Comparison",id:"comparison",level:2}],m={toc:u};function p(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"using-whereif"},"Using whereIf"),(0,i.kt)(r.Z,{groupId:"language",mdxType:"Tabs"},(0,i.kt)(l.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"@Nullable String name = ...Omitted...;\n@Nullable Integer edition = ...Omitted...;\n\nBookTable table = BookTable.$;\nList<Book> books = sqlClient\n    .createQuery(table)\n    // highlight-next-line\n    .whereIf(\n        name != null && !name.isEmpty(), \n        () -> table.name().ilike(name)\n    )\n    // highlight-next-line\n    .whereIf(\n        edition != null, \n        table.edition().eq(edition)\n    )\n    .select(table)\n    .execute();\n"))),(0,i.kt)(l.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},"val name: String? = ...Omitted...\nval edition: Int? = ...Omitted...\n\nval books = sqlClient\n    .createQuery(Book::class) {\n        // highlight-next-line\n        name?.takeIf { it.isNotEmpty() }?.let {\n            where(table.name ilike it)\n        }\n        // highlight-next-line\n        edition?.let {\n            where(table.edition eq it)\n        }\n        select(table)\n    }\n    .execute()\n")))),(0,i.kt)("admonition",{type:"caution"},(0,i.kt)("p",{parentName:"admonition"},"In the Java code, the first whereIf uses a lambda to pass in the expression. "),(0,i.kt)("p",{parentName:"admonition"},"This is because in addition to ",(0,i.kt)("inlineCode",{parentName:"p"},"eq")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"ne")," which can accept null values ",(0,i.kt)("em",{parentName:"p"},"(translated to ",(0,i.kt)("inlineCode",{parentName:"em"},"is null")," and ",(0,i.kt)("inlineCode",{parentName:"em"},"is not null"),")"),",  "),(0,i.kt)("p",{parentName:"admonition"},"other conditions ",(0,i.kt)("em",{parentName:"p"},"(such as ",(0,i.kt)("inlineCode",{parentName:"em"},"ilike")," here)")," do not accept null and treats it as a bug made by developers. ")),(0,i.kt)("h2",{id:"using-dynamic-predicate"},"Using Dynamic Predicate"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"whereIf")," is not the only way to write dynamic queries. The above code can be replaced with another syntax."),(0,i.kt)(r.Z,{groupId:"language",mdxType:"Tabs"},(0,i.kt)(l.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"@Nullable String name = ...Omitted...;\n@Nullable Integer edition = ...Omitted...;\n\nBookTable table = BookTable.$;\nList<Book> books = sqlClient\n    .createQuery(table)\n    // highlight-next-line\n    .where(table.name().ilikeIf(name))\n    // highlight-next-line\n    .whereIf(table.edition().eqIf(edition))\n    .select(table)\n    .execute();\n"))),(0,i.kt)(l.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},"val name: String? = ...Omitted...\nval edition: Int? = ...Omitted...\n\nval books = sqlClient\n    .createQuery(Book::class) {\n        // highlight-next-line\n        where(table.name `ilike?` name)\n        // highlight-next-line\n        where(table.edition `eq?` edition)\n        select(table)\n    }\n    .execute()\n")))),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"Most SQL conditions ",(0,i.kt)("em",{parentName:"p"},"(such as ",(0,i.kt)("inlineCode",{parentName:"em"},"ilike")," here)")," do not accept null and treat it as a bug made by developers. ",(0,i.kt)("em",{parentName:"p"},"(",(0,i.kt)("inlineCode",{parentName:"em"},"eq")," and ",(0,i.kt)("inlineCode",{parentName:"em"},"ne")," are exceptions, as they render null as ",(0,i.kt)("inlineCode",{parentName:"em"},"is null")," and ",(0,i.kt)("inlineCode",{parentName:"em"},"not null"),")")),(0,i.kt)("p",{parentName:"admonition"},"However, dynamic predicates ",(0,i.kt)("em",{parentName:"p"},"(",(0,i.kt)("inlineCode",{parentName:"em"},"ilikeIf")," in Java and ",(0,i.kt)("inlineCode",{parentName:"em"},"ilike?")," in Kotlin)"),' are completely different, they accept null values and understand them as dynamic queries. That is, if the parameter is null or "", the current SQL condition is ignored. ')),(0,i.kt)("h2",{id:"comparison"},"Comparison"),(0,i.kt)("p",null,"Although ",(0,i.kt)("inlineCode",{parentName:"p"},"whereIf")," has good readability, dynamic predicates can adapt to more complex scenarios ",(0,i.kt)("em",{parentName:"p"},"(can be used in complex conditions, including multi-layer nested ",(0,i.kt)("inlineCode",{parentName:"em"},"and"),", ",(0,i.kt)("inlineCode",{parentName:"em"},"not"),", ",(0,i.kt)("inlineCode",{parentName:"em"},"or")," structures)"),". In the following text, we use dynamic predicates throughout."))}p.isMDXComponent=!0}}]);