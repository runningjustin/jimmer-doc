"use strict";(self.webpackChunkdocusaurus_code=self.webpackChunkdocusaurus_code||[]).push([[6966],{3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>d});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),p=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},m=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},c=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),c=p(n),d=a,h=c["".concat(s,".").concat(d)]||c[d]||u[d]||o;return n?r.createElement(h,i(i({ref:t},m),{},{components:n})):r.createElement(h,i({ref:t},m))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=c;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var p=2;p<o;p++)i[p]=n[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}c.displayName="MDXCreateElement"},85162:(e,t,n)=>{n.d(t,{Z:()=>i});var r=n(67294),a=n(34334);const o="tabItem_Ymn6";function i(e){let{children:t,hidden:n,className:i}=e;return r.createElement("div",{role:"tabpanel",className:(0,a.Z)(o,i),hidden:n},t)}},65488:(e,t,n)=>{n.d(t,{Z:()=>d});var r=n(83117),a=n(67294),o=n(34334),i=n(72389),l=n(67392),s=n(7094),p=n(12466);const m="tabList__CuJ",u="tabItem_LNqP";function c(e){var t;const{lazy:n,block:i,defaultValue:c,values:d,groupId:h,className:g}=e,k=a.Children.map(e.children,(e=>{if((0,a.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),f=d??k.map((e=>{let{props:{value:t,label:n,attributes:r}}=e;return{value:t,label:n,attributes:r}})),y=(0,l.l)(f,((e,t)=>e.value===t.value));if(y.length>0)throw new Error(`Docusaurus error: Duplicate values "${y.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const b=null===c?c:c??(null==(t=k.find((e=>e.props.default)))?void 0:t.props.value)??k[0].props.value;if(null!==b&&!f.some((e=>e.value===b)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${b}" but none of its children has the corresponding value. Available values are: ${f.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:v,setTabGroupChoices:N}=(0,s.U)(),[S,j]=(0,a.useState)(b),q=[],{blockElementScrollPositionUntilNextRender:x}=(0,p.o5)();if(null!=h){const e=v[h];null!=e&&e!==S&&f.some((t=>t.value===e))&&j(e)}const L=e=>{const t=e.currentTarget,n=q.indexOf(t),r=f[n].value;r!==S&&(x(t),j(r),null!=h&&N(h,String(r)))},E=e=>{var t;let n=null;switch(e.key){case"ArrowRight":{const t=q.indexOf(e.currentTarget)+1;n=q[t]??q[0];break}case"ArrowLeft":{const t=q.indexOf(e.currentTarget)-1;n=q[t]??q[q.length-1];break}}null==(t=n)||t.focus()};return a.createElement("div",{className:(0,o.Z)("tabs-container",m)},a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.Z)("tabs",{"tabs--block":i},g)},f.map((e=>{let{value:t,label:n,attributes:i}=e;return a.createElement("li",(0,r.Z)({role:"tab",tabIndex:S===t?0:-1,"aria-selected":S===t,key:t,ref:e=>q.push(e),onKeyDown:E,onFocus:L,onClick:L},i,{className:(0,o.Z)("tabs__item",u,null==i?void 0:i.className,{"tabs__item--active":S===t})}),n??t)}))),n?(0,a.cloneElement)(k.filter((e=>e.props.value===S))[0],{className:"margin-top--md"}):a.createElement("div",{className:"margin-top--md"},k.map(((e,t)=>(0,a.cloneElement)(e,{key:t,hidden:e.props.value!==S})))))}function d(e){const t=(0,i.Z)();return a.createElement(c,(0,r.Z)({key:String(t)},e))}},9619:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>m,contentTitle:()=>s,default:()=>d,frontMatter:()=>l,metadata:()=>p,toc:()=>u});var r=n(83117),a=(n(67294),n(3905)),o=n(65488),i=n(85162);const l={sidebar_position:2,title:"Query"},s=void 0,p={unversionedId:"graphql/query",id:"graphql/query",title:"Query",description:"Feature Description",source:"@site/docs/graphql/query.mdx",sourceDirName:"graphql",slug:"/graphql/query",permalink:"/jimmer-doc/docs/graphql/query",draft:!1,editUrl:"https://github.com/babyfish-ct/jimmer-doc/tree/main/docs/graphql/query.mdx",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2,title:"Query"},sidebar:"tutorialSidebar",previous:{title:"Basic Concepts",permalink:"/jimmer-doc/docs/graphql/concept"},next:{title:"Mutation",permalink:"/jimmer-doc/docs/graphql/mutation"}},m={},u=[{value:"Feature Description",id:"feature-description",level:2},{value:"Example Code",id:"example-code",level:2},{value:"Running Effect",id:"running-effect",level:2}],c={toc:u};function d(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"feature-description"},"Feature Description"),(0,a.kt)("p",null,"Without Jimmer's support, implementing GraphQL queries requires two types of work:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"Query aggregate roots"),(0,a.kt)("p",{parentName:"li"},"This is work that needs to be done when developing any data service, whether it's a GraphQL service, REST service, or even a service using other custom protocols."),(0,a.kt)("p",{parentName:"li"},"Developers only need to query and return standalone aggregate root objects without considering their association properties. So this is a relatively simple development task."),(0,a.kt)("p",{parentName:"li"},"For ",(0,a.kt)("a",{parentName:"p",href:"https://spring.io/projects/spring-graphql"},"Spring GraphQL"),", just add the ",(0,a.kt)("inlineCode",{parentName:"p"},"@QueryMapping")," annotation to the query methods in controller classes.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"Query association properties and calculated properties"),(0,a.kt)("p",{parentName:"li"},"This is the bulk of the work required to implement GraphQL queries, requiring consideration of all current object associations and batch loading. There is some workload involved."),(0,a.kt)("p",{parentName:"li"},"In other words, it is precisely because the server undertakes these responsibilities that using GraphQL feels free, convenient and powerful on the client side."),(0,a.kt)("p",{parentName:"li"},"For ",(0,a.kt)("a",{parentName:"p",href:"https://spring.io/projects/spring-graphql"},"Spring GraphQL"),", some schemes are provided for querying association properties, such as"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://docs.spring.io/spring-graphql/docs/current/reference/html/#controllers.schema-mapping"},"@SchemaMapping")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://docs.spring.io/spring-graphql/docs/current/reference/html/#execution.batching"},"Batch Loading")," "),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://docs.spring.io/spring-graphql/docs/current/reference/html/#controllers.batch-mapping"},"@BatchMapping"))))),(0,a.kt)("p",null,"When using Jimmer to implement GraphQL queries, developers only need to focus on querying aggregate roots, just ensuring that these aggregate roots have simple scalar fields. This is because"),(0,a.kt)("admonition",{type:"tip"},(0,a.kt)("p",{parentName:"admonition"},"All association properties and calculated properties of entity objects are automatically mapped to GraphQL fields by Jimmer without any development.")),(0,a.kt)("admonition",{type:"caution"},(0,a.kt)("p",{parentName:"admonition"},"So far, the GraphQL protocol does not support recursive queries for self-associated properties."),(0,a.kt)("p",{parentName:"admonition"},"Therefore, it is not possible to expose functionality like ",(0,a.kt)("a",{parentName:"p",href:"../query/object-fetcher/recursive"},"recursive queries in object fetchers")," through GraphQL. This is a functionality sacrifice that must currently be accepted when using GraphQL. ")),(0,a.kt)("h2",{id:"example-code"},"Example Code"),(0,a.kt)("p",null,"Jimmer automatically maps entity object association properties and calculated properties to GraphQL fields, so developers only need to implement queries for aggregate roots. The code is very simple, as follows:"),(0,a.kt)(o.Z,{groupId:"language",mdxType:"Tabs"},(0,a.kt)(i.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="BookStoreService.java"',title:'"BookStoreService.java"'},"package com.example.business;\n\nimport org.springframework.graphql.data.method.annotation.Argument;\n// highlight-next-line\nimport org.springframework.graphql.data.method.annotation.QueryMapping;\nimport org.springframework.stereotype.Controller;\n\n...other imports omitted...\n\n@Controller\npublic class BookStoreService {\n\n    private final BookStoreRepsitory bookStoreRepsitory;\n\n    public BookStoreService(BookStoreRepsitory bookStoreRepsitory) {\n        this.bookStoreRepsitory = bookStoreRepsitory;\n    }\n\n    // highlight-next-line\n    @QueryMapping\n    public List<BookStore> bookStores(\n            @Argument @Nullable String name\n    ) {\n        return bookStoreRepository.findByNameLikeOrderByName(name);\n    }\n}\n"))),(0,a.kt)(i.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-kotlin",metastring:'title="BookStoreService.kt"',title:'"BookStoreService.kt"'},"package com.example.business\n\nimport org.springframework.graphql.data.method.annotation.Argument\n// highlight-next-line\nimport org.springframework.graphql.data.method.annotation.QueryMapping\nimport org.springframework.stereotype.Controller\n\n...other imports omitted...\n\n@Controller\nclass BookStoreService(\n    private val bookStoreRepository: BookStoreRepsitory\n) {\n\n    // highlight-next-line\n    @QueryMapping\n    fun bookStores(\n        @Argument name: String?\n    ): List<BookStore> {\n        return bookStoreRepository.findByNameLikeOrderByName(name)\n    }\n}\n")))),(0,a.kt)("p",null,"Where ",(0,a.kt)("inlineCode",{parentName:"p"},"BookStoreRepository")," is defined as follows:"),(0,a.kt)(o.Z,{groupId:"language",mdxType:"Tabs"},(0,a.kt)(i.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="BookStoreRepository.java"',title:'"BookStoreRepository.java"'},"public interface BookStoreRepository extends JRepository<BookStore, Long> {\n\n    List<BookStore> findByNameLikeOrderByName(@Nullable String name);\n}\n"))),(0,a.kt)(i.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-kotlin",metastring:'title="BookStoreRepository.kt"',title:'"BookStoreRepository.kt"'},"interface BookStoreRepository : KRepository<BookStore, Long> {\n\n    fun findByNameLikeOrderByName(name: String?): List<BookStore>\n}\n")))),(0,a.kt)("p",null,"Unlike previous REST services, this example does ",(0,a.kt)("strong",{parentName:"p"},"not")," use ",(0,a.kt)("a",{parentName:"p",href:"../query/object-fetcher"},"object fetchers")," and simply returns the simplest standalone objects, which contain neither association properties nor calculated properties."),(0,a.kt)("p",null,"Here, ",(0,a.kt)("inlineCode",{parentName:"p"},"BookStoreRepository.findByNameLikeOrderByName")," is an abstract method. If declarative queries are used, use the simplest ",(0,a.kt)("inlineCode",{parentName:"p"},"select(table)")," rather than ",(0,a.kt)("inlineCode",{parentName:"p"},"select(table.fetch(...))"),". "),(0,a.kt)("admonition",{type:"tip"},(0,a.kt)("p",{parentName:"admonition"},"When using Jimmer to implement GraphQL, ",(0,a.kt)("a",{parentName:"p",href:"../query/object-fetcher"},"object fetchers")," are replaced by GraphQL mechanisms."),(0,a.kt)("p",{parentName:"admonition"},"Therefore, do ",(0,a.kt)("strong",{parentName:"p"},"NOT")," use object fetchers, just return simple objects directly.")),(0,a.kt)("h2",{id:"running-effect"},"Running Effect"),(0,a.kt)("p",null,"In the accompanying example, the GraphQL related projects are:"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Language"),(0,a.kt)("th",{parentName:"tr",align:null},"Example"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"Java"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"https://github.com/babyfish-ct/jimmer/tree/main/example/java/jimmer-sql-graphql"},"example/java/jimmer-sql-graphql"))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"Kotlin"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"https://github.com/babyfish-ct/jimmer/tree/main/example/kotlin/jimmer-sql-graphql-kt"},"example/kotlin/jimmer-sql-graphql-kt"))))),(0,a.kt)("p",null,"Select any project, open and start it. Finally, use the browser to visit http://localhost:8080/graphiql"),(0,a.kt)("admonition",{type:"note"},(0,a.kt)("p",{parentName:"admonition"},"Be careful, it's /graph",(0,a.kt)("strong",{parentName:"p"},"i"),"ql, not /graphql")),(0,a.kt)("p",null,"Execute the request:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"query {\n  bookStores {\n    id\n    name\n    avgPrice \u2776\n    books { \u2777\n      id\n      name\n      edition\n      price\n      authors { \u2778\n        id\n        firstName\n        fullName\n        gender\n      }\n    }\n  }\n}\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"\u2776 Query calculated property ",(0,a.kt)("inlineCode",{parentName:"p"},"BookStore.avgPrice"))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"\u2777 Query association property ",(0,a.kt)("inlineCode",{parentName:"p"},"BookStore.books")," ")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"\u2778 Query association property ",(0,a.kt)("inlineCode",{parentName:"p"},"Book.authors")))),(0,a.kt)("p",null,"The return result is:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "data":{\n        "bookStores":[\n            {\n                "id":2,\n                "name":"MANNING",\n                // highlight-next-line\n                "avgPrice":80.333333,\n                // highlight-next-line\n                "books":[\n                    {\n                        "id":10,\n                        "name":"GraphQL in Action",\n                        "edition":1,\n                        "price":80,\n                        // highlight-next-line\n                        "authors":[\n                            {\n                                "id":5,\n                                "firstName":"Samer",\n                                "fullName":"Samer Buna",\n                                "gender":"MALE"\n                            }\n                        ]\n                    },\n                    {\n                        "id":11,\n                        ...omitted...  \n                    },\n                    {\n                        "id":12,\n                        ...omitted...\n                    }\n                ]\n            },\n            {\n                "id":1,\n                "name":"O\'REILLY",\n                // highlight-next-line\n                "avgPrice":58.5,\n                // highlight-next-line\n                "books":[\n                    {\n                        "id":4,\n                        "name":"Effective TypeScript",\n                        "edition":1,\n                        "price":73,\n                        // highlight-next-line\n                        "authors":[\n                            {\n                                "id":3,\n                                "firstName":"Dan",\n                                "fullName":"Dan Vanderkam",\n                                "gender":"MALE"\n                            }\n                        ]\n                    },\n                    {\n                        "id":5,\n                        ...omitted...\n                    },\n                    {\n                        "id":6,\n                        ...omitted...\n                    },\n                    {\n                        "id":1,\n                        "name":"Learning GraphQL",\n                        "edition":1,\n                        "price":50,\n                        "authors":[\n                            {\n                                "id":2,\n                                "firstName":"Alex",\n                                "fullName":"Alex Banks",\n                                "gender":"MALE"\n                            },\n                            {\n                                "id":1,\n                                "firstName":"Eve",\n                                "fullName":"Eve Procello",\n                                "gender":"FEMALE"\n                            }\n                        ]\n                    },\n                    {\n                        "id":2,\n                        "name":"Learning GraphQL",\n                        "edition":2,\n                        "price":55,\n                        "authors":[\n                            {\n                                "id":2,\n                                "firstName":"Alex",\n                                "fullName":"Alex Banks",\n                                "gender":"MALE"\n                            },\n                            {\n                                "id":1,\n                                "firstName":"Eve",\n                                "fullName":"Eve Procello",\n                                "gender":"FEMALE"\n                            }\n                        ]\n                    },\n                    {\n                        "id":3,\n                        "name":"Learning GraphQL",\n                        "edition":3,\n                        "price":51,\n                        "authors":[\n                            {\n                                "id":2,\n                                "firstName":"Alex",\n                                "fullName":"Alex Banks",\n                                "gender":"MALE"\n                            },\n                            {\n                                "id":1,\n                                "firstName":"Eve",\n                                "fullName":"Eve Procello",\n                                "gender":"FEMALE"\n                            }\n                        ]\n                    },\n                    {\n                        "id":7,\n                        "name":"Programming TypeScript",\n                        "edition":1,\n                        "price":47.5,\n                        "authors":[\n                            {\n                                "id":4,\n                                "firstName":"Boris",\n                                "fullName":"Boris Cherny",\n                                "gender":"MALE"\n                            }\n                        ]\n                    },\n                    {\n                        "id":8,\n                        "name":"Programming TypeScript",\n                        "edition":2,\n                        "price":45,\n                        "authors":[\n                            {\n                                "id":4,\n                                "firstName":"Boris",\n                                "fullName":"Boris Cherny",\n                                "gender":"MALE"\n                            }\n                        ]\n                    },\n                    {\n                        "id":9,\n                        "name":"Programming TypeScript",\n                        "edition":3,\n                        "price":48,\n                        "authors":[\n                            {\n                                "id":4,\n                                "firstName":"Boris",\n                                "fullName":"Boris Cherny",\n                                "gender":"MALE"\n                            }\n                        ]\n                    }\n                ]\n            }\n        ]\n    }\n}\n')),(0,a.kt)("p",null,"It is easy to see that the execution effect of GraphQL is very similar to that of ",(0,a.kt)("a",{parentName:"p",href:"../query/object-fetcher"},"object fetchers"),'. This is also the reason for the earlier statement "object fetchers are replaced by GraphQL, do not use object fetchers".'),(0,a.kt)("admonition",{type:"tip"},(0,a.kt)("p",{parentName:"admonition"},"In fact, ",(0,a.kt)("a",{parentName:"p",href:"../query/object-fetcher"},"object fetchers"),", which are very useful in non-GraphQL modes, are themselves the result of GraphQLization of ORM frameworks.")))}d.isMDXComponent=!0}}]);