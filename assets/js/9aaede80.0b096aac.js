"use strict";(self.webpackChunkdocusaurus_code=self.webpackChunkdocusaurus_code||[]).push([[4506],{3905:(e,t,r)=>{r.d(t,{Zo:()=>d,kt:()=>m});var n=r(67294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var s=n.createContext({}),c=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},d=function(e){var t=c(e.components);return n.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),u=c(r),m=a,b=u["".concat(s,".").concat(m)]||u[m]||p[m]||o;return r?n.createElement(b,i(i({ref:t},d),{},{components:r})):n.createElement(b,i({ref:t},d))}));function m(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,i=new Array(o);i[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var c=2;c<o;c++)i[c]=r[c];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}u.displayName="MDXCreateElement"},85162:(e,t,r)=>{r.d(t,{Z:()=>i});var n=r(67294),a=r(34334);const o="tabItem_Ymn6";function i(e){let{children:t,hidden:r,className:i}=e;return n.createElement("div",{role:"tabpanel",className:(0,a.Z)(o,i),hidden:r},t)}},65488:(e,t,r)=>{r.d(t,{Z:()=>m});var n=r(83117),a=r(67294),o=r(34334),i=r(72389),l=r(67392),s=r(7094),c=r(12466);const d="tabList__CuJ",p="tabItem_LNqP";function u(e){var t;const{lazy:r,block:i,defaultValue:u,values:m,groupId:b,className:g}=e,y=a.Children.map(e.children,(e=>{if((0,a.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),h=m??y.map((e=>{let{props:{value:t,label:r,attributes:n}}=e;return{value:t,label:r,attributes:n}})),k=(0,l.l)(h,((e,t)=>e.value===t.value));if(k.length>0)throw new Error(`Docusaurus error: Duplicate values "${k.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const f=null===u?u:u??(null==(t=y.find((e=>e.props.default)))?void 0:t.props.value)??y[0].props.value;if(null!==f&&!h.some((e=>e.value===f)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${f}" but none of its children has the corresponding value. Available values are: ${h.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:v,setTabGroupChoices:w}=(0,s.U)(),[j,N]=(0,a.useState)(f),T=[],{blockElementScrollPositionUntilNextRender:S}=(0,c.o5)();if(null!=b){const e=v[b];null!=e&&e!==j&&h.some((t=>t.value===e))&&N(e)}const O=e=>{const t=e.currentTarget,r=T.indexOf(t),n=h[r].value;n!==j&&(S(t),N(n),null!=b&&w(b,String(n)))},C=e=>{var t;let r=null;switch(e.key){case"ArrowRight":{const t=T.indexOf(e.currentTarget)+1;r=T[t]??T[0];break}case"ArrowLeft":{const t=T.indexOf(e.currentTarget)-1;r=T[t]??T[T.length-1];break}}null==(t=r)||t.focus()};return a.createElement("div",{className:(0,o.Z)("tabs-container",d)},a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.Z)("tabs",{"tabs--block":i},g)},h.map((e=>{let{value:t,label:r,attributes:i}=e;return a.createElement("li",(0,n.Z)({role:"tab",tabIndex:j===t?0:-1,"aria-selected":j===t,key:t,ref:e=>T.push(e),onKeyDown:C,onFocus:O,onClick:O},i,{className:(0,o.Z)("tabs__item",p,null==i?void 0:i.className,{"tabs__item--active":j===t})}),r??t)}))),r?(0,a.cloneElement)(y.filter((e=>e.props.value===j))[0],{className:"margin-top--md"}):a.createElement("div",{className:"margin-top--md"},y.map(((e,t)=>(0,a.cloneElement)(e,{key:t,hidden:e.props.value!==j})))))}function m(e){const t=(0,i.Z)();return a.createElement(u,(0,n.Z)({key:String(t)},e))}},38330:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>d,contentTitle:()=>s,default:()=>m,frontMatter:()=>l,metadata:()=>c,toc:()=>p});var n=r(83117),a=(r(67294),r(3905)),o=r(65488),i=r(85162);const l={sidebar_position:2,title:"5.2 Dynamic Sorting"},s=void 0,c={unversionedId:"showcase/order-by/dynamic",id:"showcase/order-by/dynamic",title:"5.2 Dynamic Sorting",description:"Dynamic sorting refers to the sorting method being dynamically specified by the client.",source:"@site/docs/showcase/order-by/dynamic.mdx",sourceDirName:"showcase/order-by",slug:"/showcase/order-by/dynamic",permalink:"/jimmer-doc/docs/showcase/order-by/dynamic",draft:!1,editUrl:"https://github.com/babyfish-ct/jimmer-doc/tree/main/docs/showcase/order-by/dynamic.mdx",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2,title:"5.2 Dynamic Sorting"},sidebar:"tutorialSidebar",previous:{title:"5.1 Basic Usage",permalink:"/jimmer-doc/docs/showcase/order-by/usage"},next:{title:"6. Paging Query",permalink:"/jimmer-doc/docs/showcase/page"}},d={},p=[{value:"Use Strings Directly",id:"use-strings-directly",level:2},{value:"Transfer via Spring Sort",id:"transfer-via-spring-sort",level:2},{value:"I. Convert string to <code>Sort</code> Object",id:"i-convert-string-to-sort-object",level:3},{value:"II. Sort using Sort object",id:"ii-sort-using-sort-object",level:3}],u={toc:p};function m(e){let{components:t,...r}=e;return(0,a.kt)("wrapper",(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Dynamic sorting refers to the sorting method being dynamically specified by the client."),(0,a.kt)("h2",{id:"use-strings-directly"},"Use Strings Directly"),(0,a.kt)("p",null,"The simplest way for the client to specify sorting is strings. "),(0,a.kt)("p",null,"The string formats supported by Jimmer are as follows:"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"store.name asc, name asc, edition desc"),"\nor\n",(0,a.kt)("inlineCode",{parentName:"p"},"store.name asc; name asc; edition desc")),(0,a.kt)("p",null,"Where ",(0,a.kt)("inlineCode",{parentName:"p"},"store.name")," means first inner join the associated object ",(0,a.kt)("inlineCode",{parentName:"p"},"BookStore")," through the ",(0,a.kt)("inlineCode",{parentName:"p"},"Book.store")," property, and then sort by the ",(0,a.kt)("inlineCode",{parentName:"p"},"name")," property of the associated object. "),(0,a.kt)("p",null,"The path length is unlimited, but the association type along the way needs to be one-to-one or many-to-one."),(0,a.kt)(o.Z,{groupId:"language",mdxType:"Tabs"},(0,a.kt)(i.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"String sortCode = ...Omitted...;\n\nBookTable table = BookTable.$;\nList<Book> books = sqlClient\n    .createQuery(table)\n    // highlight-next-line\n    .orderBy(Order.makeOrders(table, sortCode))\n    .select(table)\n    .execute();\n"))),(0,a.kt)(i.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-kotlin"},"val sortCode: String = ...Omitted...\n\nval books = sqlClient\n    .createQuery(Book::class) {\n        // highlight-next-line\n        orderBy(table.makeOrders(sortCode))\n        select(table)\n    }\n    .execute()\n")))),(0,a.kt)("h2",{id:"transfer-via-spring-sort"},"Transfer via Spring Sort"),(0,a.kt)("p",null,"Sometimes, when developing in combination with Spring Data, ",(0,a.kt)("inlineCode",{parentName:"p"},"org.springframework.data.domain.Sort")," may be used to represent dynamic sorting."),(0,a.kt)("p",null,"At this point, developers need to perform two steps:"),(0,a.kt)("h3",{id:"i-convert-string-to-sort-object"},"I. Convert string to ",(0,a.kt)("inlineCode",{parentName:"h3"},"Sort")," Object"),(0,a.kt)("p",null,"The easiest uploading way for the client is still the string discussed earlier, like\n",(0,a.kt)("inlineCode",{parentName:"p"},"store.name asc, name asc, edition desc")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"store.name asc; name asc; edition desc"),"."),(0,a.kt)("p",null,"Therefore, first the string needs to be converted to the ",(0,a.kt)("inlineCode",{parentName:"p"},"org.springframework.data.domain.Sort")," object."),(0,a.kt)("p",null,"After importing the dependency ",(0,a.kt)("inlineCode",{parentName:"p"},"org.babyfish.jimmer:jimmer-spring-boot-starter:$version"),", the static method\n",(0,a.kt)("inlineCode",{parentName:"p"},"org.babyfish.jimmer.spring.model.SortUtils.toSort")," can then be used, as follows:"),(0,a.kt)(o.Z,{groupId:"language",mdxType:"Tabs"},(0,a.kt)(i.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"String sortCode = ...Omitted...;\nSort sort = SortUtils.toSort(sortCode);\n"))),(0,a.kt)(i.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-kotlin"},"val sortCode: String = ...Omitted...\nval sort = SortUtils.toSort(sortCode)\n")))),(0,a.kt)("h3",{id:"ii-sort-using-sort-object"},"II. Sort using Sort object"),(0,a.kt)("p",null,"After importing the dependency ",(0,a.kt)("inlineCode",{parentName:"p"},"org.babyfish.jimmer:jimmer-spring-boot-starter:$version"),":"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"Java: Use the utility method ",(0,a.kt)("inlineCode",{parentName:"p"},"org.babyfish.jimmer.spring.repository.SpringOrders.toOrders")," to convert the ",(0,a.kt)("inlineCode",{parentName:"p"},"org.springframework.data.domain.Sort")," object into a collection of ordering objects accepted by Jimmer. ")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"Kotlin: Directly use the ",(0,a.kt)("inlineCode",{parentName:"p"},"orderBy")," extension function that accepts ",(0,a.kt)("inlineCode",{parentName:"p"},"org.springframework.data.domain.Sort")," object."))),(0,a.kt)(o.Z,{groupId:"language",mdxType:"Tabs"},(0,a.kt)(i.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"org.springframework.data.domain.Sort sort = ...Omitted...;\n\nBookTable table = BookTable.$;\nList<Book> books = sqlClient\n    .createQuery(table)\n    // highlight-next-line\n    .orderBy(SpringOrders.toOrders(table, sort))\n    .select(table)\n    .execute();\n"))),(0,a.kt)(i.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-kotlin"},"val sort: org.springframework.data.domain.Sort = ...Omitted...\n\nval books = sqlClient\n    .createQuery(Book::class) {\n        // highlight-next-line\n        orderBy(sort)\n        select(table)\n    }\n    .execute()\n")))))}m.isMDXComponent=!0}}]);