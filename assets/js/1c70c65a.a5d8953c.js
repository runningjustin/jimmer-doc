"use strict";(self.webpackChunkdocusaurus_code=self.webpackChunkdocusaurus_code||[]).push([[9710],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>y});var a=t(67294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var p=a.createContext({}),s=function(e){var n=a.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},u=function(e){var n=s(e.components);return a.createElement(p.Provider,{value:n},e.children)},m={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},c=a.forwardRef((function(e,n){var t=e.components,i=e.mdxType,o=e.originalType,p=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),c=s(t),y=i,d=c["".concat(p,".").concat(y)]||c[y]||m[y]||o;return t?a.createElement(d,r(r({ref:n},u),{},{components:t})):a.createElement(d,r({ref:n},u))}));function y(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var o=t.length,r=new Array(o);r[0]=c;var l={};for(var p in n)hasOwnProperty.call(n,p)&&(l[p]=n[p]);l.originalType=e,l.mdxType="string"==typeof e?e:i,r[1]=l;for(var s=2;s<o;s++)r[s]=t[s];return a.createElement.apply(null,r)}return a.createElement.apply(null,t)}c.displayName="MDXCreateElement"},85162:(e,n,t)=>{t.d(n,{Z:()=>r});var a=t(67294),i=t(34334);const o="tabItem_Ymn6";function r(e){let{children:n,hidden:t,className:r}=e;return a.createElement("div",{role:"tabpanel",className:(0,i.Z)(o,r),hidden:t},n)}},65488:(e,n,t)=>{t.d(n,{Z:()=>y});var a=t(83117),i=t(67294),o=t(34334),r=t(72389),l=t(67392),p=t(7094),s=t(12466);const u="tabList__CuJ",m="tabItem_LNqP";function c(e){var n;const{lazy:t,block:r,defaultValue:c,values:y,groupId:d,className:k}=e,g=i.Children.map(e.children,(e=>{if((0,i.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),f=y??g.map((e=>{let{props:{value:n,label:t,attributes:a}}=e;return{value:n,label:t,attributes:a}})),h=(0,l.l)(f,((e,n)=>e.value===n.value));if(h.length>0)throw new Error(`Docusaurus error: Duplicate values "${h.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const b=null===c?c:c??(null==(n=g.find((e=>e.props.default)))?void 0:n.props.value)??g[0].props.value;if(null!==b&&!f.some((e=>e.value===b)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${b}" but none of its children has the corresponding value. Available values are: ${f.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:v,setTabGroupChoices:N}=(0,p.U)(),[T,x]=(0,i.useState)(b),C=[],{blockElementScrollPositionUntilNextRender:j}=(0,s.o5)();if(null!=d){const e=v[d];null!=e&&e!==T&&f.some((n=>n.value===e))&&x(e)}const E=e=>{const n=e.currentTarget,t=C.indexOf(n),a=f[t].value;a!==T&&(j(n),x(a),null!=d&&N(d,String(a)))},O=e=>{var n;let t=null;switch(e.key){case"ArrowRight":{const n=C.indexOf(e.currentTarget)+1;t=C[n]??C[0];break}case"ArrowLeft":{const n=C.indexOf(e.currentTarget)-1;t=C[n]??C[C.length-1];break}}null==(n=t)||n.focus()};return i.createElement("div",{className:(0,o.Z)("tabs-container",u)},i.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.Z)("tabs",{"tabs--block":r},k)},f.map((e=>{let{value:n,label:t,attributes:r}=e;return i.createElement("li",(0,a.Z)({role:"tab",tabIndex:T===n?0:-1,"aria-selected":T===n,key:n,ref:e=>C.push(e),onKeyDown:O,onFocus:E,onClick:E},r,{className:(0,o.Z)("tabs__item",m,null==r?void 0:r.className,{"tabs__item--active":T===n})}),t??n)}))),t?(0,i.cloneElement)(g.filter((e=>e.props.value===T))[0],{className:"margin-top--md"}):i.createElement("div",{className:"margin-top--md"},g.map(((e,n)=>(0,i.cloneElement)(e,{key:n,hidden:e.props.value!==T})))))}function y(e){const n=(0,r.Z)();return i.createElement(c,(0,a.Z)({key:String(n)},e))}},64215:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>u,contentTitle:()=>p,default:()=>y,frontMatter:()=>l,metadata:()=>s,toc:()=>m});var a=t(83117),i=(t(67294),t(3905)),o=t(65488),r=t(85162);const l={sidebar_position:5,title:"Real and Fake Foreign Keys"},p=void 0,s={unversionedId:"mapping/base/foreignkey",id:"mapping/base/foreignkey",title:"Real and Fake Foreign Keys",description:"Through the discussion of Association Mapping, we know that association mapping requires a lot of foreign keys.",source:"@site/docs/mapping/base/foreignkey.mdx",sourceDirName:"mapping/base",slug:"/mapping/base/foreignkey",permalink:"/jimmer-doc/docs/mapping/base/foreignkey",draft:!1,editUrl:"https://github.com/babyfish-ct/jimmer-doc/tree/main/docs/mapping/base/foreignkey.mdx",tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5,title:"Real and Fake Foreign Keys"},sidebar:"tutorialSidebar",previous:{title:"Naming Strategy",permalink:"/jimmer-doc/docs/mapping/base/naming-strategy"},next:{title:"Advanced mapping",permalink:"/jimmer-doc/docs/mapping/advanced/"}},u={},m=[{value:"Explicitly specify real foreign key",id:"explicitly-specify-real-foreign-key",level:2},{value:"Explicitly specify fake foreign key",id:"explicitly-specify-fake-foreign-key",level:2},{value:"Do not explicitly specify the authenticity of foreign keys",id:"do-not-explicitly-specify-the-authenticity-of-foreign-keys",level:2}],c={toc:m};function y(e){let{components:n,...t}=e;return(0,i.kt)("wrapper",(0,a.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Through the discussion of ",(0,i.kt)("a",{parentName:"p",href:"./association"},"Association Mapping"),", we know that association mapping requires a lot of foreign keys."),(0,i.kt)("p",null,"There are two types of foreign keys in Jimmer:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Real foreign key:"),(0,i.kt)("p",{parentName:"li"},"  There is a corresponding foreign key constraint in the database.\n")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Fake foreign key:"),(0,i.kt)("p",{parentName:"li"},"  It is a foreign key in the developer's mind, but there is no corresponding foreign key constraint in the database."))),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("p",{parentName:"admonition"},"When saving data:"),(0,i.kt)("ul",{parentName:"admonition"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Real foreign keys rely on the ability of relational databases themselves to ensure referential integrity.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Fake foreign keys rely on additional checks inserted by the ORM in the upper layer code to ensure referential integrity."))),(0,i.kt)("p",{parentName:"admonition"},"This difference is transparent to the user. The user only needs to configure the authenticity of the foreign key without modifying the business code.")),(0,i.kt)("h2",{id:"explicitly-specify-real-foreign-key"},"Explicitly specify real foreign key"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Association property based on foreign key"),(0,i.kt)(o.Z,{groupId:"language",mdxType:"Tabs"},(0,i.kt)(r.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="Book.java"',title:'"Book.java"'},"@Entity\npublic interface Book {\n\n    @ManyToOne  \n    // highlight-next-line\n    @JoinColumn(foreignKeyType = ForeignKeyType.REAL)\n    BookStore store();\n\n    ...Omit other code...\n}\n"))),(0,i.kt)(r.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-kotlin",metastring:'title="Book.kt"',title:'"Book.kt"'},"@Entity\ninterface Book {\n    \n    @ManyToOne\n    // highlight-next-line  \n    @JoinColumn(foreignKeyType = ForeignKeyType.REAL)\n    val store: BookStore\n\n    ...Omit other code...\n}\n"))))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Association property based on join table"),(0,i.kt)(o.Z,{groupId:"language",mdxType:"Tabs"},(0,i.kt)(r.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="Book.java"',title:'"Book.java"'},"@Entity\npublic interface Book {\n\n    @ManyToMany\n    @JoinTable(\n        // highlight-next-line\n        joinColumns = @JoinColumn(foreignKeyType = ForeignKeyType.REAL),\n        // highlight-next-line\n        inverseJoinColumns = @JoinColumn(foreignKeyType = ForeignKeyType.REAL)\n    )\n    List<Author> authors();\n\n    ...Omit other code...\n}\n"))),(0,i.kt)(r.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-kotlin",metastring:'title="Book.kt"',title:'"Book.kt"'},"@Entity\ninterface Book {\n    \n    @ManyToMany\n    // highlight-next-line\n    @JoinTable(\n        // highlight-next-line\n        joinColumns = @JoinColumn(foreignKeyType = ForeignKeyType.REAL),\n        // highlight-next-line\n        inverseJoinColumns = @JoinColumn(foreignKeyType = ForeignKeyType.REAL)\n    )\n    val authors: List<Author>\n    \n    ...Omit other code...\n}\n")))),(0,i.kt)("p",{parentName:"li"},"  :::info",(0,i.kt)("br",{parentName:"p"}),"\n","Different from previous examples:"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Configure ",(0,i.kt)("inlineCode",{parentName:"p"},"JoinTable.joinColumns")," instead of ",(0,i.kt)("inlineCode",{parentName:"p"},"JoinTable.joinColumnName")),(0,i.kt)("p",{parentName:"li"},"If the foreign key has only one column and the authenticity does not need to be explicitly specified, ",(0,i.kt)("inlineCode",{parentName:"p"},"joinColumnName")," is a simplified configuration. Otherwise, ",(0,i.kt)("inlineCode",{parentName:"p"},"joinColumns")," should be used.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Configure ",(0,i.kt)("inlineCode",{parentName:"p"},"JoinTable.inverseJoinColumns")," instead of ",(0,i.kt)("inlineCode",{parentName:"p"},"JoinTable.inverseColumnName")," "),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"If the foreign key has only one column and the authenticity does not need to be explicitly specified, `inverseColumnName` is a simplified configuration. Otherwise, `inverseJoinColumns` should be used.\n")),(0,i.kt)("p",{parentName:"li"},":::"))))),(0,i.kt)("admonition",{type:"caution"},(0,i.kt)("p",{parentName:"admonition"},"If the database dialect does not support foreign keys (e.g. ",(0,i.kt)("inlineCode",{parentName:"p"},"org.babyfish.jimmer.sql.dialect.TiDBDialect"),"), real foreign keys cannot be explicitly specified. "),(0,i.kt)("p",{parentName:"admonition"},"This is because TiDB, as a distributed relational database, does not support foreign key constraints.")),(0,i.kt)("h2",{id:"explicitly-specify-fake-foreign-key"},"Explicitly specify fake foreign key"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Association property based on foreign key"),(0,i.kt)(o.Z,{groupId:"language",mdxType:"Tabs"},(0,i.kt)(r.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="Book.java"',title:'"Book.java"'},"@Entity\npublic interface Book {\n\n    @ManyToOne\n    @Nullable\n    // highlight-next-line\n    @JoinColumn(foreignKeyType = ForeignKeyType.FAKE)\n    BookStore store();\n\n    ...Omit other code...\n}\n"))),(0,i.kt)(r.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-kotlin",metastring:'title="Book.kt"',title:'"Book.kt"'},"@Entity\ninterface Book {\n    \n    @ManyToOne\n    // highlight-next-line\n    @JoinColumn(foreignKeyType = ForeignKeyType.FAKE)\n    val store: BookStore?\n\n    ...Omit other code...\n}\n"))))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Association property based on join table"),(0,i.kt)(o.Z,{groupId:"language",mdxType:"Tabs"},(0,i.kt)(r.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="Book.java"',title:'"Book.java"'},"@Entity\npublic interface Book {\n\n    @ManyToMany\n    @JoinTable(\n        // highlight-next-line\n        joinColumns = @JoinColumn(foreignKeyType = ForeignKeyType.FAKE),\n        // highlight-next-line\n        inverseJoinColumns = @JoinColumn(foreignKeyType = ForeignKeyType.FAKE)\n    )\n    List<Author> authors();\n\n    ...Omit other code...\n}\n"))),(0,i.kt)(r.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-kotlin",metastring:'title="Book.kt"',title:'"Book.kt"'},"@Entity\ninterface Book {\n    \n    @ManyToMany\n    // highlight-next-line\n    @JoinTable(\n        // highlight-next-line\n        joinColumns = @JoinColumn(foreignKeyType = ForeignKeyType.FAKE),\n        // highlight-next-line\n        inverseJoinColumns = @JoinColumn(foreignKeyType = ForeignKeyType.FAKE)\n    )\n    val authors: List<Author>\n    \n    ...Omit other code...\n}\n")))))),(0,i.kt)("h2",{id:"do-not-explicitly-specify-the-authenticity-of-foreign-keys"},"Do not explicitly specify the authenticity of foreign keys"),(0,i.kt)("p",null,"To avoid explicitly specifying the authenticity of foreign keys, use ",(0,i.kt)("inlineCode",{parentName:"p"},"@JoinColumn(foreignKeyType = ForeignKeyType.AUTO)"),"."),(0,i.kt)("p",null,"Since ",(0,i.kt)("inlineCode",{parentName:"p"},"ForeignKeyType.AUTO")," is the default configuration for the ",(0,i.kt)("inlineCode",{parentName:"p"},"@JoinColumn")," annotation, an even better choice is to make no configuration at all."),(0,i.kt)("p",null,"Therefore, the code is no different from the sample code in ",(0,i.kt)("a",{parentName:"p",href:"./association"},"Association Mapping"),", so there is no need for sample code here."),(0,i.kt)("p",null,"If the authenticity of the foreign key is not explicitly specified, whether the foreign key is real or fake is automatically determined by the following two steps:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"If the database dialect does not support foreign keys (e.g. ",(0,i.kt)("inlineCode",{parentName:"p"},"org.babyfish.jimmer.sql.dialect.TiDBDialect"),"), it is determined to be a fake foreign key."),(0,i.kt)("p",{parentName:"li"},"At this point, the judgment is completed and it returns early without executing step 2.")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"If step 1 cannot complete the determination, check Jimmer's global configuration ",(0,i.kt)("inlineCode",{parentName:"p"},"foreign-key-enabled-by-default"),"."),(0,i.kt)("p",{parentName:"li"},"If this configuration is true, it is determined to be a real foreign key; otherwise, it is determined to be a fake foreign key."),(0,i.kt)("p",{parentName:"li"},"The default value of this configuration is true. Users can override it to false:"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"When using SpringBoot"),(0,i.kt)("p",{parentName:"li"},"  Modify ",(0,i.kt)("inlineCode",{parentName:"p"},"application.yml")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"application.properties")," and set ",(0,i.kt)("inlineCode",{parentName:"p"},"jimmer.foreign-key-enabled-by-default")," to false")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"When not using SpringBoot"),(0,i.kt)(o.Z,{groupId:"language",mdxType:"Tabs"},(0,i.kt)(r.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-java"},"JSqlClient sqlClient = JSqlClient\n    .newBuilder()\n    // highlight-next-line\n    .setForeignKeyEnabledByDefault(false)\n    ...Omit other configurations...\n    .build();\n"))),(0,i.kt)(r.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},"val sqlClient = newKSqlClient {\n    // highlight-next-line\n    setForeignKeyEnabledByDefault(false)\n    ...Omit other configurations...\n}\n")))))))))}y.isMDXComponent=!0}}]);