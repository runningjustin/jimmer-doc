"use strict";(self.webpackChunkdocusaurus_code=self.webpackChunkdocusaurus_code||[]).push([[5968],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>d});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=a.createContext({}),u=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},s=function(e){var t=u(e.components);return a.createElement(p.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,p=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),m=u(n),d=r,y=m["".concat(p,".").concat(d)]||m[d]||c[d]||i;return n?a.createElement(y,o(o({ref:t},s),{},{components:n})):a.createElement(y,o({ref:t},s))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=m;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l.mdxType="string"==typeof e?e:r,o[1]=l;for(var u=2;u<i;u++)o[u]=n[u];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},85162:(e,t,n)=>{n.d(t,{Z:()=>o});var a=n(67294),r=n(34334);const i="tabItem_Ymn6";function o(e){let{children:t,hidden:n,className:o}=e;return a.createElement("div",{role:"tabpanel",className:(0,r.Z)(i,o),hidden:n},t)}},65488:(e,t,n)=>{n.d(t,{Z:()=>d});var a=n(83117),r=n(67294),i=n(34334),o=n(72389),l=n(67392),p=n(7094),u=n(12466);const s="tabList__CuJ",c="tabItem_LNqP";function m(e){var t;const{lazy:n,block:o,defaultValue:m,values:d,groupId:y,className:k}=e,h=r.Children.map(e.children,(e=>{if((0,r.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),b=d??h.map((e=>{let{props:{value:t,label:n,attributes:a}}=e;return{value:t,label:n,attributes:a}})),N=(0,l.l)(b,((e,t)=>e.value===t.value));if(N.length>0)throw new Error(`Docusaurus error: Duplicate values "${N.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const f=null===m?m:m??(null==(t=h.find((e=>e.props.default)))?void 0:t.props.value)??h[0].props.value;if(null!==f&&!b.some((e=>e.value===f)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${f}" but none of its children has the corresponding value. Available values are: ${b.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:g,setTabGroupChoices:v}=(0,p.U)(),[C,w]=(0,r.useState)(f),q=[],{blockElementScrollPositionUntilNextRender:O}=(0,u.o5)();if(null!=y){const e=g[y];null!=e&&e!==C&&b.some((t=>t.value===e))&&w(e)}const x=e=>{const t=e.currentTarget,n=q.indexOf(t),a=b[n].value;a!==C&&(O(t),w(a),null!=y&&v(y,String(a)))},T=e=>{var t;let n=null;switch(e.key){case"ArrowRight":{const t=q.indexOf(e.currentTarget)+1;n=q[t]??q[0];break}case"ArrowLeft":{const t=q.indexOf(e.currentTarget)-1;n=q[t]??q[q.length-1];break}}null==(t=n)||t.focus()};return r.createElement("div",{className:(0,i.Z)("tabs-container",s)},r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.Z)("tabs",{"tabs--block":o},k)},b.map((e=>{let{value:t,label:n,attributes:o}=e;return r.createElement("li",(0,a.Z)({role:"tab",tabIndex:C===t?0:-1,"aria-selected":C===t,key:t,ref:e=>q.push(e),onKeyDown:T,onFocus:x,onClick:x},o,{className:(0,i.Z)("tabs__item",c,null==o?void 0:o.className,{"tabs__item--active":C===t})}),n??t)}))),n?(0,r.cloneElement)(h.filter((e=>e.props.value===C))[0],{className:"margin-top--md"}):r.createElement("div",{className:"margin-top--md"},h.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==C})))))}function d(e){const t=(0,o.Z)();return r.createElement(m,(0,a.Z)({key:String(t)},e))}},17439:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>p,default:()=>d,frontMatter:()=>l,metadata:()=>u,toc:()=>c});var a=n(83117),r=(n(67294),n(3905)),i=n(65488),o=n(85162);const l={sidebar_position:1,title:"Overview"},p=void 0,u={unversionedId:"query/usage",id:"query/usage",title:"Overview",description:"Select-After Style",source:"@site/docs/query/usage.mdx",sourceDirName:"query",slug:"/query/usage",permalink:"/jimmer-doc/docs/query/usage",draft:!1,editUrl:"https://github.com/babyfish-ct/jimmer-doc/tree/main/docs/query/usage.mdx",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,title:"Overview"},sidebar:"tutorialSidebar",previous:{title:"Query",permalink:"/jimmer-doc/docs/query/"},next:{title:"Object Fetcher",permalink:"/jimmer-doc/docs/query/object-fetcher/"}},s={},c=[{value:"Select-After Style",id:"select-after-style",level:2},{value:"Code Structure",id:"code-structure",level:2}],m={toc:c};function d(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"select-after-style"},"Select-After Style"),(0,r.kt)("p",null,"Unlike native SQL, in the DSL provided by Jimmer, the ",(0,r.kt)("inlineCode",{parentName:"p"},"select")," statement comes after ",(0,r.kt)("inlineCode",{parentName:"p"},"where"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"orderBy"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"groupBy"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"having"),", etc. For example:"),(0,r.kt)(i.Z,{groupId:"language",mdxType:"Tabs"},(0,r.kt)(o.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'BookTable table = Tables.BOOK_TABLE;\n\nList<Book> books = sqlClient\n    .createQuery(table) \u2776\n    .where(table.name().eq("SQL in Action"))\n    .orderBy(table.name().asc(), table.edition().desc())\n    // highlight-next-line  \n    .select(table) \u2777\n    .limit(10, 100)\n    .execute(); \u2778\n'))),(0,r.kt)(o.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},'val books = sqlClient\n    .createQuery(Book::class) { \u2776\n        where(table.name eq "SQL in Action")\n        orderBy(table.name.asc(), table.edition.desc())\n        // highlight-next-line\n        select(table) \u2777\n    }\n    .limit(10, 100)\n    .execute() \u2778\n')))),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"Putting ",(0,r.kt)("inlineCode",{parentName:"p"},"select")," after is not invented by Jimmer. This style was first brought to mainstream by ",(0,r.kt)("a",{parentName:"p",href:"https://learn.microsoft.com/en-us/dotnet/csharp/programming-guide/concepts/linq/"},"LINQ")," introduced in C# 3.5.  "),(0,r.kt)("p",{parentName:"admonition"},"This style has innate advantages for building strongly typed DSL frameworks, so Jimmer naturally adopts it.")),(0,r.kt)("h2",{id:"code-structure"},"Code Structure"),(0,r.kt)("p",null,"Now let's explain the code:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"\u2776 Create the query, get a mutable query object. Operations targeting this object continue until \u2777."),(0,r.kt)("p",{parentName:"li"},"A mutable query object means any operations like ",(0,r.kt)("inlineCode",{parentName:"p"},"where"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"orderBy"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"groupBy"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"having")," directly modify the current query object. ")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"\u2777 Call ",(0,r.kt)("inlineCode",{parentName:"p"},"select"),", convert the mutable query object into an immutable one. Operations targeting this object continue until \u2778."),(0,r.kt)("p",{parentName:"li"},"An immutable query object means any operations like ",(0,r.kt)("inlineCode",{parentName:"p"},"distinct"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"limit"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"forUpdate"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"reselect"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"withoutSortingAndPaging"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"union"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"unionAll"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"minus"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"intersect"),", do not change the current object but create a new one."),(0,r.kt)("p",{parentName:"li"},"For example ",(0,r.kt)("em",{parentName:"p"},"(to be concise, this pseudo-code uses Kotlin)"),":"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},"val query = sqlClient.createQuery(Book::class) {\n    where(...)\n    orderBy(...)\n    select(...)\n}\nval query1 = query.limit(10, 0); \nval query2 = query.limit(10, 1);\nval query3 = query.limit(10, 2);\n")),(0,r.kt)("p",{parentName:"li"},"Here ",(0,r.kt)("inlineCode",{parentName:"p"},"query")," is the original query, ",(0,r.kt)("inlineCode",{parentName:"p"},"query1"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"query2"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"query3")," are other queries created based on it. ",(0,r.kt)("inlineCode",{parentName:"p"},"limit")," does not change ",(0,r.kt)("inlineCode",{parentName:"p"},"query")," itself but creates new immutable query objects. "),(0,r.kt)("p",{parentName:"li"},"Finally, ",(0,r.kt)("inlineCode",{parentName:"p"},"query1"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"query2"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"query3")," share the same filters, sorting and structure projection as ",(0,r.kt)("inlineCode",{parentName:"p"},"query"),", only differing in paging range. They can coexist without interfering with each other."),(0,r.kt)("p",{parentName:"li"},"Also, the mutable query before ",(0,r.kt)("inlineCode",{parentName:"p"},"select")," has no return type, while the immutable query after ",(0,r.kt)("inlineCode",{parentName:"p"},"select")," has a return type. That is, ",(0,r.kt)("inlineCode",{parentName:"p"},"select")," assigns the final return type to the query.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"\u2778 Call ",(0,r.kt)("inlineCode",{parentName:"p"},"execute")," to execute the query and return data.  "),(0,r.kt)("p",{parentName:"li"},"Before this step, no matter how the DSL is operated and tuned, no SQL operations will be executed."),(0,r.kt)("p",{parentName:"li"},"Besides ",(0,r.kt)("inlineCode",{parentName:"p"},"execute"),", there are other methods to execute queries:"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"fetchOne"),": Assume the query returns exactly one row, get that row. Throw exception if 0 or more rows are returned during actual execution.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"fetchOneOrNull"),": Assume the query returns 0 or 1 row, get that row or null. Throw exception if more rows are returned during actual execution.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"fetchOptional"),": Similar to ",(0,r.kt)("inlineCode",{parentName:"p"},"fetchOneOrNull")," but returns ",(0,r.kt)("inlineCode",{parentName:"p"},"java.util.Optional<T>")," instead of ",(0,r.kt)("inlineCode",{parentName:"p"},"null | T"),"."),(0,r.kt)("admonition",{parentName:"li",type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"This API only exists in Java API, not in Kotlin API since Kotlin does not need ",(0,r.kt)("inlineCode",{parentName:"p"},"java.util.Optional<T>"),"."))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"map"),": Execute directly and do an additional collection map operation at JVM level on top of the returned raw collection.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"forEach"),": If returning too much data to avoid materializing a large collection, ",(0,r.kt)("inlineCode",{parentName:"p"},"forEach")," can be called with a callback to traverse all data."),(0,r.kt)("p",{parentName:"li"},"This is what people often refer to as cursor queries.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"count"),": Based on the original data query written by users, automatically generate the count aggregate query needed for paging, execute and get total rows before paging.  "),(0,r.kt)("admonition",{parentName:"li",type:"info"},(0,r.kt)("p",{parentName:"admonition"},"This is a smart and advanced operation, please see ",(0,r.kt)("a",{parentName:"p",href:"./paging"},"Paging"),".")))),(0,r.kt)("admonition",{parentName:"li",type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"All the methods above to execute queries have two overloaded versions:"),(0,r.kt)("ul",{parentName:"admonition"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Parameterless version ",(0,r.kt)("em",{parentName:"p"},"(as shown in the example)")," utilizes Jimmer's connection management ",(0,r.kt)("em",{parentName:"p"},"(usually integrating with Spring transaction management)")," to get JDBC connection and execute.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Version with a parameter accepting a JDBC connection. In special cases developers can discard Jimmer's connection management ",(0,r.kt)("em",{parentName:"p"},"(usually integrating with Spring transaction management)")," and execute on a specified JDBC connection.")))))),(0,r.kt)("p",null,"Now the process can be summarized as:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"+----------------------+ \n|    \u2776 createQuery    |\n+-----------+----------+\n            |\n     Mutable Query\n(Operations like where, orderBy\ndirectly modify the query) \n            |\n            |\n           \\|/\n+----------------------+\n|     \u2777 select        |\n+-----------+----------+\n            |\n    Immutable Query \n(Operations like limit, distinct\ncreate new queries without modifying current one)\n            |\n            |\n           \\|/\n+----------------------+\n| \u2778 exceute or others |\n+-----------+----------+\n            |\n           \\|/\n     Execution Result\n(Result type is specified by \u2777 select)\n")))}d.isMDXComponent=!0}}]);