"use strict";(self.webpackChunkdocusaurus_code=self.webpackChunkdocusaurus_code||[]).push([[6064],{85162:(e,t,n)=>{n.d(t,{Z:()=>r});var a=n(67294),i=n(34334);const o="tabItem_Ymn6";function r(e){let{children:t,hidden:n,className:r}=e;return a.createElement("div",{role:"tabpanel",className:(0,i.Z)(o,r),hidden:n},t)}},65488:(e,t,n)=>{n.d(t,{Z:()=>d});var a=n(83117),i=n(67294),o=n(34334),r=n(72389),l=n(67392),s=n(7094),c=n(12466);const m="tabList__CuJ",p="tabItem_LNqP";function u(e){var t;const{lazy:n,block:r,defaultValue:u,values:d,groupId:k,className:g}=e,b=i.Children.map(e.children,(e=>{if((0,i.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),h=d??b.map((e=>{let{props:{value:t,label:n,attributes:a}}=e;return{value:t,label:n,attributes:a}})),v=(0,l.l)(h,((e,t)=>e.value===t.value));if(v.length>0)throw new Error(`Docusaurus error: Duplicate values "${v.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const y=null===u?u:u??(null==(t=b.find((e=>e.props.default)))?void 0:t.props.value)??b[0].props.value;if(null!==y&&!h.some((e=>e.value===y)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${y}" but none of its children has the corresponding value. Available values are: ${h.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:f,setTabGroupChoices:N}=(0,s.U)(),[C,x]=(0,i.useState)(y),S=[],{blockElementScrollPositionUntilNextRender:T}=(0,c.o5)();if(null!=k){const e=f[k];null!=e&&e!==C&&h.some((t=>t.value===e))&&x(e)}const w=e=>{const t=e.currentTarget,n=S.indexOf(t),a=h[n].value;a!==C&&(T(t),x(a),null!=k&&N(k,String(a)))},E=e=>{var t;let n=null;switch(e.key){case"ArrowRight":{const t=S.indexOf(e.currentTarget)+1;n=S[t]??S[0];break}case"ArrowLeft":{const t=S.indexOf(e.currentTarget)-1;n=S[t]??S[S.length-1];break}}null==(t=n)||t.focus()};return i.createElement("div",{className:(0,o.Z)("tabs-container",m)},i.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.Z)("tabs",{"tabs--block":r},g)},h.map((e=>{let{value:t,label:n,attributes:r}=e;return i.createElement("li",(0,a.Z)({role:"tab",tabIndex:C===t?0:-1,"aria-selected":C===t,key:t,ref:e=>S.push(e),onKeyDown:E,onFocus:w,onClick:w},r,{className:(0,o.Z)("tabs__item",p,null==r?void 0:r.className,{"tabs__item--active":C===t})}),n??t)}))),n?(0,i.cloneElement)(b.filter((e=>e.props.value===C))[0],{className:"margin-top--md"}):i.createElement("div",{className:"margin-top--md"},b.map(((e,t)=>(0,i.cloneElement)(e,{key:t,hidden:e.props.value!==C})))))}function d(e){const t=(0,r.Z)();return i.createElement(u,(0,a.Z)({key:String(t)},e))}},32102:(e,t,n)=>{n.d(t,{s:()=>g});var a=n(83117),i=n(67294),o=n(42293),r=n(50657),l=n(6514),s=n(54776),c=n(10155),m=n(15861),p=n(93946),u=n(9137),d=n(61274),k=n(50594);const g=(0,i.memo)((e=>{let{open:t,fullScreen:n=!1,title:a,maxWidth:s="md",onClose:g,children:h}=e;const[v,y]=(0,i.useState)(n),f=(0,i.useCallback)((()=>{y((e=>!e))}),[]);return i.createElement(r.Z,{open:t,onClose:g,fullScreen:v,TransitionComponent:b,maxWidth:s},i.createElement(o.Z,{sx:{position:"relative"}},i.createElement(c.Z,null,i.createElement(m.Z,{sx:{ml:2,flex:1},variant:"h6",component:"div"},a),i.createElement(p.Z,{onClick:f,style:{color:"white"}},v?i.createElement(d.Z,null):i.createElement(u.Z,null)),i.createElement(p.Z,{"aria-label":"close",onClick:g,style:{color:"white"}},i.createElement(k.Z,null)))),i.createElement(l.Z,null,h))})),b=i.forwardRef((function(e,t){return i.createElement(s.Z,(0,a.Z)({direction:"up",ref:t},e))}))},39511:(e,t,n)=>{n.d(t,{b:()=>r});var a=n(67294),i=n(83321),o=n(32102);const r=(0,a.memo)((e=>{let{buttonText:t,fullScreen:n=!1,title:r=t,variant:l="outlined",maxWidth:s,children:c}=e;const[m,p]=(0,a.useState)(!1),u=(0,a.useCallback)((e=>{p(!0),e.stopPropagation?e.stopPropagation():e.cancelBubble=!0}),[]),d=(0,a.useCallback)((()=>{p(!1)}),[]);return a.createElement(a.Fragment,null,a.createElement(i.Z,{"data-is-view-more-button":"true",onClick:u,variant:l,size:"small"},t),a.createElement(o.s,{open:m,onClose:d,title:r,maxWidth:s,fullScreen:n},c))}))},80672:(e,t,n)=>{n.d(t,{ZP:()=>s});var a=n(83117),i=(n(67294),n(3905)),o=n(65488),r=n(85162);const l={toc:[]};function s(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,a.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"In Jimmer, all executable statements and instructions support two execution modes:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Execute based on the JDBC connection specified by the user  ")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Executed by Jimmer automatically determining based on a JDBC connection"))),(0,i.kt)("p",null,"Here, take ",(0,i.kt)("inlineCode",{parentName:"p"},"Executable")," (Java) or ",(0,i.kt)("inlineCode",{parentName:"p"},"KExecutable")," (Kotlin) interface as an example"),(0,i.kt)(o.Z,{groupId:"language",mdxType:"Tabs"},(0,i.kt)(r.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="Executable.java"',title:'"Executable.java"'},"package org.babyfish.jimmer.sql.ast;\n\nimport java.sql.Connection;\n\npublic interface Executable<R> {\n\n    R execute();\n\n    R execute(Connection con);\n}\n"))),(0,i.kt)(r.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin",metastring:'title="KExecutable.kt"',title:'"KExecutable.kt"'},"package org.babyfish.jimmer.sql.kt\n\nimport java.sql.Connection  \n\ninterface KExecutable<R> {\n  fun execute(con: Connection? = null): R\n}\n")))),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"execute(Connection)"),": Execute on the JDBC connection specified by the user."),(0,i.kt)("p",{parentName:"li"},"Take query as an example:"),(0,i.kt)(o.Z,{groupId:"language",mdxType:"Tabs"},(0,i.kt)(r.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-java"},"BookTable book = Tables.BOOK_TABLE;\n\nList<Book> books = sqlClient\n    .createQuery(book)\n    .select(book)\n    // highlight-next-line\n    .execute(con);\n"))),(0,i.kt)(r.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},"val books = sqlClient\n    .createQuery(Book::class) {\n        select(table)\n    }\n    // highlight-next-line\n    .execute(con)\n")))),(0,i.kt)("admonition",{parentName:"li",type:"info"},(0,i.kt)("p",{parentName:"admonition"},"For this usage, no special configuration of SqlClient is required."))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"execute()")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"execute(null)"),": Determined by Jimmer to execute on a JDBC connection."),(0,i.kt)("p",{parentName:"li"},"Take query as an example:"),(0,i.kt)(o.Z,{groupId:"language",mdxType:"Tabs"},(0,i.kt)(r.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-java"},"BookTable book = Tables.BOOK_TABLE;\n\nList<Book> books = sqlClient\n    .createQuery(book)\n    .select(book)\n    // highlight-next-line  \n    .execute();\n"))),(0,i.kt)(r.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},"val books = sqlClient\n    .createQuery(Book::class) {\n        select(table)\n    }\n    // highlight-next-line\n    .execute()\n")))),(0,i.kt)("admonition",{parentName:"li",type:"info"},(0,i.kt)("p",{parentName:"admonition"},"For this usage, ",(0,i.kt)("inlineCode",{parentName:"p"},"ConnectionManager")," must be configured for SqlClient. Otherwise it will cause exceptions."),(0,i.kt)("p",{parentName:"admonition"},"Undoubtedly, the 2nd approach is more in line with the requirements of business system development, so it is recommended. So it is strongly recommended to configure ",(0,i.kt)("inlineCode",{parentName:"p"},"ConnectionManager")," for SqlClient.")))))}s.isMDXComponent=!0},27409:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>m,default:()=>g,frontMatter:()=>c,metadata:()=>p,toc:()=>d});var a=n(83117),i=(n(67294),n(3905)),o=n(65488),r=n(85162),l=n(39511),s=n(80672);const c={sidebar_position:1,title:"Spring Transaction"},m=void 0,p={unversionedId:"spring/transaction",id:"spring/transaction",title:"Spring Transaction",description:"Integrate Spring Transaction",source:"@site/docs/spring/transaction.mdx",sourceDirName:"spring",slug:"/spring/transaction",permalink:"/jimmer-doc/docs/spring/transaction",draft:!1,editUrl:"https://github.com/babyfish-ct/jimmer-doc/tree/main/docs/spring/transaction.mdx",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,title:"Spring Transaction"},sidebar:"tutorialSidebar",previous:{title:"Spring",permalink:"/jimmer-doc/docs/spring/"},next:{title:"Spring Data",permalink:"/jimmer-doc/docs/spring/repository/"}},u={},d=[{value:"Integrate Spring Transaction",id:"integrate-spring-transaction",level:2},{value:"Using Spring Boot starter",id:"using-spring-boot-starter",level:3},{value:"Not Using Spring Boot Starter",id:"not-using-spring-boot-starter",level:3},{value:"Work with JdbcTemplate",id:"work-with-jdbctemplate",level:2}],k={toc:d};function g(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,a.Z)({},k,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"integrate-spring-transaction"},"Integrate Spring Transaction"),(0,i.kt)("p",null,"In Jimmer, all database operation APIs have two execution modes:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Execute on a specified JDBC connection")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Execute without specifying a JDBC connection, but a ",(0,i.kt)("inlineCode",{parentName:"p"},"ConnectionManager")," needs to be configured for Jimmer to teach Jimmer how to borrow and return connections. "))),(0,i.kt)("p",null,"Please refer to ",(0,i.kt)(l.b,{buttonText:"here",title:"Two execution ways",mdxType:"ViewMore"}," ",(0,i.kt)(s.ZP,{mdxType:"Execute"}))," for more details."),(0,i.kt)("p",null,"So Jimmer itself does not provide connection/transaction management capabilities, such management capabilities completely rely on user customization of ",(0,i.kt)("inlineCode",{parentName:"p"},"ConnectionManager"),". ",(0,i.kt)("inlineCode",{parentName:"p"},"ConnectionManager")," is the key to integrate Jimmer with the connection/transaction management capabilities of any IOC framework ",(0,i.kt)("em",{parentName:"p"},"(of course including Spring)"),"."),(0,i.kt)("h3",{id:"using-spring-boot-starter"},"Using Spring Boot starter"),(0,i.kt)("p",null,"If using the Spring Boot Starter provided by Jimmer, no extra work is needed. Jimmer will automatically integrate into Spring's transaction management mechanism."),(0,i.kt)("h3",{id:"not-using-spring-boot-starter"},"Not Using Spring Boot Starter"),(0,i.kt)("p",null,"If using Spring only, without the Spring Boot Starter provided by Jimmer.\nYou need to code by yourself to integrate Jimmer into Spring's transaction management mechanism."),(0,i.kt)("p",null,"Developers need to create ",(0,i.kt)("inlineCode",{parentName:"p"},"JSqlClient/KSqlClient")," and set its ",(0,i.kt)("inlineCode",{parentName:"p"},"ConnectionManager"),". In ",(0,i.kt)("inlineCode",{parentName:"p"},"ConnectionManager"),", use Spring's ",(0,i.kt)("inlineCode",{parentName:"p"},"org.springframework.jdbc.datasource.DataSourceUtils")," to open and close connections."),(0,i.kt)(o.Z,{groupId:"language",mdxType:"Tabs"},(0,i.kt)(r.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="Book.java"',title:'"Book.java"'},"@Bean  \npublic JSqlClient sqlClient(DataSource dataSource) {\n    return JSqlClient.newBuilder()\n        // highlight-next-line  \n        .setConnectionManager(\n            new ConnectionManager() {\n                @Override\n                public <R> R execute(\n                    Function<Connection, R> block\n                ) {\n                    Connection con = DataSourceUtils\n                        // highlight-next-line\n                        .getConnection(dataSource);\n                    try {\n                        return block.apply(con);\n                    } finally {\n                        DataSourceUtils\n                        // highlight-next-line\n                        .releaseConnection(con, dataSource);\n                    }\n                }\n            }\n        )\n        ...Omit other configurations...\n        .build();\n}\n"))),(0,i.kt)(r.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin",metastring:'title="Book.kt"',title:'"Book.kt"'},"@Bean\nfun sqlClient(dataSource: DataSource): KSqlClient = \n    newKSqlClient {\n        // highlight-next-line\n        setConnectionManager {\n            val con = DataSourceUtils\n                // highlight-next-line\n                .getConnection(dataSource)\n            try {\n                proceed(con)  \n            } finally {\n                DataSourceUtils\n                // highlight-next-line\n                .releaseConnection(con, dataSource)\n            }\n        }\n        ...Omit other configurations...\n    }\n")))),(0,i.kt)("admonition",{type:"caution"},(0,i.kt)("p",{parentName:"admonition"},"Don't use normal methods to borrow ",(0,i.kt)("em",{parentName:"p"},"(dataSource.getConnection)")," and return ",(0,i.kt)("em",{parentName:"p"},"(con.close)")," connections from the connection pool.\nYou must use Spring's ",(0,i.kt)("inlineCode",{parentName:"p"},"org.springframework.jdbc.datasource.DataSourceUtils"),",\nbecause this can be combined with Spring's transaction management mechanism.")),(0,i.kt)("h2",{id:"work-with-jdbctemplate"},"Work with JdbcTemplate"),(0,i.kt)("p",null,"Jimmer adopts minimalist design. The API entry point ",(0,i.kt)("inlineCode",{parentName:"p"},"JSqlClient/KSqlClient")," exposes stateless APIs."),(0,i.kt)("p",null,"Many database operation frameworks provide lightweight stateful wrappers for JDBC connections, such as"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"JPA's ",(0,i.kt)("a",{parentName:"li",href:"https://docs.oracle.com/javaee/7/api/javax/persistence/EntityManager.html"},"EntityManager")),(0,i.kt)("li",{parentName:"ul"},"Hibernate's ",(0,i.kt)("a",{parentName:"li",href:"https://docs.jboss.org/hibernate/orm/6.2/javadocs/org/hibernate/Session.html"},"Session")," "),(0,i.kt)("li",{parentName:"ul"},"MyBatis's ",(0,i.kt)("a",{parentName:"li",href:"https://javadoc.io/doc/org.mybatis/mybatis/latest/org/apache/ibatis/session/SqlSession.html"},"SqlSession"),".")),(0,i.kt)("p",null,"And they also provide stateful wrappers for database transactions, such as"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"JPA's ",(0,i.kt)("a",{parentName:"li",href:"https://docs.oracle.com/javaee/7/api/javax/persistence/EntityManager.html#getTransaction--"},"EntityManager.getTransaction()")),(0,i.kt)("li",{parentName:"ul"},"Hibernate's ",(0,i.kt)("a",{parentName:"li",href:"https://docs.jboss.org/hibernate/orm/6.2/javadocs/org/hibernate/SharedSessionContract.html#getTransaction()"},"Session.getTransaction()")),(0,i.kt)("li",{parentName:"ul"},"MyBatis's ",(0,i.kt)("a",{parentName:"li",href:"https://javadoc.io/doc/org.mybatis/mybatis/latest/org/apache/ibatis/session/SqlSession.html#commit()"},"SqlSession.commit()"))),(0,i.kt)("p",null,"Jimmer doesn't have similar abstractions. The API entry point ",(0,i.kt)("inlineCode",{parentName:"p"},"JSqlClient/KSqlClient")," exposes stateless APIs. JDBC connection is the only low-level dependency of Jimmer.  "),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"This enables an important feature: Jimmer's transaction management is exactly the same as JdbcTemplate's transaction management.")),(0,i.kt)("p",null,"Jimmer doesn't need to provide any APIs like ",(0,i.kt)("inlineCode",{parentName:"p"},"createNativeQuery")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"For report queries that are not closely related to ORM, users expect to write complete Native SQL, then JdbcTemplate can be used directly, because Jimmer's transaction management is exactly the same as JdbcTemplate's.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"For Jimmer's ORM-style queries, inject ",(0,i.kt)("a",{parentName:"p",href:"../query/native-sql"},"Native SQL")," expressions in strongly typed SQL DSL."))))}g.isMDXComponent=!0}}]);