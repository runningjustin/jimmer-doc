"use strict";(self.webpackChunkdocusaurus_code=self.webpackChunkdocusaurus_code||[]).push([[2353],{3905:(e,t,r)=>{r.d(t,{Zo:()=>c,kt:()=>m});var n=r(67294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var l=n.createContext({}),p=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},c=function(e){var t=p(e.components);return n.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=p(r),m=a,h=d["".concat(l,".").concat(m)]||d[m]||u[m]||o;return r?n.createElement(h,i(i({ref:t},c),{},{components:r})):n.createElement(h,i({ref:t},c))}));function m(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,i=new Array(o);i[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var p=2;p<o;p++)i[p]=r[p];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},85162:(e,t,r)=>{r.d(t,{Z:()=>i});var n=r(67294),a=r(34334);const o="tabItem_Ymn6";function i(e){let{children:t,hidden:r,className:i}=e;return n.createElement("div",{role:"tabpanel",className:(0,a.Z)(o,i),hidden:r},t)}},65488:(e,t,r)=>{r.d(t,{Z:()=>m});var n=r(83117),a=r(67294),o=r(34334),i=r(72389),s=r(67392),l=r(7094),p=r(12466);const c="tabList__CuJ",u="tabItem_LNqP";function d(e){var t;const{lazy:r,block:i,defaultValue:d,values:m,groupId:h,className:f}=e,b=a.Children.map(e.children,(e=>{if((0,a.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),g=m??b.map((e=>{let{props:{value:t,label:r,attributes:n}}=e;return{value:t,label:r,attributes:n}})),v=(0,s.l)(g,((e,t)=>e.value===t.value));if(v.length>0)throw new Error(`Docusaurus error: Duplicate values "${v.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const y=null===d?d:d??(null==(t=b.find((e=>e.props.default)))?void 0:t.props.value)??b[0].props.value;if(null!==y&&!g.some((e=>e.value===y)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${y}" but none of its children has the corresponding value. Available values are: ${g.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:k,setTabGroupChoices:j}=(0,l.U)(),[w,N]=(0,a.useState)(y),T=[],{blockElementScrollPositionUntilNextRender:q}=(0,p.o5)();if(null!=h){const e=k[h];null!=e&&e!==w&&g.some((t=>t.value===e))&&N(e)}const O=e=>{const t=e.currentTarget,r=T.indexOf(t),n=g[r].value;n!==w&&(q(t),N(n),null!=h&&j(h,String(n)))},x=e=>{var t;let r=null;switch(e.key){case"ArrowRight":{const t=T.indexOf(e.currentTarget)+1;r=T[t]??T[0];break}case"ArrowLeft":{const t=T.indexOf(e.currentTarget)-1;r=T[t]??T[T.length-1];break}}null==(t=r)||t.focus()};return a.createElement("div",{className:(0,o.Z)("tabs-container",c)},a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.Z)("tabs",{"tabs--block":i},f)},g.map((e=>{let{value:t,label:r,attributes:i}=e;return a.createElement("li",(0,n.Z)({role:"tab",tabIndex:w===t?0:-1,"aria-selected":w===t,key:t,ref:e=>T.push(e),onKeyDown:x,onFocus:O,onClick:O},i,{className:(0,o.Z)("tabs__item",u,null==i?void 0:i.className,{"tabs__item--active":w===t})}),r??t)}))),r?(0,a.cloneElement)(b.filter((e=>e.props.value===w))[0],{className:"margin-top--md"}):a.createElement("div",{className:"margin-top--md"},b.map(((e,t)=>(0,a.cloneElement)(e,{key:t,hidden:e.props.value!==w})))))}function m(e){const t=(0,i.Z)();return a.createElement(d,(0,n.Z)({key:String(t)},e))}},72804:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>l,default:()=>m,frontMatter:()=>s,metadata:()=>p,toc:()=>u});var n=r(83117),a=(r(67294),r(3905)),o=r(65488),i=r(85162);const s={sidebar_position:1,title:"Basic Concepts"},l=void 0,p={unversionedId:"graphql/concept",id:"graphql/concept",title:"Basic Concepts",description:"Concepts",source:"@site/docs/graphql/concept.mdx",sourceDirName:"graphql",slug:"/graphql/concept",permalink:"/jimmer-doc/docs/graphql/concept",draft:!1,editUrl:"https://github.com/babyfish-ct/jimmer-doc/tree/main/docs/graphql/concept.mdx",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,title:"Basic Concepts"},sidebar:"tutorialSidebar",previous:{title:"GraphQL",permalink:"/jimmer-doc/docs/graphql/"},next:{title:"Query",permalink:"/jimmer-doc/docs/graphql/query"}},c={},u=[{value:"Concepts",id:"concepts",level:2},{value:"Notes",id:"notes",level:2}],d={toc:u};function m(e){let{components:t,...r}=e;return(0,a.kt)("wrapper",(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"concepts"},"Concepts"),(0,a.kt)("p",null,"In the ",(0,a.kt)("a",{parentName:"p",href:"../spring"},"Spring section"),", we discussed how to implement REST services with Jimmer and automatically generate client code like TypeScript. "),(0,a.kt)("p",null,"In addition, Jimmer also supports another development mode to build ",(0,a.kt)("a",{parentName:"p",href:"https://graphql.org/"},"GraphQL")," services, which is what this article series will discuss."),(0,a.kt)("admonition",{type:"caution"},(0,a.kt)("p",{parentName:"admonition"},"So far, the GraphQL protocol does not support recursive queries for self-associated properties."),(0,a.kt)("p",{parentName:"admonition"},"Therefore, it is not possible to expose functionality like ",(0,a.kt)("a",{parentName:"p",href:"../query/object-fetcher/recursive"},"recursive queries in object fetchers")," through GraphQL. This is a functionality sacrifice that must currently be accepted when using GraphQL.")),(0,a.kt)("p",null,"Jimmer's support for GraphQL is based on ",(0,a.kt)("a",{parentName:"p",href:"https://spring.io/projects/spring-graphql"},"Spring GraphQL"),".\nSo the project needs to import both the Jimmer and Spring GraphQL Spring Boot starters, for example:"),(0,a.kt)(o.Z,{groupId:"buildTool",mdxType:"Tabs"},(0,a.kt)(i.Z,{value:"maven",label:"Maven",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-xml",metastring:'title="pom.xml"',title:'"pom.xml"'},"...other code omitted...\n\n<build>\n  <dependencies>\n    <dependency>\n      <groupId>org.babyfish.jimmer</groupId>\n      <artifactId>jimmer-spring-boot-starter</artifactId>\n      <version>${jimmer.version}</version>\n    </dependency>\n    <dependency>\n      <groupId>org.springframework.boot</groupId>\n      <artifactId>spring-boot-starter-graphql</artifactId>\n      <version>${spring.boot.version}</version>\n    </dependency>\n    ...other dependencies omitted...\n  </dependencies>\n</build>\n\n...other code omitted...\n"))),(0,a.kt)(i.Z,{value:"gradle",label:"Gradle",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-groovy",metastring:'title="build.gradle"',title:'"build.gradle"'},"dependencies {\n  implementation \"org.babyfish.jimmer:jimmer-spring-boot-starter:${jimmerVersion}\"\n  implementation 'org.springframework.boot:spring-boot-starter-graphql'\n\n  ...other dependencies omitted...  \n}\n")))),(0,a.kt)("admonition",{type:"info"},(0,a.kt)("p",{parentName:"admonition"},"If the Jimmer entity types are also defined in the GraphQL project rather than in a separate project, the preprocessor (Annotation Processor for Java, KSP for Kotlin) should also be configured in the build script."),(0,a.kt)("p",{parentName:"admonition"},"This has already been discussed in detail in the ",(0,a.kt)("a",{parentName:"p",href:"../quick-view/get-started/generate-code"},"Generate Code")," article and will not be repeated here.")),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://spring.io/projects/spring-graphql"},"Spring GraphQL")," is a Schema-First rather than Code-First approach.\nTherefore, developers need to create the file ",(0,a.kt)("inlineCode",{parentName:"p"},"src/main/resources/graphql/schema.graphqls")," in the project and define the GraphQL schema in it."),(0,a.kt)("p",null,"This file is a requirement of ",(0,a.kt)("a",{parentName:"p",href:"https://spring.io/projects/spring-graphql"},"Spring GraphQL"),". The GraphQL schema content is a standard language that is unrelated to Jimmer, so this article will not explain it. Please refer to the ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/babyfish-ct/jimmer-examples/blob/main/java/jimmer-sql-graphql/service/src/main/resources/graphql/schema.graphqls"},"GraphQL Schema in the example"),". "),(0,a.kt)("h2",{id:"notes"},"Notes"),(0,a.kt)("admonition",{type:"caution"},(0,a.kt)("p",{parentName:"admonition"},"In the current version, there is a limitation that when providing GraphQL services, ",(0,a.kt)("a",{parentName:"p",href:"../mapping/advanced/calculated/formula#sql-based-calculation"},"simple calculated properties based on SQL")," should NOT be used.")))}m.isMDXComponent=!0}}]);