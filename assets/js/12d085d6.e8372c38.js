"use strict";(self.webpackChunkdocusaurus_code=self.webpackChunkdocusaurus_code||[]).push([[9249],{3905:(e,t,a)=>{a.d(t,{Zo:()=>p,kt:()=>m});var n=a(67294);function l(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){l(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function r(e,t){if(null==e)return{};var a,n,l=function(e,t){if(null==e)return{};var a,n,l={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(l[a]=e[a]);return l}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(l[a]=e[a])}return l}var s=n.createContext({}),d=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},p=function(e){var t=d(e.components);return n.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},c=n.forwardRef((function(e,t){var a=e.components,l=e.mdxType,o=e.originalType,s=e.parentName,p=r(e,["components","mdxType","originalType","parentName"]),c=d(a),m=l,g=c["".concat(s,".").concat(m)]||c[m]||u[m]||o;return a?n.createElement(g,i(i({ref:t},p),{},{components:a})):n.createElement(g,i({ref:t},p))}));function m(e,t){var a=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var o=a.length,i=new Array(o);i[0]=c;var r={};for(var s in t)hasOwnProperty.call(t,s)&&(r[s]=t[s]);r.originalType=e,r.mdxType="string"==typeof e?e:l,i[1]=r;for(var d=2;d<o;d++)i[d]=a[d];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}c.displayName="MDXCreateElement"},85162:(e,t,a)=>{a.d(t,{Z:()=>i});var n=a(67294),l=a(34334);const o="tabItem_Ymn6";function i(e){let{children:t,hidden:a,className:i}=e;return n.createElement("div",{role:"tabpanel",className:(0,l.Z)(o,i),hidden:a},t)}},65488:(e,t,a)=>{a.d(t,{Z:()=>m});var n=a(83117),l=a(67294),o=a(34334),i=a(72389),r=a(67392),s=a(7094),d=a(12466);const p="tabList__CuJ",u="tabItem_LNqP";function c(e){var t;const{lazy:a,block:i,defaultValue:c,values:m,groupId:g,className:k}=e,h=l.Children.map(e.children,(e=>{if((0,l.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),v=m??h.map((e=>{let{props:{value:t,label:a,attributes:n}}=e;return{value:t,label:a,attributes:n}})),b=(0,r.l)(v,((e,t)=>e.value===t.value));if(b.length>0)throw new Error(`Docusaurus error: Duplicate values "${b.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const y=null===c?c:c??(null==(t=h.find((e=>e.props.default)))?void 0:t.props.value)??h[0].props.value;if(null!==y&&!v.some((e=>e.value===y)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${y}" but none of its children has the corresponding value. Available values are: ${v.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:f,setTabGroupChoices:N}=(0,s.U)(),[T,E]=(0,l.useState)(y),j=[],{blockElementScrollPositionUntilNextRender:w}=(0,d.o5)();if(null!=g){const e=f[g];null!=e&&e!==T&&v.some((t=>t.value===e))&&E(e)}const x=e=>{const t=e.currentTarget,a=j.indexOf(t),n=v[a].value;n!==T&&(w(t),E(n),null!=g&&N(g,String(n)))},B=e=>{var t;let a=null;switch(e.key){case"ArrowRight":{const t=j.indexOf(e.currentTarget)+1;a=j[t]??j[0];break}case"ArrowLeft":{const t=j.indexOf(e.currentTarget)-1;a=j[t]??j[j.length-1];break}}null==(t=a)||t.focus()};return l.createElement("div",{className:(0,o.Z)("tabs-container",p)},l.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.Z)("tabs",{"tabs--block":i},k)},v.map((e=>{let{value:t,label:a,attributes:i}=e;return l.createElement("li",(0,n.Z)({role:"tab",tabIndex:T===t?0:-1,"aria-selected":T===t,key:t,ref:e=>j.push(e),onKeyDown:B,onFocus:x,onClick:x},i,{className:(0,o.Z)("tabs__item",u,null==i?void 0:i.className,{"tabs__item--active":T===t})}),a??t)}))),a?(0,l.cloneElement)(h.filter((e=>e.props.value===T))[0],{className:"margin-top--md"}):l.createElement("div",{className:"margin-top--md"},h.map(((e,t)=>(0,l.cloneElement)(e,{key:t,hidden:e.props.value!==T})))))}function m(e){const t=(0,i.Z)();return l.createElement(c,(0,n.Z)({key:String(t)},e))}},98360:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>p,contentTitle:()=>s,default:()=>m,frontMatter:()=>r,metadata:()=>d,toc:()=>u});var n=a(83117),l=(a(67294),a(3905)),o=a(65488),i=a(85162);const r={sidebar_position:3,title:"Logical Deletion"},s=void 0,d={unversionedId:"mapping/advanced/logical-deleted",id:"mapping/advanced/logical-deleted",title:"Logical Deletion",description:"Logical deletion, also known as soft deletion, means data is not actually deleted. Instead, data is hidden to give the illusion of deletion. This leaves room for recovering from accidental operations.",source:"@site/docs/mapping/advanced/logical-deleted.mdx",sourceDirName:"mapping/advanced",slug:"/mapping/advanced/logical-deleted",permalink:"/jimmer-doc/docs/mapping/advanced/logical-deleted",draft:!1,editUrl:"https://github.com/babyfish-ct/jimmer-doc/tree/main/docs/mapping/advanced/logical-deleted.mdx",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3,title:"Logical Deletion"},sidebar:"tutorialSidebar",previous:{title:"MappedSuperclass",permalink:"/jimmer-doc/docs/mapping/advanced/mapped-super-class"},next:{title:"View Properites",permalink:"/jimmer-doc/docs/mapping/advanced/view/"}},p={},u=[{value:"Usage",id:"usage",level:2},{value:"boolean type",id:"boolean-type",level:3},{value:"int type",id:"int-type",level:3},{value:"enum type",id:"enum-type",level:3},{value:"date type",id:"date-type",level:3},{value:"Multi-versioning Issues",id:"multi-versioning-issues",level:2}],c={toc:u};function m(e){let{components:t,...a}=e;return(0,l.kt)("wrapper",(0,n.Z)({},c,a,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("p",null,"Logical deletion, also known as soft deletion, means data is not actually deleted. Instead, data is hidden to give the illusion of deletion. This leaves room for recovering from accidental operations."),(0,l.kt)("p",null,"To enable logical deletion support for an entity, add a flag property annotated with ",(0,l.kt)("inlineCode",{parentName:"p"},"org.babyfish.jimmer.sql.LogicalDeleted")," to indicate whether the data is normal or already deleted."),(0,l.kt)("p",null,"Once a logical deletion property is configured for an entity:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"By default, when developers call APIs to delete an entity object, Jimmer will NOT actually delete the data with SQL ",(0,l.kt)("inlineCode",{parentName:"p"},"delete")," statements. Instead, it will use ",(0,l.kt)("inlineCode",{parentName:"p"},"update"),' statements to set the logical deletion property of the entity to "already deleted".'),(0,l.kt)("p",{parentName:"li"},"Other cases: Even if an entity has a logical deletion property, Jimmer also provides APIs for developers to forcibly truly delete objects by passing additional parameters.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"By default, all SQL queries against the entity will be automatically appended with a ",(0,l.kt)("inlineCode",{parentName:"p"},"where logicalDeleteFlag <> already deleted")," condition to create the illusion that some data has been deleted. "))),(0,l.kt)("admonition",{type:"info"},(0,l.kt)("p",{parentName:"admonition"},"This doc only covers the mapping configuration of the logical deletion flag field. For how to use the logical deletion functionality, see ",(0,l.kt)("a",{parentName:"p",href:"../../query/global-filter/logical-deleted"},"Global Filters / Logical Deletion"),".")),(0,l.kt)("h2",{id:"usage"},"Usage"),(0,l.kt)("p",null,"The logical deletion flag property can be one of the following types:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"boolean: must be non-null"),(0,l.kt)("li",{parentName:"ul"},"int: must be non-null  "),(0,l.kt)("li",{parentName:"ul"},"enum: must be non-null"),(0,l.kt)("li",{parentName:"ul"},"date: must be nullable")),(0,l.kt)("h3",{id:"boolean-type"},"boolean type"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Use true to represent deleted"),(0,l.kt)(o.Z,{groupId:"language",mdxType:"Tabs"},(0,l.kt)(i.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="Book.java"',title:'"Book.java"'},'@Entity\npublic interface Book {\n\n    // highlight-next-line \n    @LogicalDeleted("true")\n    boolean isDeleted();\n    \n    ...other code omitted...\n}\n'))),(0,l.kt)(i.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-kotlin",metastring:'title="Book.kt"',title:'"Book.kt"'},'@Entity\ninterface Book {\n\n    // highlight-next-line\n    @LogicalDeleted("true")\n    val isDeleted: Boolean\n    \n    ...other code omitted...\n}\n'))))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Use false to represent deleted "),(0,l.kt)(o.Z,{groupId:"language",mdxType:"Tabs"},(0,l.kt)(i.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="Book.java"',title:'"Book.java"'},'@Entity\npublic interface Book {\n\n    // highlight-next-line\n    @LogicalDeleted("false")\n    boolean isEnabled();\n\n    ...other code omitted...\n}\n'))),(0,l.kt)(i.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-kotlin",metastring:'title="Book.kt"',title:'"Book.kt"'},'@Entity\ninterface Book {\n\n    // highlight-next-line\n    @LogicalDeleted("false")\n    val isEnabled: Boolean\n\n    ...other code omitted...\n}\n')))))),(0,l.kt)("h3",{id:"int-type"},"int type"),(0,l.kt)(o.Z,{groupId:"language",mdxType:"Tabs"},(0,l.kt)(i.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="Book.java"',title:'"Book.java"'},'@Entity\npublic interface Book {\n\n    // highlight-next-line\n    @LogicalDeleted("4")\n    int state();\n\n    ...other code omitted...\n}\n'))),(0,l.kt)(i.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-kotlin",metastring:'title="Book.kt"',title:'"Book.kt"'},'@Entity\ninterface Book {\n\n    // highlight-next-line\n    @LogicalDeleted("4")\n    val state: Int\n\n    ...other code omitted...\n}\n')))),(0,l.kt)("h3",{id:"enum-type"},"enum type"),(0,l.kt)("p",null,"First, define an enum type to represent the data state:"),(0,l.kt)(o.Z,{groupId:"language",mdxType:"Tabs"},(0,l.kt)(i.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="BookState.java"',title:'"BookState.java"'},"public enum BookState {\n    INTIALIZED, \n    FROZEN,\n    PUBLISHED,\n    DELETED  \n}\n"))),(0,l.kt)(i.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-kotlin",metastring:'title="BookState.kt"',title:'"BookState.kt"'},"enum class BookState {\n    INTIALIZED,\n    FROZEN,\n    PUBLISHED,\n    DELETED\n}\n")))),(0,l.kt)(o.Z,{groupId:"language",mdxType:"Tabs"},(0,l.kt)(i.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="Book.java"',title:'"Book.java"'},'@Entity\npublic interface Book {\n\n    // highlight-next-line\n    @LogicalDeleted("DELETED")\n    BookState state();\n\n    ...other code omitted...\n}\n'))),(0,l.kt)(i.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-kotlin",metastring:'title="Book.kt"',title:'"Book.kt"'},'@Entity  \ninterface Book {\n\n    // highlight-next-line\n    @LogicalDeleted("DELETED")\n    val state: BookState\n\n    ...other code omitted...\n}\n')))),(0,l.kt)("admonition",{type:"info"},(0,l.kt)("p",{parentName:"admonition"},"For how Jimmer saves enum properties, see ",(0,l.kt)("a",{parentName:"p",href:"./enum"},"Enum Mapping"),".")),(0,l.kt)("h3",{id:"date-type"},"date type"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Use non-null to represent deleted, null for non-deleted"),(0,l.kt)(o.Z,{groupId:"language",mdxType:"Tabs"},(0,l.kt)(i.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="Book.java"',title:'"Book.java"'},'@Entity\npublic interface Book {\n\n    // highlight-next-line\n    @LogicalDeleted("now") \n    @Nullable\n    LocalDateTime deletedTime();\n\n    ...other code omitted...\n}\n'))),(0,l.kt)(i.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-kotlin",metastring:'title="Book.kt"',title:'"Book.kt"'},'@Entity\ninterface Book {\n\n    // highlight-next-line\n    @LogicalDeleted("now")\n    val deletedTime: LocalDateTime?\n\n    ...other code omitted...\n}\n')))),(0,l.kt)("admonition",{parentName:"li",type:"info"},(0,l.kt)("p",{parentName:"admonition"},(0,l.kt)("inlineCode",{parentName:"p"},'"now"')," here means the ",(0,l.kt)("inlineCode",{parentName:"p"},"deletedTime")," property will be automatically set to the current JVM time when the data is logically deleted."))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Use null to represent deleted, non-null for non-deleted"),(0,l.kt)(o.Z,{groupId:"language",mdxType:"Tabs"},(0,l.kt)(i.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="Book.java"',title:'"Book.java"'},'@Entity\npublic interface Book {\n\n    // highlight-next-line\n    @LogicalDeleted("null")\n    @Nullable\n    LocalDateTime createdTime();\n\n    ...other code omitted...\n}\n'))),(0,l.kt)(i.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-kotlin",metastring:'title="Book.kt"',title:'"Book.kt"'},'@Entity\ninterface Book {\n\n    // highlight-next-line\n    @LogicalDeleted("null") \n    val createdTime: LocalDateTime?\n\n    ...other code omitted...\n}\n')))),(0,l.kt)("admonition",{parentName:"li",type:"info"},(0,l.kt)("p",{parentName:"admonition"},(0,l.kt)("inlineCode",{parentName:"p"},'"null"')," here means the ",(0,l.kt)("inlineCode",{parentName:"p"},"createdTime")," property will be automatically set to null when the data is logically deleted.")))),(0,l.kt)("h2",{id:"multi-versioning-issues"},"Multi-versioning Issues"),(0,l.kt)("p",null,"Logical deletion does not truly delete data from the database. It only hides the data. This means there are now multiple versions of the data."),(0,l.kt)("p",null,"Therefore, it is recommended that the id uses auto-generation strategy instead of being specified by users. Logically deleted data still exists in the database, so data with the same id can no longer be successfully inserted."),(0,l.kt)("p",null,"Once the id uses auto-generation strategy, it loses business meaning. So developers should establish uniqueness constraints/indices based on other fields instead of the primary key constraint to ensure uniqueness at the business level."),(0,l.kt)("p",null,"Obviously, data multi-versioning increases the complexity for users to define uniqueness constraints/indices. "),(0,l.kt)("p",null,"This doc focuses on the mapping configuration of logical deletion, so it only points out this issue without further discussion. For an in-depth look at this problem, see ",(0,l.kt)("a",{parentName:"p",href:"./key#multi-version-support"},"Key / Multi-version Support"),"."))}m.isMDXComponent=!0}}]);