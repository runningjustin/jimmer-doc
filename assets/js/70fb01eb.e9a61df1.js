"use strict";(self.webpackChunkdocusaurus_code=self.webpackChunkdocusaurus_code||[]).push([[4472],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>u});var a=t(67294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=a.createContext({}),d=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},c=function(e){var n=d(e.components);return a.createElement(s.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},m=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,l=e.originalType,s=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),m=d(t),u=r,N=m["".concat(s,".").concat(u)]||m[u]||p[u]||l;return t?a.createElement(N,i(i({ref:n},c),{},{components:t})):a.createElement(N,i({ref:n},c))}));function u(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var l=t.length,i=new Array(l);i[0]=m;var o={};for(var s in n)hasOwnProperty.call(n,s)&&(o[s]=n[s]);o.originalType=e,o.mdxType="string"==typeof e?e:r,i[1]=o;for(var d=2;d<l;d++)i[d]=t[d];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},85162:(e,n,t)=>{t.d(n,{Z:()=>i});var a=t(67294),r=t(34334);const l="tabItem_Ymn6";function i(e){let{children:n,hidden:t,className:i}=e;return a.createElement("div",{role:"tabpanel",className:(0,r.Z)(l,i),hidden:t},n)}},65488:(e,n,t)=>{t.d(n,{Z:()=>u});var a=t(83117),r=t(67294),l=t(34334),i=t(72389),o=t(67392),s=t(7094),d=t(12466);const c="tabList__CuJ",p="tabItem_LNqP";function m(e){var n;const{lazy:t,block:i,defaultValue:m,values:u,groupId:N,className:_}=e,h=r.Children.map(e.children,(e=>{if((0,r.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),b=u??h.map((e=>{let{props:{value:n,label:t,attributes:a}}=e;return{value:n,label:t,attributes:a}})),k=(0,o.l)(b,((e,n)=>e.value===n.value));if(k.length>0)throw new Error(`Docusaurus error: Duplicate values "${k.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const E=null===m?m:m??(null==(n=h.find((e=>e.props.default)))?void 0:n.props.value)??h[0].props.value;if(null!==E&&!b.some((e=>e.value===E)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${E}" but none of its children has the corresponding value. Available values are: ${b.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:g,setTabGroupChoices:f}=(0,s.U)(),[T,y]=(0,r.useState)(E),v=[],{blockElementScrollPositionUntilNextRender:D}=(0,d.o5)();if(null!=N){const e=g[N];null!=e&&e!==T&&b.some((n=>n.value===e))&&y(e)}const I=e=>{const n=e.currentTarget,t=v.indexOf(n),a=b[t].value;a!==T&&(D(n),y(a),null!=N&&f(N,String(a)))},O=e=>{var n;let t=null;switch(e.key){case"ArrowRight":{const n=v.indexOf(e.currentTarget)+1;t=v[n]??v[0];break}case"ArrowLeft":{const n=v.indexOf(e.currentTarget)-1;t=v[n]??v[v.length-1];break}}null==(n=t)||n.focus()};return r.createElement("div",{className:(0,l.Z)("tabs-container",c)},r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,l.Z)("tabs",{"tabs--block":i},_)},b.map((e=>{let{value:n,label:t,attributes:i}=e;return r.createElement("li",(0,a.Z)({role:"tab",tabIndex:T===n?0:-1,"aria-selected":T===n,key:n,ref:e=>v.push(e),onKeyDown:O,onFocus:I,onClick:I},i,{className:(0,l.Z)("tabs__item",p,null==i?void 0:i.className,{"tabs__item--active":T===n})}),t??n)}))),t?(0,r.cloneElement)(h.filter((e=>e.props.value===T))[0],{className:"margin-top--md"}):r.createElement("div",{className:"margin-top--md"},h.map(((e,n)=>(0,r.cloneElement)(e,{key:n,hidden:e.props.value!==T})))))}function u(e){const n=(0,i.Z)();return r.createElement(m,(0,a.Z)({key:String(n)},e))}},18874:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>u,frontMatter:()=>o,metadata:()=>d,toc:()=>p});var a=t(83117),r=(t(67294),t(3905)),l=t(65488),i=t(85162);const o={sidebar_position:4,title:"Recursive Query"},s=void 0,d={unversionedId:"query/object-fetcher/recursive",id:"query/object-fetcher/recursive",title:"Recursive Query",description:"A common requirement is to handle self-associated property.",source:"@site/docs/query/object-fetcher/recursive.mdx",sourceDirName:"query/object-fetcher",slug:"/query/object-fetcher/recursive",permalink:"/jimmer-doc/docs/query/object-fetcher/recursive",draft:!1,editUrl:"https://github.com/babyfish-ct/jimmer-doc/tree/main/docs/query/object-fetcher/recursive.mdx",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4,title:"Recursive Query"},sidebar:"tutorialSidebar",previous:{title:"Associations",permalink:"/jimmer-doc/docs/query/object-fetcher/association"},next:{title:"View Properties",permalink:"/jimmer-doc/docs/query/object-fetcher/view"}},c={},p=[{value:"Model and Data Preparation",id:"model-and-data-preparation",level:2},{value:"Limited Depth",id:"limited-depth",level:2},{value:"Unlimited Recursion",id:"unlimited-recursion",level:2},{value:"Developer Controls Recursion Per Node",id:"developer-controls-recursion-per-node",level:2}],m={toc:p};function u(e){let{components:n,...t}=e;return(0,r.kt)("wrapper",(0,a.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"A common requirement is to handle self-associated property. "),(0,r.kt)("p",null,"From a database perspective, self-assoiated property means a table's foreign key references itself. From an object model perspective, it represents a tree."),(0,r.kt)("p",null,"The difficulty of self-associated properites is that the object depth is uncontrollable, theoretically infinite. Jimmer provides great support for this."),(0,r.kt)("h2",{id:"model-and-data-preparation"},"Model and Data Preparation"),(0,r.kt)("p",null,"Define the entity interface:"),(0,r.kt)(l.Z,{groupId:"language",mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'@Entity\npublic interface TreeNode {\n\n    @Id  \n    @Column(name = "NODE_ID")\n    long id();\n\n    String name();\n\n    @Null  \n    @ManyToOne\n    TreeNode parent();\n\n    @OneToMany(mappedBy = "parent")\n    List<TreeNode> childNodes();\n}\n'))),(0,r.kt)(i.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},'@Entity\ninterface TreeNode {\n\n    @Id\n    @Column(name = "NODE_ID") \n    val id: Long\n\n    val name: String\n\n    @ManyToOne\n    val parent: TreeNode?\n\n    @OneToMany(mappedBy = "parent")\n    val childNodes: List<TreeNode> \n}\n')))),(0,r.kt)("p",null,"Prepare the database:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"create table tree_node(\n    node_id bigint not null,\n    name varchar(20) not null,\n    parent_id bigint\n);\n\nalter table tree_node\n    add constraint pk_tree_node\n        primary key(node_id);\n        \nalter table tree_node\n    add constraint uq_tree_node\n        unique(parent_id, name);\n        \nalter table tree_node\n    add constraint fk_tree_node__parent\n        foreign key(parent_id)\n            references tree_node(node_id);\n\ninsert into tree_node(\n    node_id, name, parent_id\n) values\n    (1, 'Home', null),\n        (2, 'Food', 1),\n            (3, 'Drinks', 2),\n                (4, 'Coca Cola', 3),\n                (5, 'Fanta', 3),\n            (6, 'Bread', 2),\n                (7, 'Baguette', 6),\n                (8, 'Ciabatta', 6),\n        (9, 'Clothing', 1),\n            (10, 'Woman', 9),\n                (11, 'Casual wear', 10),\n                    (12, 'Dress', 11),\n                    (13, 'Miniskirt', 11),\n                    (14, 'Jeans', 11),\n                (15, 'Formal wear', 10),\n                    (16, 'Suit', 15),\n                    (17, 'Shirt', 15),\n            (18, 'Man', 9),\n                (19, 'Casual wear', 18),\n                    (20, 'Jacket', 19),\n                    (21, 'Jeans', 19),\n                (22, 'Formal wear', 18),\n                    (23, 'Suit', 22),\n                    (24, 'Shirt', 22)\n;\n")),(0,r.kt)("h2",{id:"limited-depth"},"Limited Depth"),(0,r.kt)("p",null,"Top-down, fetch two layers:"),(0,r.kt)(l.Z,{groupId:"language",mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"TreeNodeTable node = Tables.TREE_NODE_TABLE;\n\nList<TreeNode> treeNodes = sqlClient\n    .createQuery(node)\n    .where(node.parentId().isNull())\n    .select(\n        node.fetch(\n            Fetchers.TREE_NODE_FETCHER\n                .name()\n                .childNodes(\n                    Fetchers.TREE_NODE_FETCHER.name(),\n                    // highlight-next-line  \n                    it -> it.depth(2)\n            )\n        )\n    )\n    .execute();\n"))),(0,r.kt)(i.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},"val treeNodes = sqlClient\n    .createQuery(TreeNode::class) {\n        where(table.parentId.isNull())\n        select(\n            table.fetchBy {\n                allScalarFields()\n                childNodes({\n                // highlight-next-line\n                    depth(2)\n                }) {\n                    allScalarFields()\n                }\n            }\n        )\n    }\n    .execute()\n")))),(0,r.kt)("p",null,"3 SQLs are generated:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Main query to fetch root nodes (layer 0)"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"select\n    tb_1_.NODE_ID, \n    tb_1_.NAME\nfrom TREE_NODE as tb_1_ \nwhere\ntb_1_.PARENT_ID is null\n"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Fetch layer 1  "),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"select\n    tb_1_.PARENT_ID,\n    tb_1_.NODE_ID, \n    tb_1_.NAME\nfrom TREE_NODE as tb_1_\nwhere  \ntb_1_.PARENT_ID in (?)\n"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Fetch layer 2"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"select\n    tb_1_.PARENT_ID,\n    tb_1_.NODE_ID,\n    tb_1_.NAME \nfrom TREE_NODE as tb_1_\nwhere\ntb_1_.PARENT_ID in (?, ?) \n")),(0,r.kt)("p",{parentName:"li"},"The printed result is (original compact, formatted for readability):"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "id":1,\n    "name":"Home",\n    "childNodes":[\n    {\n        "id":9,\n        "name":"Clothing",\n        "childNodes":[\n            {"id":18,"name":"Man"},\n            {"id":10,"name":"Woman"}\n        ]\n    },{\n        "id":2,\n        "name":"Food",\n        "childNodes":[\n            {"id":6,"name":"Bread"},\n            {"id":3,"name":"Drinks"}\n        ]\n    }  \n]\n}\n')))),(0,r.kt)("h2",{id:"unlimited-recursion"},"Unlimited Recursion"),(0,r.kt)("p",null,"Top-down, fetch unlimited layers:"),(0,r.kt)(l.Z,{groupId:"language",mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"TreeNodeTable node = Tables.TREE_NODE_TABLE;\n\nList<TreeNode> treeNodes = sqlClient\n    .createQuery(node)\n    .where(node.parentId().isNull())\n    .select(\n        node.fetch(\n            Fetchers.TREE_NODE_FETCHER\n                .name()\n                .childNodes(\n                    Fetchers.TREE_NODE_FETCHER.name(), \n                    // highlight-next-line\n                    it -> it.recursive()\n                )\n        )\n    )\n    .execute();\n"))),(0,r.kt)(i.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},"val treeNodes = sqlClient\n    .createQuery(TreeNode::class) {\n        where(table.parentId.isNull())\n        select(\n            table.fetchBy {\n                allScalarFields()\n                childNodes({\n                    // highlight-next-line\n                    recursive()\n                }) {\n                    allScalarFields()\n                }\n            }\n        )\n    }\n    .execute()\n")))),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"In the code above, ",(0,r.kt)("inlineCode",{parentName:"p"},"it.recursive()")," can also be written as ",(0,r.kt)("inlineCode",{parentName:"p"},"it.depth(Integer.MAX_VALUE)"),", they are equivalent. ")),(0,r.kt)("p",null,"6 SQLs are generated:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Query root nodes"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"select\n    tb_1_.NODE_ID,\n    tb_1_.NAME\nfrom TREE_NODE as tb_1_ \nwhere\ntb_1_.PARENT_ID is null\n"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Fetch layer 1"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"select\n    tb_1_.PARENT_ID,\n    tb_1_.NODE_ID,\n    tb_1_.NAME\nfrom TREE_NODE as tb_1_\nwhere \ntb_1_.PARENT_ID in (?)\n"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Fetch layer 2  "),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"select\n    tb_1_.PARENT_ID, \n    tb_1_.NODE_ID,\n    tb_1_.NAME\nfrom TREE_NODE as tb_1_ \nwhere\ntb_1_.PARENT_ID in (?, ?)\n"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Fetch layer 3"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"select\n    tb_1_.PARENT_ID,\n    tb_1_.NODE_ID,\n    tb_1_.NAME\nfrom TREE_NODE as tb_1_\nwhere  \ntb_1_.PARENT_ID in (?, ?, ?, ?) \n"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Fetch layer 4  "),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"select\n    tb_1_.PARENT_ID,\n    tb_1_.NODE_ID,\n    tb_1_.NAME\nfrom TREE_NODE as tb_1_\nwhere\ntb_1_.PARENT_ID in (?, ?, ?, ?, ?, ?, ?, ?)  \n"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Fetch layer 5"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"select\n    tb_1_.PARENT_ID, \n    tb_1_.NODE_ID,\n    tb_1_.NAME\nfrom TREE_NODE as tb_1_ \nwhere\ntb_1_.PARENT_ID in (?, ?, ?, ?, ?, ?, ?, ?, ?)\n")))),(0,r.kt)("p",null,"The printed result is (original compact, formatted for readability):  "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "id": 1,\n    "name": "Home",\n    "childNodes": [\n        {\n            "id": 9,\n            "name": "Clothing",\n            "childNodes": [\n                {\n                    "id": 18,\n                    "name": "Man",\n                    "childNodes": [\n                        {\n                            "id": 19,\n                            "name": "Casual wear", \n                            "childNodes": [\n                                {\n                                    "id": 20,\n                                    "name": "Jacket",\n                                    "childNodes": []\n                                },\n                                {\n                                    "id": 21,\n                                    "name": "Jeans",\n                                    "childNodes": []\n                                }\n                            ]\n                        },\n                        {\n                            "id": 22,\n                            "name": "Formal wear",\n                            "childNodes": [\n                                {\n                                    "id": 24,\n                                    "name": "Shirt",\n                                    "childNodes": []\n                                },\n                                {\n                                    "id": 23,\n                                    "name": "Suit",\n                                    "childNodes": []\n                                }\n                            ]\n                        }\n                    ]\n                },\n                {\n                    "id": 10,\n                    "name": "Woman",\n                    "childNodes": [\n                        {\n                            "id": 11,\n                            "name": "Casual wear",\n                            "childNodes": [\n                                {\n                                    "id": 12,\n                                    "name": "Dress",\n                                    "childNodes": []\n                                },\n                                {\n                                    "id": 14,\n                                    "name": "Jeans",\n                                    "childNodes": []\n                                },\n                                {\n                                    "id": 13,\n                                    "name": "Miniskirt", \n                                    "childNodes": []\n                                }\n                            ]\n                        },\n                        {\n                            "id": 15,\n                            "name": "Formal wear",\n                            "childNodes": [\n                                {\n                                    "id": 17,\n                                    "name": "Shirt",\n                                    "childNodes": []\n                                },\n                                {\n                                    "id": 16,\n                                    "name": "Suit",\n                                    "childNodes": []\n                                }\n                            ]\n                        }\n                    ]\n                }\n            ]\n        },\n        {\n            "id": 2,\n            "name": "Food",\n            "childNodes": [\n                {\n                    "id": 6,\n                    "name": "Bread",\n                    "childNodes": [\n                        {\n                            "id": 7,\n                            "name": "Baguette",\n                            "childNodes": []\n                        },\n                        {\n                            "id": 8,\n                            "name": "Ciabatta",\n                            "childNodes": []\n                        }\n                    ]\n                },\n                {\n                    "id": 3,\n                    "name": "Drinks",\n                    "childNodes": [\n                        {\n                            "id": 4,\n                            "name": "Coca Cola",\n                            "childNodes": []\n                        },\n                        {\n                            "id": 5,\n                            "name": "Fanta",\n                            "childNodes": []\n                        }\n                    ]\n                }\n            ]\n        }\n    ]\n}\n')),(0,r.kt)("h2",{id:"developer-controls-recursion-per-node"},"Developer Controls Recursion Per Node"),(0,r.kt)("p",null,'Top-down, fetch unlimited layers. But for the node named "Clothing", stop recursion.'),(0,r.kt)(l.Z,{groupId:"language",mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'TreeNodeTable node = Tables.TREE_NODE_TABLE;\n\nList<TreeNode> treeNodes = sqlClient\n    .createQuery(node)\n    .where(node.parentId().isNull())\n    .select(\n        node.fetch(\n            Fetchers.TREE_NODE_FETCHER\n            .name()\n            .childNodes(\n                Fetchers.TREE_NODE_FETCHER.name(),\n                it -> it.recursive(args ->\n                    // highlight-next-line\n                    !args.getEntity().name().equals("Clothing")\n                )\n            )\n        )\n    )\n    .execute(); \n'))),(0,r.kt)(i.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},'val treeNodes = sqlClient\n    .createQuery(TreeNode::class) {\n        where(table.parentId.isNull())\n        select(\n            table.fetchBy {\n                allScalarFields()\n                childNodes({\n                    recursive {\n                        // highlight-next-line\n                        entity.name != "Clothing"\n                    }\n                }) {\n                    allScalarFields()\n                }\n            }\n        )\n    }\n    .execute()\n')))),(0,r.kt)("p",null,"In the above code, the parameter ",(0,r.kt)("inlineCode",{parentName:"p"},"args")," of ",(0,r.kt)("inlineCode",{parentName:"p"},"it.recursive(args)")," is an object providing two properties:  "),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("inlineCode",{parentName:"li"},"args.getEntity()"),": The current node object."),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("inlineCode",{parentName:"li"},"args.getDepth()"),": The current node depth. 0 for nodes obtained directly from the main query, incrementally increases with recursion depth.  "),(0,r.kt)("li",{parentName:"ol"},"The return value decided by the user: A boolean variable that decides whether to recursively fetch for the current node.")),(0,r.kt)("p",null,"The above code means all nodes will be recursively fetched except the ",(0,r.kt)("inlineCode",{parentName:"p"},"Clothing")," node."),(0,r.kt)("p",null,"4 SQLs are generated:  "),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Query root objects"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"select\n    tb_1_.NODE_ID,\n    tb_1_.NAME\nfrom TREE_NODE as tb_1_ \nwhere tb_1_.PARENT_ID is null\n"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Fetch layer 1"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"select\n    tb_1_.PARENT_ID,\n    tb_1_.NODE_ID,\n    tb_1_.NAME\nfrom TREE_NODE as tb_1_\nwhere\ntb_1_.PARENT_ID in (?)\n"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Fetch layer 2"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-sql"},'select\n    tb_1_.PARENT_ID,\n    tb_1_.NODE_ID,\n    tb_1_.NAME\nfrom TREE_NODE as tb_1_\nwhere\n/*\n* Home node has two child nodes: \n*      "Food" and "Clothing",\n*\n* However, "Clothing is excluded by user,  \n* so `in(?)` is used here, not `in(?, ?)`  \n*/\ntb_1_.PARENT_ID in (?) \n'))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Fetch layer 3"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"select\n    tb_1_.PARENT_ID,\n    tb_1_.NODE_ID,\n    tb_1_.NAME\nfrom TREE_NODE as tb_1_\nwhere\ntb_1_.PARENT_ID in (?, ?)\n")),(0,r.kt)("ol",{parentName:"li",start:5},(0,r.kt)("li",{parentName:"ol"},"Fetch layer 4")),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"select\n    tb_1_.PARENT_ID,\n    tb_1_.NODE_ID,\n    tb_1_.NAME\nfrom TREE_NODE as tb_1_ \nwhere\ntb_1_.PARENT_ID in (?, ?, ?, ?)\n")))),(0,r.kt)("p",null,"The printed result is (original compact, formatted for readability):"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "id":1,\n    "name":"Home",\n    "childNodes":[\n    // highlight-next-line\n        {"id":9,"name":"Clothing"},\n        {\n            "id":2,\n            "name":"Food",\n            "childNodes":[\n                {\n                    "id":6,\n                    "name":"Bread",\n                    "childNodes":[\n                        {"id":7,"name":"Baguette","childNodes":[]},\n                        {"id":8,"name":"Ciabatta","childNodes":[]}\n                    ]\n                },{\n                    "id":3,\n                    "name":"Drinks",\n                    "childNodes":[\n                        {"id":4,"name":"Coca Cola","childNodes":[]},\n                        {"id":5,"name":"Fanta","childNodes":[]}\n                    ]\n                }\n            ]\n        }\n    ]\n}\n')))}u.isMDXComponent=!0}}]);